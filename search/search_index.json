{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"讯联智能 POS 体验版 download","text_tokens":["智能","pos","download"," ","体验","讯联","体验版"],"title":"功能预览","title_tokens":["预览","功能"]},{"location":"#pos-download","text":"","text_tokens":[],"title":"讯联智能 POS 体验版  download","title_tokens":["智能","pos","download"," ","体验","讯联","体验版"]},{"location":"about/","text":"平台地址 系统 生产地址 测试地址 收单网关平台 211.147.64.193:10001 192.168.1.102:8000 风控平台 10.10.10.141:8088 192.168.1.187:18080 服务平台 www.xunliandata.com 192.168.1.176:3810 云收银平台 showmoney.cn test.quick.ipay.so 智能 POS 连接的环境 环境 地址 表现形式 生产环境 https://www.xunliandata.com/ 外网测试环境 http://116.236.215.18:10017/ 内网测试环境 http://192.168.1.176:3810/","text_tokens":["3810","quick","形式","现形","外","表现","平台","http","服务","系统","测试","网关","1.102","192.168","8000","10.141","的","1.176","10017","连接","收银","215.18","生产","https","1.187","so","收单","云","10.10","ipay","211.147","/",".","xunliandata","内",":","智能","风控","8088","pos","showmoney","服务平台","环境","www","18080","网","test","地址"," ","com","64.193","116.236","测试环境","cn","10001","表现形式"],"title":"环境地址","title_tokens":["地址","环境"]},{"location":"download/","text":"Sample Download 最新版接入demo下载： demo下载 注意：v2.1.3以及后续sdk版本使用Jcenter管理（ 最新版本:2.5.2 ） compile 'com.cardinfolink.smart.pos:PosSDK:\"latestVersion\"' or <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>PosSDK</artifactId> <version>\"latestVersion\"</version> <type>pom</type> </dependency> 版本说明(Change Log) 版本 更新内容 V2.5.2 1. 扫码接口新增单品券功能； 2. 修改交易查询接口逻辑 V2.4.2 1. 新增扫码预授权 V2.4.1 1. 卡交易增加上送地理位置；2. 增加脱机pin交易；3. 修改DCC交易逻辑 V2.2.4 1. 优化了双应用的主控占用体验；2. 更改https证书 V2.2.3 1. 适配新大陆N910设备；2. 订单查询、交易统计、交易结算接口优化升级；3. 打印交易结果时，打印成功、失败条件优化 V2.2.1 1. 银联21号问改造，要求银联卡的消费、预授权交易类型上送硬件序列号，硬件序列号密文等信息用于监管 V2.2.0 1. A8 读取 9F27 TAG 失败优化；2. AID 支持部分匹配；3. aid和ic公钥添加在asset目录中；4. response请求信息优化；5. 激活流程修改 V2.1.8 1. 移除下载参数N900通讯APN设置；2. 适配联迪A8；3. 增加Stetho调试工具；网络相关API优化；4. Bugfix V2.1.7 1. 结算时，打印小票改为只打印合计小票；2. 历史结算，可选择打印详情小票或者合计小票；3. 结算打印后，批次号不能自动加1问题修改；4. 结算数据库优化 V2.1.3 1. 添加CILPayUtil添加工具类方法；2. CFCardSDK中cancelOfBank -> revokeOfBank；3. Trans方法类添加55域、cardType类型；4. N900加入POS-收银机蓝牙通信功能 V2.0.0 1. 增加基于安卓智能手机的纯扫码交易支持；2. 打印回调结果PrinterResult移动到com.cardinfolink.pos.bean包下；3. 按照银联合规信息设计小票 V1.0.4 1. 修复部分bug，提高稳定性 V1.0.2 1. 增加 setTestAddr 和 setProAddr 方法。可以方便更改测试环境和正式环境地址 V1.0.1 1. 增加外部订单号 V1.0.0 1. 第一版讯联 POS SDK , 支持银行卡( IC 卡、磁条卡、非接卡)和扫码(支付宝、微信)交易","text_tokens":["工具","设计","按照","序列","，","结算","21","时","适配","v2.2","批次","latestversion","说明","手机","；","改为","设置","收银","trans","内容","提高","下载","sample","条件","9f27","定性","纯","外部","到","讯联","占用","自动","智能","groupid","逻辑","cilpayutil","download","历史","用于","安卓","移动","更新",",","稳定性","稳定","单号","pom","要求","7","version","最新","sdk","序列号","号","jcenter","公钥","tag","com","or","地理","卡","微信","设备","蓝牙","（","银行卡","、","bugfix","在","4","stetho","通信","成功","方法","应用","测试","方便","类型","新版","硬件","v2.1","type","2.5","基于","最新版","预","0","域","统计","revokeofbank","支付宝","cancelofbank","后","包下","合规","：",".","/","change","交易","参数","使用","可","激活","流程","bug","改造","小票","1","setproaddr","第一","磁条卡","问","信息","-","compile","a8","据库","5","订单","。","response","结果","消费","详情","v1.0","8","v2.5","新大陆","优化","失败","数据库","demo","大陆","银行","主控","匹配","正式",")","授权","通讯","）","管理","支持","2","n910","后续","接口","加入","55","扫码","相关","银联","possdk","单品券","了","加","中","ic","bean","升级","修改","第一版","pos","智能手机","更改","合计","cfcardsdk","环境","和","收银机","地理位置","目录","v2.0","等","printerresult","v2.4"," ","送","dependency","位置","apn","测试环境","功能","artifactid","证书","调试","问题","添加","密文","联迪","(","只","上","增加","修复","aid","以及","settestaddr","注意","交易类型","的","读取","选择","新大","订单号","https","或者","asset","版本",">","'","脱机","log","接入","n900","cardtype","网络",":","银联卡","<","查询","支付","cardinfolink","双","回调","磁条","体验","非接","dcc","部分","不能","类","监管","数据","移除","3","新增","请求","api","地址","能手","smart","pin","\"","可以","打印"],"title":"版本说明与sample下载","title_tokens":["下载","版本","sample","与","说明"]},{"location":"download/#sample-download","text":"最新版接入demo下载： demo下载 注意：v2.1.3以及后续sdk版本使用Jcenter管理（ 最新版本:2.5.2 ） compile 'com.cardinfolink.smart.pos:PosSDK:\"latestVersion\"' or <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>PosSDK</artifactId> <version>\"latestVersion\"</version> <type>pom</type> </dependency>","text_tokens":["\"","demo","）","以及","管理","注意","2","latestversion","后续","新版","v2.1","type","最新版","下载","版本",">","'","possdk","：",".","接入","/",":","<","使用","groupid","cardinfolink","pos","pom","compile","3","version","最新","sdk","jcenter"," ","smart","com","or","dependency","（","2.5","artifactid"],"title":"Sample Download","title_tokens":[" ","sample","download"]},{"location":"download/#change-log","text":"版本 更新内容 V2.5.2 1. 扫码接口新增单品券功能； 2. 修改交易查询接口逻辑 V2.4.2 1. 新增扫码预授权 V2.4.1 1. 卡交易增加上送地理位置；2. 增加脱机pin交易；3. 修改DCC交易逻辑 V2.2.4 1. 优化了双应用的主控占用体验；2. 更改https证书 V2.2.3 1. 适配新大陆N910设备；2. 订单查询、交易统计、交易结算接口优化升级；3. 打印交易结果时，打印成功、失败条件优化 V2.2.1 1. 银联21号问改造，要求银联卡的消费、预授权交易类型上送硬件序列号，硬件序列号密文等信息用于监管 V2.2.0 1. A8 读取 9F27 TAG 失败优化；2. AID 支持部分匹配；3. aid和ic公钥添加在asset目录中；4. response请求信息优化；5. 激活流程修改 V2.1.8 1. 移除下载参数N900通讯APN设置；2. 适配联迪A8；3. 增加Stetho调试工具；网络相关API优化；4. Bugfix V2.1.7 1. 结算时，打印小票改为只打印合计小票；2. 历史结算，可选择打印详情小票或者合计小票；3. 结算打印后，批次号不能自动加1问题修改；4. 结算数据库优化 V2.1.3 1. 添加CILPayUtil添加工具类方法；2. CFCardSDK中cancelOfBank -> revokeOfBank；3. Trans方法类添加55域、cardType类型；4. N900加入POS-收银机蓝牙通信功能 V2.0.0 1. 增加基于安卓智能手机的纯扫码交易支持；2. 打印回调结果PrinterResult移动到com.cardinfolink.pos.bean包下；3. 按照银联合规信息设计小票 V1.0.4 1. 修复部分bug，提高稳定性 V1.0.2 1. 增加 setTestAddr 和 setProAddr 方法。可以方便更改测试环境和正式环境地址 V1.0.1 1. 增加外部订单号 V1.0.0 1. 第一版讯联 POS SDK , 支持银行卡( IC 卡、磁条卡、非接卡)和扫码(支付宝、微信)交易","text_tokens":["工具","设计","按照","序列","，","结算","21","时","适配","v2.2","批次","手机","；","改为","设置","收银","trans","内容","提高","下载","条件","9f27","定性","纯","外部","到","讯联","占用","自动","智能","逻辑","cilpayutil","历史","用于","安卓","移动","更新",",","稳定性","稳定","单号","要求","7","sdk","序列号","号","公钥","tag","com","地理","卡","微信","设备","蓝牙","银行卡","、","bugfix","在","4","stetho","通信","成功","方法","应用","测试","方便","类型","硬件","v2.1","基于","预","0","域","统计","revokeofbank","支付宝","cancelofbank","后","包下","合规",".","交易","参数","可","激活","流程","bug","改造","小票","1","setproaddr","第一","磁条卡","问","信息","-","a8","据库","5","订单","。","response","结果","消费","详情","v1.0","8","新大陆","v2.5","优化","失败","数据库","大陆","银行","主控","匹配","正式","授权","通讯",")","支持","2","n910","接口","加入","55","扫码","相关","银联","单品券","了","加","中","ic","bean","升级","修改","第一版","pos","智能手机","更改","合计","cfcardsdk","环境","和","收银机","地理位置","目录","v2.0","等","printerresult","v2.4"," ","送","位置","apn","测试环境","功能","证书","调试","问题","添加","密文","联迪","只","(","上","增加","修复","aid","settestaddr","交易类型","的","读取","选择","新大","订单号","https","或者","asset","版本",">","脱机","n900","cardtype","网络","银联卡","查询","支付","cardinfolink","双","回调","磁条","体验","非接","dcc","部分","不能","类","监管","数据","移除","新增","3","请求","api","地址","能手","pin","可以","打印"],"title":"版本说明(Change Log)","title_tokens":[" ","版本","(",")","说明","change","log"]},{"location":"attached/attachments/","text":"交易应答码表V3(20160811更新) 代码 POS显示(计划实施) 00 交易成功 01 \"01-交易失败请联系发卡行\" 02 \"02-交易失败请联系发卡行\" 03 \"03-无效商户请联系客服\" 04 \"04-卡片异常请换卡重试\" 05 \"05-交易失败请联系发卡行\" 06 \"06-交易失败请联系发卡行\" 07 \"07-卡片异常请换卡重试\" 09 \"09-交易失败请重试\" 12 \"12-发卡行不支持的交易\" 13 \"13-无效金额\" 14 \"14-无效卡号请联系发卡行或换卡重试\" 15 \"15-无此发卡行请换卡重试\" 19 \"19-交易失败请重试\" 20 \"20-交易失败请联系发卡行\" 21 \"21-交易失败请联系发卡行\" 22 \"22-操作有误请重试\" 23 \"23-交易失败请联系发卡行\" 25 \"25-未找到原交易请重试或联系客服\" 30 \"30-格式错误请联系客服\" 31 \"31-交易失败请联系客服\" 33 \"33-过期卡请换卡重试\" 34 \"34-卡片异常请联系发卡行\" 35 \"35-卡片异常请联系发卡行\" 36 \"36-卡片异常请联系发卡行\" 37 \"37-卡片异常请联系发卡行\" 38 \"38-密码错误次数超限\" 39 \"39-交易失败请换卡重试\" 40 \"40-不支持的交易类型请联系客服\" 41 \"41-卡片异常请联系发卡行\" 42 \"42-卡片异常请联系发卡行\" 43 \"43-卡片异常请联系发卡行\" 44 \"44-交易失败请联系发卡行\" 45 \"45-请插卡交易或联系客服\" 51 \"51-余额不足\" 52 \"52-交易失败请换卡重试\" 53 \"53-交易失败请换卡重试\" 54 \"54-过期卡请换卡重试\" 55 \"55-密码错误请重试\" 56 \"56-交易失败请换卡重试\" 57 \"57-卡片异常请联系客服或换卡重试\" 58 \"58-未授权的交易请联系客服\" 59 \"59-卡片异常请联系发卡行\" 60 \"60-卡片异常请联系发卡行\" 61 \"61-超出金额限制请联系客服或换卡重试\" 62 \"62-卡片异常请联系发卡行\" 63 \"63-交易失败请联系发卡行\" 64 \"64-交易失败请联系发卡行\" 65 \"65-交易次数超限请联系发卡行\" 66 \"66-交易失败请联系客服\" 67 \"67-卡片异常请联系发卡行\" 68 \"68-交易超时请重试\" 75 \"75-密码错误次数超限\" 76 \"76-交易失败请联系发卡行\" 77 \"77-交易失败请联系客服\" 78 \"78-交易失败请换卡重试\" 79 \"79-脱机交易对账不平请重传数据或联系客服\" 80 \"80-交易失败请联系客服\" 81 \"81-交易失败请联系客服\" 83 \"83-交易失败请联系客服\" 84 \"84-交易失败请联系客服\" 85 \"85-交易失败请联系客服\" 86 \"86-交易失败请联系客服\" 88 \"88-交易失败请联系客服\" 89 \"89-交易失败请联系客服\" 90 \"90-交易失败请稍后重试\" 91 \"91-交易失败请稍后重试\" 92 \"92-交易失败请稍后重试\" 93 \"93-交易失败请联系发卡行\" 94 \"94-交易失败请稍后重试\" 95 \"95-交易失败请稍后重试\" 96 \"96-系统异常请联系客服\" 97 \"97-无效终端请联系客服或检查配置\" 98 \"98-交易超时请重试\" 99 \"99-交易失败请联系客服\" A0 \"A0-请重新签到或联系客服\" B1 \"B1-卡片异常请联系客服或换卡重试\" C0 \"C0-核销失败\" C1 \"C1-卡券已被核销\" C2 \"C2-卡券已过期\" C3 \"C3-无效的卡券\" C4 \"C4-券状态异常\" C5 \"C5-未到卡券使用时间\" C6 \"C6-商户不能使用该卡券\" C7 \"C7-金额太小不可参与优惠\" C8 \"C8-此卡券不能使用此方式进行支付\" C9 \"C9-交易失败，请联系客服\" CA \"CA-付款码与卡券指定支付方式不符\" CB \"CB-卡券订单不存在\" CC \"CC-交易失败请联系客服\" CD \"CD-卡券订单已支付\" L1 \"L1-交易额度超限请联系客服\" L2 \"L2-交易额度超限请联系客服\" L3 \"L3-交易额度超限请联系客服\" RA \"RA-交易失败请联系客服\" RB \"RB-交易失败请联系客服\" RC \"RC-交易失败请联系客服\" RD \"RD-交易失败请联系客服\" Y0 \"Y0-付款码错误或过期，请重试\" Y1 \"Y1-交易失败请联系客服\" Y2 \"Y2-未开通此支付方式，请联系客服\" Y3 \"Y3-订单不存在，请重试\" Y4 \"Y4-未开通此支付方式，请联系客服\" Y5 \"Y5-退款失败，商家账户余额不足\" Y6 \"Y6-退款金额超过原订单金额\" Y7 \"Y7-交易失败请联系客服\" Y8 \"Y8-不支持的交易类型请联系客服\" Y9 \"Y9-订单已关闭或取消\" YA \"YA-交易失败请联系客服\" YB \"YB-交易失败请联系客服\" YC \"YC-交易失败请联系客服\" YD \"YD-交易失败请联系客服\" YE \"YE-该交易类型不能执行此操作\" YF \"YF-该交易类型不能执行此操作\" YG \"YG-原交易已退款\" YH \"YH-只能隔天退款\" YJ \"YJ-不支持的卡类型，请换卡或绑新卡\" YK \"YK-只能撤销当天交易\" YL \"YL-顾客账户状态异常\" YM \"YM-商家账户状态异常\" YN \"YN-付款码与交易渠道不符\" YP \"YP-交易失败请联系客服\" YQ \"YQ-软件版本过低，请升级\" YR \"YR-付款金额小于最低限额\" YS \"YS-交易失败请联系客服\" YT \"YT-姓名校验错误\" YU \"YU-对同一用户操作过于频繁，请稍后重试\" YV \"YV-购汇金额或币种错误\" YW \"YW-额度超限\" YX \"YX-顾客关闭相关功能\" YY \"YY-交易失败请重试\" YZ \"YZ-交易失败请联系客服\" Z0 \"Z0-交易失败请联系客服\" Z1 \"Z1-交易失败请联系客服\" Z2 \"Z2-未授权的交易请联系客服\" Z3 \"Z3-交易失败请联系客服\" Z4 \"Z4-交易失败请联系客服\" Z5 \"Z5-交易失败请联系客服\" Z6 \"Z6-卖家买家账号相同，不能进行交易\" Z7 \"Z7-商户未签约请联系客服\" Z8 \"Z8-交易失败请重试\" Z9 \"Z9-商户未授权请联系客服\" ZA \"ZA-交易失败，请更换支付方式\" ZB \"ZB-交易失败请重试或联系客服\" ZC \"ZC-交易失败请联系客服\" ZD \"ZD-未授权交易请联系客服\" ZE \"ZE-该商户暂无退款权限请联系客服\" ZF \"ZF-交易异常，如有扣款，款项稍后退回\" ZG \"ZG-交易失败，请重试\" ZH \"ZH-交易失败请联系客服\" ZI \"ZI-直接进入扫码流程显示流程界面\" ZJ \"ZJ-直接进入扫码流程显示流程界面\" ZK \"ZK-交易失败请联系客服\" ZL \"ZL-交易失败请联系客服\" ZM \"ZM-买家付款额度超限\" ZN \"ZN-商家收款额度超限\" ZP \"ZP-超出每日限额，请联系客服\" ZQ \"ZQ-提升限额申请正在审核中\" ZR \"ZR-交易失败，请联系客服\" ZS \"ZS-不支持该交易类型，请联系客服\" ZT \"ZT-交易失败请联系客服\" ZU \"ZU-交易失败请联系客服\" ZV \"ZV-未开通此支付方式，请联系客服\" ZY \"ZY-用户取消支付，请重新发起交易\" ZZ \"ZZ-交易失败请联系客服\" 交易应答码表V2(智能POS) 注1:银行卡的09和扫码的09有区别 注2:位置应答码展示为 \"XX-交易失败-请联系客服\" 代码 意义 原因/采取的措施 说明 POS显示(计划实施) 00 承兑或交易成功 承兑或交易成功 交易成功 交易成功 01 查发卡行 查发卡行 交易失败-请联系发卡行 01交易失败-请联系客服 02 查发卡行的特殊条件 可电话向发卡行查询 交易失败-请联系发卡行 02交易失败-请联系客服 03 无效商户 商户需要在银行或中心登记 商户未登记 03无效商户-请联系客服 04 没收卡 操作员没收卡 没收卡-请联系收单行 04卡片异常-请联系客服或换卡重试 05 不予承兑 发卡不予承兑 交易失败-请联系发卡行 05交易失败-请联系客服 06 出错 发卡行故障 交易失败-请联系发卡行 06交易失败-请联系客服 07 特殊条件下没收卡 特殊条件下没收卡 没收卡-请联系收单行 07卡片异常-请联系客服或换卡重试 09 请求正在处理中 重新提交交易请求 交易失败-请重试 09请重新操作 12 无效交易 发卡行不支持的交易 交易失败-请联系发卡行 12无效交易-请联系客服 13 无效金额 金额为0 或太大 交易金额超限-请重试 13无效金额-请联系客服 14 无效卡号 卡种未在中心登记或读卡号有误 无效卡号-请联系发卡行 14无效卡号-请联系客服或换卡重试 15 无此发卡行 此发卡行未与中心开通业务 此卡不能受理 15无此发卡行-请联系客服或换卡重试 19 重新送入交易 刷卡读取数据有误-可重新刷卡 交易失败-请联系发卡行 19交易失败-请重试 20 无效应答 无效应答 交易失败-请联系发卡行 20交易失败-请联系客服 21 不做任何处理 不做任何处理 交易失败-请联系发卡行 21交易失败-请联系客服 22 怀疑操作有误 POS状态与中心不符-可重新签到 操作有误-请重试 22操作有误-请重试 23 不可接受的交易费 不可接受的交易费 交易失败-请联系发卡行 23交易失败-请联系客服 25 未能找到文件上记录 发卡行未能找到有关记录 交易失败-请联系发卡行 25无效交易-请联系客服 30 格式错误 格式错误 交易失败-请联系发卡行 30格式错误-请联系客服 31 不支持的银行 此发卡方未与中心开通业务 此卡不能受理 31银行未联网-请联系客服 33 过期的卡 过期的卡-操作员可以没收 过期卡-请联系发卡行 33过期卡-请换卡重试 34 有作弊嫌疑 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 34卡片异常-请换卡重试 35 受卡方与安全保密部门联系 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 35卡片异常--请换卡重试 36 受限制的卡 有作弊嫌疑的卡-操作员可以没收 此卡有误-请换卡重试 36卡片异常--请换卡重试 37 受卡方呼受理方安全保密部门(没收卡) 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 37卡片异常-请换卡重试 38 超过允许的PIN试输入 密码错次数超限-操作员可以没收 密码错误次数超限 38密码错误次数超限 39 无此信用卡账户 可能刷卡操作有误 交易失败-请联系发卡行 39交易失败-请重试 40 请求的功能尚不支持 发卡行不支持的交易类型 交易失败-请联系发卡行 40不支持的交易类型 41 丢失卡 挂失的卡- 操作员可以没收 没收卡-请联系收单行 41卡片异常-请换卡重试 42 无此账户 发卡行找不到此账户 交易失败-请联系发卡方 42卡片异常-请联系客服 43 被窃卡 被窃卡- 操作员可以没收 没收卡-请联系收单行 43卡片异常-请换卡重试 44 无此投资账户 可能刷卡操作有误 交易失败-请联系发卡行 44交易失败-请联系客服或换卡重试 45 请插卡交易 45请插卡交易 51 无足够的存款 账户内余额不足 余额不足-请查询 51余额不足 52 无此支票账户 无此支票账户 交易失败-请联系发卡行 52交易失败-请联系客服 53 无此储蓄卡账户 无此储蓄卡账户 交易失败-请联系发卡行 53交易失败-请联系客服 54 过期的卡 过期的卡 过期卡-请联系发卡行 54过期卡-请换卡重试 55 不正确的PIN 密码输错 密码错-请重试 55密码错误-请重试 56 无此卡记录 发卡行找不到此账户 交易失败-请联系发卡行 56交易失败-请联系客服 57 不允许持卡人进行的交易 不允许持卡人进行的交易 交易失败-请联系发卡行 57未授权的交易-请联系客服 58 不允许终端进行的交易 该商户不允许进行的交易 终端无效-请联系收单行或银联 58未授权的交易-请联系客服 59 有作弊嫌疑 交易失败-请联系发卡行 59交易失败-请联系客服 60 受卡方与安全保密部门联系 交易失败-请联系发卡行 60交易失败-请联系客服 61 超出取款金额限制 一次交易的金额太大 金额太大 61超交易限额-请联系客服或换卡重试 62 受限制的卡 交易失败-请联系发卡行 62卡片异常-请换卡重试 63 违反安全保密规定 违反安全保密规定 交易失败-请联系发卡行 63交易失败-请联系客服 64 原始金额不正确 原始金额不正确 交易失败-请联系发卡行 64原金额错误-请联系客服或重试 65 超出取款次数限制 超出取款次数限制 超出取款次数限制 65超交易次数-请联系客服 66 受卡方呼受理方安全保密部门 受卡方呼受理方安全保密部门 交易失败-请联系收单行或银联 66交易失败-请联系客服 67 捕捉（没收卡） 捕捉（没收卡） 没收卡 67卡片异常-请换卡重试 68 收到的回答太迟 发卡行规定时间内没有回答 交易超时-请重试 68交易超时-请重试 75 允许的输入PIN次数超限 允许的输入PIN次数超限 密码错误次数超限 75密码错误次数超限 76 76交易失败-请联系客服 77 需要向网络中心签到 POS批次与网络中心不一致 请向网络中心签到 77交易失败-请联系客服 78 78交易失败-请联系客服 79 脱机交易对账不平 POS终端上传的脱机数据对账不平 POS终端重传脱机数据 79对账不平-请联系客服 80 80交易失败-请联系客服 81 81交易失败-请联系客服 83 83交易失败-请联系客服 84 84交易失败-请联系客服 85 85交易失败-请联系客服 86 86交易失败-请联系客服 88 88交易失败-请联系客服 89 89交易失败-请联系客服 90 日期切换正在处理 日期切换正在处理 交易失败-请稍后重试 90交易失败-请稍后重试 91 发卡行或收单银行不能操作 电话查询发卡方或收单银行-可重作 交易失败-请稍后重试 91交易失败-请联系客服 92 金融机构或中间网络设施找不到或无法达到 电话查询发卡方或网络中心-可重作 交易失败-请稍后重试 92交易失败-请联系客服 93 交易违法、不能完成 交易违法、不能完成 交易失败-请联系发卡行 93交易失败-请联系客服 94 重复交易 查询网络中心-可重新签到作交易 交易失败-请稍后重试 94重复交易 95 调节控制错 调节控制错 交易失败-请稍后重试 95交易失败-请联系客服 96 系统异常、失效 发卡方或网络中心出现故障 交易失败-请稍后重试 96交易失败-请联系客服 97 POS终端号找不到 终端未在中心或银行登记 终端未登记-请联系收单行或银联 97无效终端-请联系客服或检查配置 98 收不到发卡行应答 收不到发卡行应答 交易超时-请重试 98交易超时-请重试 99 PIN格式错 可重新签到作交易 校验错-请重新签到 99交易失败-请联系客服 A0 MAC校验错 可重新签到作交易 校验错-请重新签到 A0请重新签到或联系客服 C1 卡券已被核销 C1卡券已被核销 C2 卡券已过期 C2卡券已过期 C3 无效的卡券 C3无效的卡券 09 处理中 正常应答-表明该交易需要输入密码-完成后发起查询确认交易状态 09处理中 Y1 商户密钥错误 核实商户交易密钥是否正确 12改为Y1 Y1交易失败-请联系客服 Y0 付款码错误或过期 刷新条码后-重新扫码-发起支付 14改为Y0 Y0付款码错误或过期 ZH 订单号重复 订单号重复-使用新订单号发起交易-建议订单号加上时间防止重复 19改为ZH ZH订单号重复 Y3 订单不存在 该订单系统不存在-不能进行相应操作 25改为Y3 Y3订单不存在 Y4 商户未申请开通此支付方式 查看商户是否提交该渠道申请-如以提交-核实是否有配置路由信息 31改为Y4 Y4不支持此支付方式 Y5 退款失败-商家账户余额不足 建议商家先进行一笔收款-再发起退款 61改为Y5 Y5退款失败-商家账户余额不足 Y6 退款金额超过原订单金额 退款金额需要小于等于可退款金额 64改为Y6 Y6退款金额超过原订单金额 Y7 外部系统错误 具体描述可返回渠道中文描述字段 91改为Y7 Y7交易失败-请联系客服 Y2 商户无此交易渠道权限 H1改为Y2 Y2未授权的交易 Y8 商户无此接口权限 核实该商户是否配置了该接口权限 H2改为Y8 Y8交易失败-请联系客服 Y9 订单已关闭或取消 订单已关闭或取消-不能进行相应操作 H3改为Y9 Y9订单已关闭或取消 YA [字段名]不能为空 检查出错字段 H4改为YA YA交易失败-请联系客服 YB [字段名]格式错误 检查出错字段 H5改为YB YB交易失败-请联系客服 YC 交易状态不合法 检查交易状态是否正常 H6改为YC YC交易失败-请联系客服 YD 交易信息中包含违禁词汇 检查交易信息中是否包含违禁词汇 H7改为YD YD交易失败-请联系客服 YE 原交易非支付交易 原交易非支付交易-不能执行此类操作 R1改为YE YE原交易非支付交易 YF 原交易未成功支付 原交易未成功支付-部分交易不能执行 R2改为YF YF原交易未成功支付 YG 原交易已退款 R3改为YG YG原交易已退款 YH 只能隔天退款 R4改为YH YH只能隔天退款 YJ 不支持的卡类型-请换卡或绑新卡 R5改为YJ YJ不支持的卡类型-请换卡或绑新卡 YK 只能撤销当天交易 R6改为YK YK只能撤销当天交易 YL 顾客账户状态异常 R7改为YL YL顾客账户状态异常 YM 商家账户状态异常 R8改为YM YM商家账户状态异常 YN 付款码与交易渠道不符 R9改为YN YN付款码与交易渠道不符 YP 分账信息不正确 S1改为YP YP交易失败-请联系客服 YQ 软件版本过低-请升级 S2改为YQ YQ软件版本过低-请升级 YR 付款金额小于最低限额 S3改为YR YR付款金额小于最低限额 YS Openid错误 S4改为YS YS交易失败-请联系客服 YT 姓名校验错误 S5改为YT YT姓名校验错误 YU 对同一用户操作过于频繁-请稍候重试 S6改为YU YU对同一用户操作过于频繁-请稍候重试 YV 购汇金额或币种错误 S7改为YV YV购汇金额或币种错误 YW 额度超限 S8改为YW YW额度超限 YX 顾客关闭相关功能 S9改为YX YX顾客关闭相关功能 YY 授权码code错误 J1改为YY YY交易失败-请联系客服 YZ 渠道商户秘钥未配置或配置错误 YZ交易失败-请联系客服 C0 核销失败 C0核销失败 C4 券状态异常 C4券状态异常 C5 未到卡券使用时间 请在卡券有效期内使用 C5未到卡券使用时间 C6 商户不能使用该卡券 C6商户不能使用该卡券 C7 金额达不到满足优惠条件的最小金额 C7金额太小-不可参与优惠 C8 此卡券不能使用此方式进行支付 请使用卡券指定的支付方式 C8此卡券不能使用此方式进行支付 Z0 渠道商户信息有误 检查系统渠道商户配置和渠道是否一致-或者看渠道商户具体应答 E0改为Z0 Z0交易失败-请联系客服 Z1 渠道受理机构信息配置有误 检查与渠道给出信息是否一致-或者看具体应答错误码 E1改为Z1 Z1交易失败-请联系客服 Z2 渠道不支持该业务 如不支持部分退款等 E2改为Z2 Z2未授权的交易-请联系客服 Z3 接入渠道IP验证异常 看渠道方是否有将我方IP配置 99改为Z3 Z3交易失败-请联系客服 Z4 门店状态异常 门店状态被改为异常状态 G1改为Z4 Z4交易失败-请联系客服 Z5 渠道商户状态异常 渠道商户状态被改为异常状态 G2改为Z5 Z5交易失败-请联系客服 Z6 卖家买家账号相同-不能进行交易 通知商户不能用自己账户进行交易-一定要使用其他人账户 G3改为Z6 Z6账号有误-请联系客服 Z7 没有签约扫码支付接口或签约失效 通知商户进行签约 G4改为Z7 Z7未授权的交易-请联系客服 Z8 支付失败-请顾客刷新付款码后重新收款-如再次收款失败-请联系管理员处理 重新扫码收款 G5改为Z8 Z8交易失败-请重试 Z9 未进行应用授权或授权已过期 通知商户重新进行授权操作 G6改为Z9 Z9未授权的交易-请联系客服 ZA 该银行卡已失效-请联系发卡行了解详情-或更换其他支付方式 更换其他支付方式-比如换一张卡或使用钱包余额支付 G7改为ZA ZA交易失败-请更换支付方式 ZB 内部系统操作超时 请重试交易 G9改为ZB ZB交易失败-请联系客服 ZC 渠道验签错误 请至支付宝后台上传公玥 K1改为ZC ZC交易失败-请联系客服 ZD 商户未签约该产品-请按流程完成签约 请按流程完成签约并确认签约成功 K2改为ZD ZD未授权交易-请联系客服 ZE 商户需授权服务商退款接口权限 请服务商按照指引流程-完成授权 K3改为ZE ZE未授权交易-请联系客服 ZF 交易失败-如顾客反馈扣款成功-款项将会在一段时间后退回 不进行发货处理-重新进行一笔收款 F1改为ZF ZF交易失败-请联系客服 ZG 交易失败-请重新发起交易 F8改为ZG ZG交易失败-请重试 E1 程序异常 E1交易失败-请联系客服 E2 配置错误 E2交易失败-请联系客服 E4 E4交易失败-请联系客服 L1 机构额度超限 L1交易失败-请联系客服 L2 商户额度单笔超限 L2交易失败-请联系客服 L3 商户额度单日超限 B1 卡片黑名单 B1交易失败-请联系客服 RA 规则预警 RA交易失败-请联系客服 RB 预警联机拒交易 RB交易失败-请联系客服 RC 预警降额拒交易类P RC交易失败-请联系客服 RD 预警降额拒交易类A RD交易失败-请联系客服 交易应答码表V1(传统POS) 交易返回合作方时都有 39 域，合作方和终端需根据应答码要采取相应的操作，可以把操作分为以下几类: A:交易成功 B:交易失败, 可重试 C:交易失败, 不需要重试 D:交易失败, 终端操作员处理 E:交易失败, 系统故障, 不需要重试 注 1: 如果 39 域的内容不能在下表中找到，就显示“交易失败” 注 2: 如果POS交易的批次号和网络中心批次号不一致时应答码会填 “77”，此时POS机应当提示操作员重新签到， 再作交易。 代码 意义 类别 原因/采取的措施 说明 00 承兑或交易成功 A 承兑或交易成功 交易成功 01 查发卡行 C 查发卡行 交易失败，请联系发卡行 02 查发卡行的特殊条件 C 可电话向发卡行查询 交易失败，请联系发卡行 03 无效商户 C 商户需要在银行或中心登记 商户未登记 04 没收卡 D 操作员没收卡 没收卡，请联系收单行 05 不予承兑 C 发卡不予承兑 交易失败，请联系发卡行 06 出错 E 发卡行故障 交易失败，请联系发卡行 07 特殊条件下没收卡 D 特殊条件下没收卡 没收卡，请联系收单行 09 请求正在处理中 B 重新提交交易请求 交易失败，请重试 12 无效交易 C 发卡行不支持的交易 交易失败，请联系发卡行 13 无效金额 B 金额为 0 或太大 交易金额超限，请重试 14 无效卡号 B 卡种未在中心登记或读卡号有误 无效卡号，请联系发卡行 15 无此发卡行 C 此发卡行未与中心开通业务 此卡不能受理 19 重新送入交易 C 刷卡读取数据有误，可重新刷卡 交易失败，请联系发卡行 20 无效应答 C 无效应答 交易失败，请联系发卡行 21 不做任何处理 C 不做任何处理 交易失败，请联系发卡行 22 怀疑操作有误 C POS 状态与中心不符，可重新签到 操作有误，请重试 23 不可接受的交易费 C 不可接受的交易费 交易失败，请联系发卡行 25 未能找到文件上记录 C 发卡行未能找到有关记录 交易失败，请联系发卡行 30 格式错误 C 格式错误 交易失败，请联系发卡行 31 不支持的银行 C 此发卡方未与中心开通业务 此卡不能受理 33 过期的卡 D 过期的卡，操作员可以没收 过期卡，请联系发卡行 34 有作弊嫌疑 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 35 受卡方与安全保密部门联系 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 36 受限制的卡 D 有作弊嫌疑的卡，操作员可以没收 此卡有误，请换卡重试 37 受卡方呼受理方安全保密部门(没收卡) D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 38 超过允许的 PIN 试输入 D 密码错次数超限，操作员可以没收 密码错误次数超限 39 无此信用卡账户 C 可能刷卡操作有误 交易失败，请联系发卡行 40 请求的功能尚不支持 C 发卡行不支持的交易类型 交易失败，请联系发卡行 41 丢失卡 D 挂失的卡，操作员可以没收 没收卡，请联系收单行 42 无此账户 B 发卡行找不到此账户 交易失败，请联系发卡方 43 被窃卡 D 被窃卡， 操作员可以没收 没收卡，请联系收单行 44 无此投资账户 C 可能刷卡操作有误 交易失败，请联系发卡行 51 无足够的存款 C 账户内余额不足 余额不足，请查询 52 无此支票账户 C 无此支票账户 交易失败，请联系发卡行 53 无此储蓄卡账户 C 无此储蓄卡账户 交易失败，请联系发卡行 54 过期的卡 C 过期的卡 过期卡，请联系发卡行 55 不正确的 PIN C 密码输错 密码错，请重试 56 无此卡记录 C 发卡行找不到此账户 交易失败，请联系发卡行 57 不允许持卡人进行的交易 C 不允许持卡人进行的交易 交易失败，请联系发卡行 58 不允许终端进行的交易 C 该商户不允许进行的交易 终端无效，请联系收单行或银联 59 有作弊嫌疑 C 交易失败，请联系发卡行 60 受卡方与安全保密部门联系 C 交易失败，请联系发卡行 61 超出取款金额限制 C 一次交易的金额太大 金额太大 62 受限制的卡 C 交易失败，请联系发卡行 63 违反安全保密规定 C 违反安全保密规定 交易失败，请联系发卡行 64 原始金额不正确 C 原始金额不正确 交易失败，请联系发卡行 65 超出取款次数限制 C 超出取款次数限制 超出取款次数限制 66 受卡方呼受理方安全保密部门 C 受卡方呼受理方安全保密部门 交易失败，请联系收单行或银联 67 捕捉(没收卡) C 捕捉(没收卡) 没收卡 68 收到的回答太迟 C 发卡行规定时间内没有回答 交易超时，请重试 75 允许的输入 PIN 次数超限 C 允许的输入 PIN 次数超限 密码错误次数超限 77 需要向网络中心签到 D POS 批次与网络中心不一致 请向网络中心签到 79 脱机交易对账不平 C POS 终端上传的脱机数据对账不 平 POS 终端重传脱机数据 90 日期切换正在处理 C 日期切换正在处理 交易失败，请稍后重试 91 发卡行或收单银行不能操作 C 电话查询发卡方或收单银行，可重作 交易失败，请稍后重试 92 金融机构或中间网络设施无法达到 C 电话查询发卡方或网络中心，可重 作 交易失败，请稍后重试 93 交易违法、不能完成 C 交易违法、不能完成 交易失败，请联系发卡行 94 重复交易 C 查询网络中心，可重新签到作交易 交易失败，请稍后重试 95 调节控制错 C 调节控制错 交易失败，请稍后重试 96 系统异常、失效 C 发卡方或网络中心出现故障 交易失败，请稍后重试 97 POS 终端号找不到 D 终端未在中心或银行登记 终端未登记，请联系收单行或银联 98 收不到发卡行应答 E 收不到发卡行应答 交易超时，请重试 99 PIN 格式错 B 可重新签到作交易 校验错，请重新签到 A0 MAC 校验错 B 可重新签到作交易 校验错，请重新签到 C1 卡券已被核销 C C2 卡券已过期 C C3 无效的卡券 C 交易处理标志 processflag取值如下，用于标记处理成功还是失败。 代码 意义 说明 0 成功 1 受理方拒绝 2 转发方失败 3 渠道拒绝 扫码交易，查询失败后超时选择该状态，表示该笔09应答码交易是失败交易 4 超时 5 处理中 6 落地 交易冲正标志 revflag取值如下，用于标记源交易。 代码 意义 说明 0 正常 1 冲正 2 撤销 3 退货 4 汇款 5 完成 6 手工退货 7 手工完成 8 手工撤销 签购单规范 小票（签购单）样例，银行卡类小票和扫码类小票： 其他说明 签购单中，可以有空行 交易金额显示，如为退货或撤销，均在金额前显示负号 卡号后面的一位字母，刷卡方式，取值：S（刷卡）、I(插卡)、M（无卡）、C（非接） 卡号后面的3位字母，卡品牌CUP 原凭证号：只有撤销或退货时显示 TAG：8583规范中的子域名，必须打印 各项内容必须完备，排版可以略有不同 标点符号全部为半角 银联卡消费打印的签购单中，必须要显示的内容： 内容 字段取值 备注 商户/持卡人/银行存根 固定文本 客户ID 0000000000 目前为10个0 商户名称 Config.IsoMsg.MERCHANT_NAME 商户号 response.getTrans().getCompInfoA2() 终端号 response.getTrans().getCompInfoA3() 卡号 response.getTrans().getCardNo() + response.getTrans().getCardType() + response.getTrans().getCardBrand() 卡号 + 刷卡方式(1S 2I 3C) + 卡品牌 有效期 response.getTrans().getCompExpirationDate() 需格式转换 MM/YY （为空不打印） 收单行 response.getTrans().compInfoA1() 发卡行 response.getTrans().getAdditionalResData() 交易类型 response.getTrans().getTransCode() 需转换，见下文'交易类型码表' 授权码 response.getTrans().getRevAuthCode() 批次号 response.getTrans().getBatchNum() 凭证号 response.getTrans().getTraceNum() 日期时间 response.getTrans().getTransDate() + response.getTrans().getTransDatetime() 需格式转换 参考号 response.getTrans().getRefNum() 交易金额 response.getTrans().getTransAmt() 小费（Tips） 签名 备注 版本 TAG 交易类型码表 transCode 意义 小票打印 PER 消费 PBI 余额查询 PEC 消费冲正 PVR 撤销 PVC 消费撤销冲正 CTH 退货 PPA 预授权 PNP 预授权撤销 ACR 预授权完成 PCR 预授权完成撤销 PPC 预授权冲正 PMC 预授权撤销冲正 PCC 预授权完成冲正 PRC 预授权完成撤销冲正 BPA 条码支付下单 BPP 条码支付预下单 BVD 条码支付撤销 BTH 条码支付退货 BVE 条码支付取消 BPI 条码支付查询 PER2EDC PER类交易DCC－EDC交易 ACR2EDC ACR类交易DCC－EDC交易 TTD 小费 TVD 小费撤销 CASH 现金交易 CCL 现金撤销 新大陆-打印规范 如果你想要自定义小票的样式，可以参考 新大陆 提供的打印文档，点击 新大陆-打印规范.doc 可以下载。 终端相应合规信息取值 按照银联最新规范，终端展示/打印信息需要根据8583报文中57域信息。因此，SDK中Trans新增部分字段 字段名 意义 compInfoA1 签购单收单行 compInfoA2 签购单商户号 compInfoA3 签购单终端号 compInfoA4 markup compInfoA6 借贷记标识 compInfoA7 营销信息 compInfoA8 二维码信息 详细字段信息可查看 javadoc 中com.cardinfolink.pos.sdk.model.Trans信息 币种代码对应表 我们提供了币种和代码对应的一个表格的 PDF 文档，点击 币种代码表20160913.pdf 可以下载。","text_tokens":["方","按照","承兑","核实","h7","点击","具体","该笔","v2","60","切换","自定","未登记","试","接受","45","cup","zq","z9","s4","如为","条件","转换","外部","l1","19","联系","rd","后面","定义","操作员","未找到","用于","因此",",","将","查看","再","86","81","给出","略有不同","cd","表格","+","id","发起","com","44","报文","故障","06","银行卡","、","错","前","]","券","getcompexpirationdate","yq","需要","97","无法","c9","词汇","比如","acr2edc","r3","类型","看","ya","未","被","原始","签购","76","如下","表明","签到","“","bpa","40","请","字段","c4","小票","怀疑","误码","s6","会填","二维码","58","y3","yj","作","h5","5","规则","记","过低","收款","c3","消费","重试","per2edc","详情","送入","00","12","新大陆","密钥","全部","r6","可能","品牌","未能","处理","允许","cth","yd","支持","c6","换卡","提交","机构","详细","63","已","pdf","卡券","code","83","显示","42","getadditionalresdata","20160913","zj","zt","了","标点","隔天","s1","zf","加上","再次","是否","g2","e2","53","输错","确认","违反","应当","compinfoa7","zy","把","秘钥","其他","pvr","区别","z5"," ","规定","扣款","是","b","09","位置","核销","业务","93","至","状态","超出","提升","分为","01","h4","未到","并","此卡券","大","优惠条件","上","异常","zl","交易类型","读取","就","选择","57","yy","s","g5","_","75","相同","或者","s3","只有","用户","脱机","c5","购汇","计划","程序","包含","名单",":","s2","见下文","借贷","有效期","查询","zh","yr","z1","不予","rb","规范","参考","限制","验证","yu","发卡","y2","或太大","yn","原因","印信","取消","zg","s8","已过期","21","时","getcompinfoa2","name","说明","描述","标点符号","额度","trans","03","做","负号","h3","revflag","码表","找","等于","78","一张","绑","采取相应","达到","将会","传统","合法","gettranscode","记录","源","目前","g7","单号","z4","系统故障","最新","费","还是","建议","（","控制","名称","getrevauthcode","重新","xx","效期","4","per","无","10","65","不符","31","67","--","yb","y1","样式","a","预","0","04","样例","－","支付宝","太迟","56","暂无","如果","持卡人","yf","zp","g6","使用","v3","pvc","30","1","次数","合作方","对","受卡方呼","yl","-","登记","自定义","33","受卡方","。","超","符号","中心","response","zd","此","储蓄","h2","失败","采取","方未","e4","config","受限制","大陆","对应","61","c0","服务","限额","收不到","[","管理","内部","码后","有误","设施","此卡","出错","接口","文档","扫码","执行","c2","没有","2i","98","款项","新","固定","pos","64","意义","用","半角","该卡","1s","zs","输入","投资","拒绝","单收","mac","平","机","等","更换","标识","落地","功能","96","yx","部门","不到","compinfoa3","一位","62","营销","cash","单笔","太大","根据","退货","tvd","gettransdate","订单号","违禁","39","pbi","下单","l2","保密","80","g3","一笔","'","域名","y5","拒","此类","打印信息","20160811","进入","isomsg","cb","数据","e1","请求","中文","其他人","3","冲正","校验","刷卡","acr","稍后","一次","信用","z2","审核","openid","\"","码","可以","退回","一致","条码","相应","实施","指引","，","g4","y9","批次","字母","r7","89","卖家","太小","k1","取款","i","渠道","内容","zr","下载","14","0000000000","正在","取值","找到","向","文件","作弊","后台","processflag","ca","为","yg","姓名","gettrans","智能","卡种","先","r8","更新","05","92","分账","联机","只能","降额","收","中间","再作","无卡","7","卡号","非","排版","正常","管理员","compinfoa8","ppc","为空","卡","了解","对账","表示","现金交易","读取数据","提供","compinfoa6","”","pec","85","二维","一个","应用","c7","系统","可重","应答","均","都","以下","22","注","域","或","ra","/",".","zb","交易","捕捉","服务商","必须","41","位","tips","可","被窃","金额","验签","公玥","反馈","优惠","bvd","有效","getcardno","z0","下","ys","需",")","授权","d","自己","终端","代码","几类","我们","各项","安全","表","超时","02","挂失","想要","merchant","55","日期","卡人","查","银联","稍候","重传","太","s9","yz","g9","申请","getbatchnum","zi","每日","中","y7","r5","升级","单日","javadoc","90","s5","合作","和","有关","电话","compinfoa2","时间","yw","黑名","卡请","bve","该","ye","gettransdatetime","预警","超限","单行","37","68","无此","52","66","yv","你","上传","(","markup","错误","单","bpi","h1","新大","36","错误码","通知","过于","zz","空行","收单","不","38","yc","他人","超过","单中","v1","插卡","信用卡","持卡","刷新","发货","界面","pnp","银联卡","model","e0","支付","b1","cardinfolink","transcode","f8","yp","compinfoa4","不可","dcc","部分","不能","pcc","黑名单","新增","格式","收到","现金","getcardbrand","y8","小于","6","最低","汇款","e","储蓄卡","币种","一段","完备","doc","34","rc","段","换","k2","51","y4","c8","改为","路由","手工","略有","达","mm","prc","此时","个","23","最小","原","如","内","指定","余额","足够","签名","字","r4","zu","ppa","特殊","下文","存在","类别","正确","频繁","f1","ccl","y0","yt","15","客户","号","sdk","商户","tag","ttd","凭证","54","当天","h6","同一","在","8583","20","成功","3c","l3","没收","回答","联网","79","getcardtype","getrefnum","新卡","99","买家","后","合规","受限","：","账号","按","13","yh","参与","展示","88","钱包","客服","不平","任何","流程","撤销","重复","金融机构","84","措施","z7","25","ze","金融","调节","出现","信息","j1","g1","如以","存款","r9","订单","下表中","转发","失效","43","要","网络设施","yk","8","z8","getcompinfoa3","顾客","标记","银行","提示","操作","）","k3","a0","返回","支票","59","2","y6","关闭","退款","相关","gettracenum","付款","一定","与","z6","受理","有","ym","字段名","满足","产品","r1","一段时间","s7","edc","软件","ip","c","存根","小费","p","重作","91","无效","z3","或读","码要","段时间","丢失","过期","不同","compinfoa1","c1","直接","不足","嫌疑","94","za","77","防止","子","的","密码","开通","我方","zk","zm","版本","发卡行","95","违法","权限","标志","pmc","bpp","检查","完成","zc","接入","07","账户","网络","进行","gettransamt","r2","签约","商家","pcr","配置","卡片","非接","35","类","门店","文本","尚","备注","方式","zv","zn","m","pin","cc","bth","打印"],"title":"Attachments","title_tokens":["attachments"]},{"location":"attached/attachments/#v320160811","text":"代码 POS显示(计划实施) 00 交易成功 01 \"01-交易失败请联系发卡行\" 02 \"02-交易失败请联系发卡行\" 03 \"03-无效商户请联系客服\" 04 \"04-卡片异常请换卡重试\" 05 \"05-交易失败请联系发卡行\" 06 \"06-交易失败请联系发卡行\" 07 \"07-卡片异常请换卡重试\" 09 \"09-交易失败请重试\" 12 \"12-发卡行不支持的交易\" 13 \"13-无效金额\" 14 \"14-无效卡号请联系发卡行或换卡重试\" 15 \"15-无此发卡行请换卡重试\" 19 \"19-交易失败请重试\" 20 \"20-交易失败请联系发卡行\" 21 \"21-交易失败请联系发卡行\" 22 \"22-操作有误请重试\" 23 \"23-交易失败请联系发卡行\" 25 \"25-未找到原交易请重试或联系客服\" 30 \"30-格式错误请联系客服\" 31 \"31-交易失败请联系客服\" 33 \"33-过期卡请换卡重试\" 34 \"34-卡片异常请联系发卡行\" 35 \"35-卡片异常请联系发卡行\" 36 \"36-卡片异常请联系发卡行\" 37 \"37-卡片异常请联系发卡行\" 38 \"38-密码错误次数超限\" 39 \"39-交易失败请换卡重试\" 40 \"40-不支持的交易类型请联系客服\" 41 \"41-卡片异常请联系发卡行\" 42 \"42-卡片异常请联系发卡行\" 43 \"43-卡片异常请联系发卡行\" 44 \"44-交易失败请联系发卡行\" 45 \"45-请插卡交易或联系客服\" 51 \"51-余额不足\" 52 \"52-交易失败请换卡重试\" 53 \"53-交易失败请换卡重试\" 54 \"54-过期卡请换卡重试\" 55 \"55-密码错误请重试\" 56 \"56-交易失败请换卡重试\" 57 \"57-卡片异常请联系客服或换卡重试\" 58 \"58-未授权的交易请联系客服\" 59 \"59-卡片异常请联系发卡行\" 60 \"60-卡片异常请联系发卡行\" 61 \"61-超出金额限制请联系客服或换卡重试\" 62 \"62-卡片异常请联系发卡行\" 63 \"63-交易失败请联系发卡行\" 64 \"64-交易失败请联系发卡行\" 65 \"65-交易次数超限请联系发卡行\" 66 \"66-交易失败请联系客服\" 67 \"67-卡片异常请联系发卡行\" 68 \"68-交易超时请重试\" 75 \"75-密码错误次数超限\" 76 \"76-交易失败请联系发卡行\" 77 \"77-交易失败请联系客服\" 78 \"78-交易失败请换卡重试\" 79 \"79-脱机交易对账不平请重传数据或联系客服\" 80 \"80-交易失败请联系客服\" 81 \"81-交易失败请联系客服\" 83 \"83-交易失败请联系客服\" 84 \"84-交易失败请联系客服\" 85 \"85-交易失败请联系客服\" 86 \"86-交易失败请联系客服\" 88 \"88-交易失败请联系客服\" 89 \"89-交易失败请联系客服\" 90 \"90-交易失败请稍后重试\" 91 \"91-交易失败请稍后重试\" 92 \"92-交易失败请稍后重试\" 93 \"93-交易失败请联系发卡行\" 94 \"94-交易失败请稍后重试\" 95 \"95-交易失败请稍后重试\" 96 \"96-系统异常请联系客服\" 97 \"97-无效终端请联系客服或检查配置\" 98 \"98-交易超时请重试\" 99 \"99-交易失败请联系客服\" A0 \"A0-请重新签到或联系客服\" B1 \"B1-卡片异常请联系客服或换卡重试\" C0 \"C0-核销失败\" C1 \"C1-卡券已被核销\" C2 \"C2-卡券已过期\" C3 \"C3-无效的卡券\" C4 \"C4-券状态异常\" C5 \"C5-未到卡券使用时间\" C6 \"C6-商户不能使用该卡券\" C7 \"C7-金额太小不可参与优惠\" C8 \"C8-此卡券不能使用此方式进行支付\" C9 \"C9-交易失败，请联系客服\" CA \"CA-付款码与卡券指定支付方式不符\" CB \"CB-卡券订单不存在\" CC \"CC-交易失败请联系客服\" CD \"CD-卡券订单已支付\" L1 \"L1-交易额度超限请联系客服\" L2 \"L2-交易额度超限请联系客服\" L3 \"L3-交易额度超限请联系客服\" RA \"RA-交易失败请联系客服\" RB \"RB-交易失败请联系客服\" RC \"RC-交易失败请联系客服\" RD \"RD-交易失败请联系客服\" Y0 \"Y0-付款码错误或过期，请重试\" Y1 \"Y1-交易失败请联系客服\" Y2 \"Y2-未开通此支付方式，请联系客服\" Y3 \"Y3-订单不存在，请重试\" Y4 \"Y4-未开通此支付方式，请联系客服\" Y5 \"Y5-退款失败，商家账户余额不足\" Y6 \"Y6-退款金额超过原订单金额\" Y7 \"Y7-交易失败请联系客服\" Y8 \"Y8-不支持的交易类型请联系客服\" Y9 \"Y9-订单已关闭或取消\" YA \"YA-交易失败请联系客服\" YB \"YB-交易失败请联系客服\" YC \"YC-交易失败请联系客服\" YD \"YD-交易失败请联系客服\" YE \"YE-该交易类型不能执行此操作\" YF \"YF-该交易类型不能执行此操作\" YG \"YG-原交易已退款\" YH \"YH-只能隔天退款\" YJ \"YJ-不支持的卡类型，请换卡或绑新卡\" YK \"YK-只能撤销当天交易\" YL \"YL-顾客账户状态异常\" YM \"YM-商家账户状态异常\" YN \"YN-付款码与交易渠道不符\" YP \"YP-交易失败请联系客服\" YQ \"YQ-软件版本过低，请升级\" YR \"YR-付款金额小于最低限额\" YS \"YS-交易失败请联系客服\" YT \"YT-姓名校验错误\" YU \"YU-对同一用户操作过于频繁，请稍后重试\" YV \"YV-购汇金额或币种错误\" YW \"YW-额度超限\" YX \"YX-顾客关闭相关功能\" YY \"YY-交易失败请重试\" YZ \"YZ-交易失败请联系客服\" Z0 \"Z0-交易失败请联系客服\" Z1 \"Z1-交易失败请联系客服\" Z2 \"Z2-未授权的交易请联系客服\" Z3 \"Z3-交易失败请联系客服\" Z4 \"Z4-交易失败请联系客服\" Z5 \"Z5-交易失败请联系客服\" Z6 \"Z6-卖家买家账号相同，不能进行交易\" Z7 \"Z7-商户未签约请联系客服\" Z8 \"Z8-交易失败请重试\" Z9 \"Z9-商户未授权请联系客服\" ZA \"ZA-交易失败，请更换支付方式\" ZB \"ZB-交易失败请重试或联系客服\" ZC \"ZC-交易失败请联系客服\" ZD \"ZD-未授权交易请联系客服\" ZE \"ZE-该商户暂无退款权限请联系客服\" ZF \"ZF-交易异常，如有扣款，款项稍后退回\" ZG \"ZG-交易失败，请重试\" ZH \"ZH-交易失败请联系客服\" ZI \"ZI-直接进入扫码流程显示流程界面\" ZJ \"ZJ-直接进入扫码流程显示流程界面\" ZK \"ZK-交易失败请联系客服\" ZL \"ZL-交易失败请联系客服\" ZM \"ZM-买家付款额度超限\" ZN \"ZN-商家收款额度超限\" ZP \"ZP-超出每日限额，请联系客服\" ZQ \"ZQ-提升限额申请正在审核中\" ZR \"ZR-交易失败，请联系客服\" ZS \"ZS-不支持该交易类型，请联系客服\" ZT \"ZT-交易失败请联系客服\" ZU \"ZU-交易失败请联系客服\" ZV \"ZV-未开通此支付方式，请联系客服\" ZY \"ZY-用户取消支付，请重新发起交易\" ZZ \"ZZ-交易失败请联系客服\"","text_tokens":["60","45","zq","z9","l1","19","联系","rd","未找到","86","81","cd","发起","44","06","券","yq","97","c9","类型","ya","未","被","76","签到","40","请","c4","58","y3","yj","过低","收款","c3","重试","00","12","yd","支持","c6","换卡","63","已","卡券","83","显示","42","zj","zt","隔天","zf","53","zy","z5"," ","扣款","09","核销","93","状态","超出","提升","01","未到","此卡券","异常","zl","交易类型","57","yy","75","相同","用户","脱机","c5","购汇","计划","zh","yr","z1","rb","限制","yu","发卡","y2","yn","取消","zg","已过期","21","额度","03","78","绑","z4","重新","65","不符","31","67","yb","y1","04","56","暂无","yf","zp","使用","30","次数","对","yl","-","33","zd","此","失败","61","c0","限额","有误","此卡","扫码","执行","c2","98","款项","pos","64","该卡","zs","更换","功能","96","yx","62","39","l2","80","y5","进入","cb","数据","校验","稍后","z2","审核","\"","码","退回","实施","，","y9","89","卖家","太小","渠道","zr","14","正在","找到","ca","yg","姓名","92","05","只能","卡号","卡","对账","85","c7","系统","22","或","ra","zb","交易","41","金额","优惠","z0","ys",")","授权","终端","代码","超时","02","55","重传","yz","申请","zi","每日","中","y7","升级","90","时间","yw","卡请","该","ye","超限","37","68","无此","52","66","yv","(","错误","36","过于","zz","不","38","yc","超过","插卡","界面","支付","b1","yp","不可","不能","格式","y8","小于","最低","币种","34","rc","51","y4","c8","23","原","如","指定","余额","zu","存在","频繁","y0","yt","15","商户","54","当天","同一","20","成功","l3","79","新卡","99","买家","账号","13","yh","参与","88","客服","不平","流程","撤销","84","z7","25","ze","订单","43","yk","z8","顾客","操作","a0","59","y6","关闭","退款","相关","付款","与","z6","有","ym","软件","91","无效","z3","过期","c1","直接","不足","94","za","77","的","密码","开通","zk","zm","版本","发卡行","95","权限","检查","zc","07","账户","进行","签约","商家","配置","卡片","35","方式","zv","zn","cc"],"title":"交易应答码表V3(20160811更新)","title_tokens":["应答","v3","20160811","(",")","更新","码表","交易"]},{"location":"attached/attachments/#v2pos","text":"注1:银行卡的09和扫码的09有区别 注2:位置应答码展示为 \"XX-交易失败-请联系客服\" 代码 意义 原因/采取的措施 说明 POS显示(计划实施) 00 承兑或交易成功 承兑或交易成功 交易成功 交易成功 01 查发卡行 查发卡行 交易失败-请联系发卡行 01交易失败-请联系客服 02 查发卡行的特殊条件 可电话向发卡行查询 交易失败-请联系发卡行 02交易失败-请联系客服 03 无效商户 商户需要在银行或中心登记 商户未登记 03无效商户-请联系客服 04 没收卡 操作员没收卡 没收卡-请联系收单行 04卡片异常-请联系客服或换卡重试 05 不予承兑 发卡不予承兑 交易失败-请联系发卡行 05交易失败-请联系客服 06 出错 发卡行故障 交易失败-请联系发卡行 06交易失败-请联系客服 07 特殊条件下没收卡 特殊条件下没收卡 没收卡-请联系收单行 07卡片异常-请联系客服或换卡重试 09 请求正在处理中 重新提交交易请求 交易失败-请重试 09请重新操作 12 无效交易 发卡行不支持的交易 交易失败-请联系发卡行 12无效交易-请联系客服 13 无效金额 金额为0 或太大 交易金额超限-请重试 13无效金额-请联系客服 14 无效卡号 卡种未在中心登记或读卡号有误 无效卡号-请联系发卡行 14无效卡号-请联系客服或换卡重试 15 无此发卡行 此发卡行未与中心开通业务 此卡不能受理 15无此发卡行-请联系客服或换卡重试 19 重新送入交易 刷卡读取数据有误-可重新刷卡 交易失败-请联系发卡行 19交易失败-请重试 20 无效应答 无效应答 交易失败-请联系发卡行 20交易失败-请联系客服 21 不做任何处理 不做任何处理 交易失败-请联系发卡行 21交易失败-请联系客服 22 怀疑操作有误 POS状态与中心不符-可重新签到 操作有误-请重试 22操作有误-请重试 23 不可接受的交易费 不可接受的交易费 交易失败-请联系发卡行 23交易失败-请联系客服 25 未能找到文件上记录 发卡行未能找到有关记录 交易失败-请联系发卡行 25无效交易-请联系客服 30 格式错误 格式错误 交易失败-请联系发卡行 30格式错误-请联系客服 31 不支持的银行 此发卡方未与中心开通业务 此卡不能受理 31银行未联网-请联系客服 33 过期的卡 过期的卡-操作员可以没收 过期卡-请联系发卡行 33过期卡-请换卡重试 34 有作弊嫌疑 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 34卡片异常-请换卡重试 35 受卡方与安全保密部门联系 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 35卡片异常--请换卡重试 36 受限制的卡 有作弊嫌疑的卡-操作员可以没收 此卡有误-请换卡重试 36卡片异常--请换卡重试 37 受卡方呼受理方安全保密部门(没收卡) 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 37卡片异常-请换卡重试 38 超过允许的PIN试输入 密码错次数超限-操作员可以没收 密码错误次数超限 38密码错误次数超限 39 无此信用卡账户 可能刷卡操作有误 交易失败-请联系发卡行 39交易失败-请重试 40 请求的功能尚不支持 发卡行不支持的交易类型 交易失败-请联系发卡行 40不支持的交易类型 41 丢失卡 挂失的卡- 操作员可以没收 没收卡-请联系收单行 41卡片异常-请换卡重试 42 无此账户 发卡行找不到此账户 交易失败-请联系发卡方 42卡片异常-请联系客服 43 被窃卡 被窃卡- 操作员可以没收 没收卡-请联系收单行 43卡片异常-请换卡重试 44 无此投资账户 可能刷卡操作有误 交易失败-请联系发卡行 44交易失败-请联系客服或换卡重试 45 请插卡交易 45请插卡交易 51 无足够的存款 账户内余额不足 余额不足-请查询 51余额不足 52 无此支票账户 无此支票账户 交易失败-请联系发卡行 52交易失败-请联系客服 53 无此储蓄卡账户 无此储蓄卡账户 交易失败-请联系发卡行 53交易失败-请联系客服 54 过期的卡 过期的卡 过期卡-请联系发卡行 54过期卡-请换卡重试 55 不正确的PIN 密码输错 密码错-请重试 55密码错误-请重试 56 无此卡记录 发卡行找不到此账户 交易失败-请联系发卡行 56交易失败-请联系客服 57 不允许持卡人进行的交易 不允许持卡人进行的交易 交易失败-请联系发卡行 57未授权的交易-请联系客服 58 不允许终端进行的交易 该商户不允许进行的交易 终端无效-请联系收单行或银联 58未授权的交易-请联系客服 59 有作弊嫌疑 交易失败-请联系发卡行 59交易失败-请联系客服 60 受卡方与安全保密部门联系 交易失败-请联系发卡行 60交易失败-请联系客服 61 超出取款金额限制 一次交易的金额太大 金额太大 61超交易限额-请联系客服或换卡重试 62 受限制的卡 交易失败-请联系发卡行 62卡片异常-请换卡重试 63 违反安全保密规定 违反安全保密规定 交易失败-请联系发卡行 63交易失败-请联系客服 64 原始金额不正确 原始金额不正确 交易失败-请联系发卡行 64原金额错误-请联系客服或重试 65 超出取款次数限制 超出取款次数限制 超出取款次数限制 65超交易次数-请联系客服 66 受卡方呼受理方安全保密部门 受卡方呼受理方安全保密部门 交易失败-请联系收单行或银联 66交易失败-请联系客服 67 捕捉（没收卡） 捕捉（没收卡） 没收卡 67卡片异常-请换卡重试 68 收到的回答太迟 发卡行规定时间内没有回答 交易超时-请重试 68交易超时-请重试 75 允许的输入PIN次数超限 允许的输入PIN次数超限 密码错误次数超限 75密码错误次数超限 76 76交易失败-请联系客服 77 需要向网络中心签到 POS批次与网络中心不一致 请向网络中心签到 77交易失败-请联系客服 78 78交易失败-请联系客服 79 脱机交易对账不平 POS终端上传的脱机数据对账不平 POS终端重传脱机数据 79对账不平-请联系客服 80 80交易失败-请联系客服 81 81交易失败-请联系客服 83 83交易失败-请联系客服 84 84交易失败-请联系客服 85 85交易失败-请联系客服 86 86交易失败-请联系客服 88 88交易失败-请联系客服 89 89交易失败-请联系客服 90 日期切换正在处理 日期切换正在处理 交易失败-请稍后重试 90交易失败-请稍后重试 91 发卡行或收单银行不能操作 电话查询发卡方或收单银行-可重作 交易失败-请稍后重试 91交易失败-请联系客服 92 金融机构或中间网络设施找不到或无法达到 电话查询发卡方或网络中心-可重作 交易失败-请稍后重试 92交易失败-请联系客服 93 交易违法、不能完成 交易违法、不能完成 交易失败-请联系发卡行 93交易失败-请联系客服 94 重复交易 查询网络中心-可重新签到作交易 交易失败-请稍后重试 94重复交易 95 调节控制错 调节控制错 交易失败-请稍后重试 95交易失败-请联系客服 96 系统异常、失效 发卡方或网络中心出现故障 交易失败-请稍后重试 96交易失败-请联系客服 97 POS终端号找不到 终端未在中心或银行登记 终端未登记-请联系收单行或银联 97无效终端-请联系客服或检查配置 98 收不到发卡行应答 收不到发卡行应答 交易超时-请重试 98交易超时-请重试 99 PIN格式错 可重新签到作交易 校验错-请重新签到 99交易失败-请联系客服 A0 MAC校验错 可重新签到作交易 校验错-请重新签到 A0请重新签到或联系客服 C1 卡券已被核销 C1卡券已被核销 C2 卡券已过期 C2卡券已过期 C3 无效的卡券 C3无效的卡券 09 处理中 正常应答-表明该交易需要输入密码-完成后发起查询确认交易状态 09处理中 Y1 商户密钥错误 核实商户交易密钥是否正确 12改为Y1 Y1交易失败-请联系客服 Y0 付款码错误或过期 刷新条码后-重新扫码-发起支付 14改为Y0 Y0付款码错误或过期 ZH 订单号重复 订单号重复-使用新订单号发起交易-建议订单号加上时间防止重复 19改为ZH ZH订单号重复 Y3 订单不存在 该订单系统不存在-不能进行相应操作 25改为Y3 Y3订单不存在 Y4 商户未申请开通此支付方式 查看商户是否提交该渠道申请-如以提交-核实是否有配置路由信息 31改为Y4 Y4不支持此支付方式 Y5 退款失败-商家账户余额不足 建议商家先进行一笔收款-再发起退款 61改为Y5 Y5退款失败-商家账户余额不足 Y6 退款金额超过原订单金额 退款金额需要小于等于可退款金额 64改为Y6 Y6退款金额超过原订单金额 Y7 外部系统错误 具体描述可返回渠道中文描述字段 91改为Y7 Y7交易失败-请联系客服 Y2 商户无此交易渠道权限 H1改为Y2 Y2未授权的交易 Y8 商户无此接口权限 核实该商户是否配置了该接口权限 H2改为Y8 Y8交易失败-请联系客服 Y9 订单已关闭或取消 订单已关闭或取消-不能进行相应操作 H3改为Y9 Y9订单已关闭或取消 YA [字段名]不能为空 检查出错字段 H4改为YA YA交易失败-请联系客服 YB [字段名]格式错误 检查出错字段 H5改为YB YB交易失败-请联系客服 YC 交易状态不合法 检查交易状态是否正常 H6改为YC YC交易失败-请联系客服 YD 交易信息中包含违禁词汇 检查交易信息中是否包含违禁词汇 H7改为YD YD交易失败-请联系客服 YE 原交易非支付交易 原交易非支付交易-不能执行此类操作 R1改为YE YE原交易非支付交易 YF 原交易未成功支付 原交易未成功支付-部分交易不能执行 R2改为YF YF原交易未成功支付 YG 原交易已退款 R3改为YG YG原交易已退款 YH 只能隔天退款 R4改为YH YH只能隔天退款 YJ 不支持的卡类型-请换卡或绑新卡 R5改为YJ YJ不支持的卡类型-请换卡或绑新卡 YK 只能撤销当天交易 R6改为YK YK只能撤销当天交易 YL 顾客账户状态异常 R7改为YL YL顾客账户状态异常 YM 商家账户状态异常 R8改为YM YM商家账户状态异常 YN 付款码与交易渠道不符 R9改为YN YN付款码与交易渠道不符 YP 分账信息不正确 S1改为YP YP交易失败-请联系客服 YQ 软件版本过低-请升级 S2改为YQ YQ软件版本过低-请升级 YR 付款金额小于最低限额 S3改为YR YR付款金额小于最低限额 YS Openid错误 S4改为YS YS交易失败-请联系客服 YT 姓名校验错误 S5改为YT YT姓名校验错误 YU 对同一用户操作过于频繁-请稍候重试 S6改为YU YU对同一用户操作过于频繁-请稍候重试 YV 购汇金额或币种错误 S7改为YV YV购汇金额或币种错误 YW 额度超限 S8改为YW YW额度超限 YX 顾客关闭相关功能 S9改为YX YX顾客关闭相关功能 YY 授权码code错误 J1改为YY YY交易失败-请联系客服 YZ 渠道商户秘钥未配置或配置错误 YZ交易失败-请联系客服 C0 核销失败 C0核销失败 C4 券状态异常 C4券状态异常 C5 未到卡券使用时间 请在卡券有效期内使用 C5未到卡券使用时间 C6 商户不能使用该卡券 C6商户不能使用该卡券 C7 金额达不到满足优惠条件的最小金额 C7金额太小-不可参与优惠 C8 此卡券不能使用此方式进行支付 请使用卡券指定的支付方式 C8此卡券不能使用此方式进行支付 Z0 渠道商户信息有误 检查系统渠道商户配置和渠道是否一致-或者看渠道商户具体应答 E0改为Z0 Z0交易失败-请联系客服 Z1 渠道受理机构信息配置有误 检查与渠道给出信息是否一致-或者看具体应答错误码 E1改为Z1 Z1交易失败-请联系客服 Z2 渠道不支持该业务 如不支持部分退款等 E2改为Z2 Z2未授权的交易-请联系客服 Z3 接入渠道IP验证异常 看渠道方是否有将我方IP配置 99改为Z3 Z3交易失败-请联系客服 Z4 门店状态异常 门店状态被改为异常状态 G1改为Z4 Z4交易失败-请联系客服 Z5 渠道商户状态异常 渠道商户状态被改为异常状态 G2改为Z5 Z5交易失败-请联系客服 Z6 卖家买家账号相同-不能进行交易 通知商户不能用自己账户进行交易-一定要使用其他人账户 G3改为Z6 Z6账号有误-请联系客服 Z7 没有签约扫码支付接口或签约失效 通知商户进行签约 G4改为Z7 Z7未授权的交易-请联系客服 Z8 支付失败-请顾客刷新付款码后重新收款-如再次收款失败-请联系管理员处理 重新扫码收款 G5改为Z8 Z8交易失败-请重试 Z9 未进行应用授权或授权已过期 通知商户重新进行授权操作 G6改为Z9 Z9未授权的交易-请联系客服 ZA 该银行卡已失效-请联系发卡行了解详情-或更换其他支付方式 更换其他支付方式-比如换一张卡或使用钱包余额支付 G7改为ZA ZA交易失败-请更换支付方式 ZB 内部系统操作超时 请重试交易 G9改为ZB ZB交易失败-请联系客服 ZC 渠道验签错误 请至支付宝后台上传公玥 K1改为ZC ZC交易失败-请联系客服 ZD 商户未签约该产品-请按流程完成签约 请按流程完成签约并确认签约成功 K2改为ZD ZD未授权交易-请联系客服 ZE 商户需授权服务商退款接口权限 请服务商按照指引流程-完成授权 K3改为ZE ZE未授权交易-请联系客服 ZF 交易失败-如顾客反馈扣款成功-款项将会在一段时间后退回 不进行发货处理-重新进行一笔收款 F1改为ZF ZF交易失败-请联系客服 ZG 交易失败-请重新发起交易 F8改为ZG ZG交易失败-请重试 E1 程序异常 E1交易失败-请联系客服 E2 配置错误 E2交易失败-请联系客服 E4 E4交易失败-请联系客服 L1 机构额度超限 L1交易失败-请联系客服 L2 商户额度单笔超限 L2交易失败-请联系客服 L3 商户额度单日超限 B1 卡片黑名单 B1交易失败-请联系客服 RA 规则预警 RA交易失败-请联系客服 RB 预警联机拒交易 RB交易失败-请联系客服 RC 预警降额拒交易类P RC交易失败-请联系客服 RD 预警降额拒交易类A RD交易失败-请联系客服","text_tokens":["方","按照","承兑","核实","h7","具体","切换","60","未登记","试","接受","45","z9","s4","条件","外部","l1","19","联系","rd","操作员","将","查看","再","86","81","给出","发起","44","故障","06","银行卡","、","错","]","券","yq","需要","97","无法","词汇","比如","r3","类型","看","ya","未","被","原始","76","表明","签到","40","请","字段","c4","怀疑","误码","s6","58","y3","作","h5","yj","规则","过低","收款","c3","重试","详情","送入","00","12","密钥","r6","可能","未能","处理","允许","yd","支持","c6","换卡","提交","机构","63","已","卡券","code","83","显示","42","了","隔天","s1","加上","再次","zf","是否","g2","e2","53","输错","确认","违反","秘钥","其他","区别","z5"," ","规定","扣款","09","位置","业务","核销","93","至","状态","超出","01","h4","未到","并","大","优惠条件","此卡券","上","异常","交易类型","读取","57","yy","g5","75","或者","相同","s3","用户","脱机","c5","购汇","计划","程序","包含","名单",":","s2","有效期","查询","zh","yr","z1","不予","rb","限制","验证","yu","发卡","或太大","y2","yn","原因","取消","zg","s8","已过期","21","说明","描述","额度","03","做","h3","找","等于","78","一张","绑","达到","将会","合法","记录","g7","单号","z4","费","建议","（","控制","重新","xx","效期","无","65","不符","31","67","--","yb","y1","a","0","04","支付宝","太迟","56","持卡人","yf","g6","使用","30","1","次数","对","受卡方呼","yl","-","登记","33","受卡方","超","中心","zd","此","储蓄","h2","失败","采取","方未","e4","受限制","61","c0","服务","限额","收不到","[","管理","内部","码后","有误","设施","接口","出错","此卡","扫码","执行","c2","没有","98","新","款项","意义","pos","64","用","该卡","投资","输入","mac","等","更换","功能","96","yx","部门","不到","62","单笔","太大","订单号","违禁","39","保密","l2","80","g3","一笔","y5","拒","此类","数据","e1","请求","中文","其他人","校验","刷卡","稍后","一次","信用","z2","openid","\"","可以","码","一致","条码","相应","指引","实施","退回","g4","y9","批次","r7","89","卖家","太小","k1","取款","渠道","14","正在","找到","向","文件","作弊","后台","为","yg","姓名","卡种","先","r8","92","05","分账","联机","只能","降额","收","中间","卡号","非","正常","管理员","为空","卡","了解","对账","读取数据","85","应用","c7","系统","应答","注","22","或","ra","/","交易","捕捉","zb","服务商","41","可","被窃","金额","验签","公玥","反馈","优惠","有效","z0","下","ys","需",")","授权","自己","终端","代码","安全","超时","02","挂失","55","日期","卡人","查","银联","稍候","太","重传","s9","yz","g9","申请","单日","中","y7","r5","升级","90","s5","和","有关","电话","时间","yw","黑名","该","ye","预警","超限","单行","37","68","无此","52","66","yv","上传","(","错误","h1","36","错误码","通知","过于","收单","不","38","yc","他人","超过","插卡","信用卡","持卡","刷新","发货","e0","支付","b1","f8","yp","不可","部分","不能","黑名单","格式","收到","y8","小于","最低","储蓄卡","币种","一段","34","换","段","rc","k2","51","y4","c8","改为","路由","达","23","最小","原","如","内","指定","余额","足够","字","r4","特殊","存在","正确","频繁","y0","yt","15","号","商户","54","h6","当天","同一","在","20","成功","l3","没收","回答","联网","79","新卡","99","买家","后","受限","账号","按","13","yh","参与","展示","88","钱包","客服","不平","任何","流程","撤销","重复","金融机构","措施","84","调节","25","金融","出现","信息","j1","z7","g1","ze","如以","存款","r9","订单","失效","43","要","网络设施","yk","z8","顾客","银行","操作","）","k3","a0","返回","支票","59","2","y6","关闭","退款","相关","付款","一定","与","受理","z6","有","ym","字段名","满足","产品","r1","一段时间","s7","软件","ip","p","重作","91","无效","z3","或读","段时间","丢失","过期","c1","嫌疑","不足","94","防止","77","za","的","密码","开通","我方","违法","发卡行","95","版本","权限","检查","完成","接入","zc","07","账户","网络","进行","r2","签约","商家","配置","卡片","35","类","门店","尚","方式","pin","f1"],"title":"交易应答码表V2(智能POS)","title_tokens":["智能","应答","pos","(",")","码表","v2","交易"]},{"location":"attached/attachments/#v1pos","text":"交易返回合作方时都有 39 域，合作方和终端需根据应答码要采取相应的操作，可以把操作分为以下几类: A:交易成功 B:交易失败, 可重试 C:交易失败, 不需要重试 D:交易失败, 终端操作员处理 E:交易失败, 系统故障, 不需要重试 注 1: 如果 39 域的内容不能在下表中找到，就显示“交易失败” 注 2: 如果POS交易的批次号和网络中心批次号不一致时应答码会填 “77”，此时POS机应当提示操作员重新签到， 再作交易。 代码 意义 类别 原因/采取的措施 说明 00 承兑或交易成功 A 承兑或交易成功 交易成功 01 查发卡行 C 查发卡行 交易失败，请联系发卡行 02 查发卡行的特殊条件 C 可电话向发卡行查询 交易失败，请联系发卡行 03 无效商户 C 商户需要在银行或中心登记 商户未登记 04 没收卡 D 操作员没收卡 没收卡，请联系收单行 05 不予承兑 C 发卡不予承兑 交易失败，请联系发卡行 06 出错 E 发卡行故障 交易失败，请联系发卡行 07 特殊条件下没收卡 D 特殊条件下没收卡 没收卡，请联系收单行 09 请求正在处理中 B 重新提交交易请求 交易失败，请重试 12 无效交易 C 发卡行不支持的交易 交易失败，请联系发卡行 13 无效金额 B 金额为 0 或太大 交易金额超限，请重试 14 无效卡号 B 卡种未在中心登记或读卡号有误 无效卡号，请联系发卡行 15 无此发卡行 C 此发卡行未与中心开通业务 此卡不能受理 19 重新送入交易 C 刷卡读取数据有误，可重新刷卡 交易失败，请联系发卡行 20 无效应答 C 无效应答 交易失败，请联系发卡行 21 不做任何处理 C 不做任何处理 交易失败，请联系发卡行 22 怀疑操作有误 C POS 状态与中心不符，可重新签到 操作有误，请重试 23 不可接受的交易费 C 不可接受的交易费 交易失败，请联系发卡行 25 未能找到文件上记录 C 发卡行未能找到有关记录 交易失败，请联系发卡行 30 格式错误 C 格式错误 交易失败，请联系发卡行 31 不支持的银行 C 此发卡方未与中心开通业务 此卡不能受理 33 过期的卡 D 过期的卡，操作员可以没收 过期卡，请联系发卡行 34 有作弊嫌疑 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 35 受卡方与安全保密部门联系 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 36 受限制的卡 D 有作弊嫌疑的卡，操作员可以没收 此卡有误，请换卡重试 37 受卡方呼受理方安全保密部门(没收卡) D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 38 超过允许的 PIN 试输入 D 密码错次数超限，操作员可以没收 密码错误次数超限 39 无此信用卡账户 C 可能刷卡操作有误 交易失败，请联系发卡行 40 请求的功能尚不支持 C 发卡行不支持的交易类型 交易失败，请联系发卡行 41 丢失卡 D 挂失的卡，操作员可以没收 没收卡，请联系收单行 42 无此账户 B 发卡行找不到此账户 交易失败，请联系发卡方 43 被窃卡 D 被窃卡， 操作员可以没收 没收卡，请联系收单行 44 无此投资账户 C 可能刷卡操作有误 交易失败，请联系发卡行 51 无足够的存款 C 账户内余额不足 余额不足，请查询 52 无此支票账户 C 无此支票账户 交易失败，请联系发卡行 53 无此储蓄卡账户 C 无此储蓄卡账户 交易失败，请联系发卡行 54 过期的卡 C 过期的卡 过期卡，请联系发卡行 55 不正确的 PIN C 密码输错 密码错，请重试 56 无此卡记录 C 发卡行找不到此账户 交易失败，请联系发卡行 57 不允许持卡人进行的交易 C 不允许持卡人进行的交易 交易失败，请联系发卡行 58 不允许终端进行的交易 C 该商户不允许进行的交易 终端无效，请联系收单行或银联 59 有作弊嫌疑 C 交易失败，请联系发卡行 60 受卡方与安全保密部门联系 C 交易失败，请联系发卡行 61 超出取款金额限制 C 一次交易的金额太大 金额太大 62 受限制的卡 C 交易失败，请联系发卡行 63 违反安全保密规定 C 违反安全保密规定 交易失败，请联系发卡行 64 原始金额不正确 C 原始金额不正确 交易失败，请联系发卡行 65 超出取款次数限制 C 超出取款次数限制 超出取款次数限制 66 受卡方呼受理方安全保密部门 C 受卡方呼受理方安全保密部门 交易失败，请联系收单行或银联 67 捕捉(没收卡) C 捕捉(没收卡) 没收卡 68 收到的回答太迟 C 发卡行规定时间内没有回答 交易超时，请重试 75 允许的输入 PIN 次数超限 C 允许的输入 PIN 次数超限 密码错误次数超限 77 需要向网络中心签到 D POS 批次与网络中心不一致 请向网络中心签到 79 脱机交易对账不平 C POS 终端上传的脱机数据对账不 平 POS 终端重传脱机数据 90 日期切换正在处理 C 日期切换正在处理 交易失败，请稍后重试 91 发卡行或收单银行不能操作 C 电话查询发卡方或收单银行，可重作 交易失败，请稍后重试 92 金融机构或中间网络设施无法达到 C 电话查询发卡方或网络中心，可重 作 交易失败，请稍后重试 93 交易违法、不能完成 C 交易违法、不能完成 交易失败，请联系发卡行 94 重复交易 C 查询网络中心，可重新签到作交易 交易失败，请稍后重试 95 调节控制错 C 调节控制错 交易失败，请稍后重试 96 系统异常、失效 C 发卡方或网络中心出现故障 交易失败，请稍后重试 97 POS 终端号找不到 D 终端未在中心或银行登记 终端未登记，请联系收单行或银联 98 收不到发卡行应答 E 收不到发卡行应答 交易超时，请重试 99 PIN 格式错 B 可重新签到作交易 校验错，请重新签到 A0 MAC 校验错 B 可重新签到作交易 校验错，请重新签到 C1 卡券已被核销 C C2 卡券已过期 C C3 无效的卡券 C","text_tokens":["方","承兑","切换","60","未登记","试","接受","条件","19","联系","操作员",",","44","故障","06","、","错","需要","无法","97","类型","未","被","原始","签到","“","40","请","怀疑","会填","58","作","c3","重试","送入","00","12","可能","未能","处理","允许","支持","提交","换卡","机构","63","已","卡券","显示","42","53","输错","违反","应当","把"," ","规定","b","09","业务","核销","93","状态","分为","超出","01","大","上","异常","交易类型","读取","就","57","75","脱机",":","查询","不予","限制","发卡","或太大","原因","已过期","21","时","说明","03","做","找","采取相应","达到","记录","系统故障","费","控制","重新","无","65","不符","31","67","a","0","04","太迟","56","如果","持卡人","30","1","合作方","次数","受卡方呼","登记","33","受卡方","。","中心","此","储蓄","失败","采取","方未","受限制","61","收不到","有误","设施","出错","c2","没有","98","pos","意义","64","投资","输入","mac","平","机","功能","96","部门","不到","62","根据","太大","39","保密","数据","请求","校验","刷卡","稍后","一次","信用","可以","码","一致","相应","，","批次","取款","内容","14","正在","找到","向","文件","作弊","为","卡种","92","05","再作","收","中间","卡号","卡","对账","读取数据","”","可重","系统","应答","都","以下","域","注","22","或","/","交易","捕捉","41","可","被窃","金额","下","需",")","d","终端","代码","几类","安全","超时","02","挂失","55","日期","卡人","查","银联","太","重传","中","90","合作","和","有关","电话","时间","该","超限","单行","37","68","无此","52","66","上传","(","错误","36","收单","不","38","超过","信用卡","持卡","不可","不能","格式","收到","e","储蓄卡","34","51","此时","23","内","余额","足够","特殊","类别","正确","15","号","商户","54","在","20","成功","没收","回答","79","99","受限","13","不平","任何","重复","金融机构","措施","调节","出现","25","金融","存款","下表中","失效","43","网络设施","银行","提示","操作","a0","返回","支票","59","2","与","受理","有","c","重作","91","无效","或读","码要","丢失","过期","c1","嫌疑","不足","94","77","的","密码","开通","违法","发卡行","95","完成","07","网络","账户","进行","35","尚","pin"],"title":"交易应答码表V1(传统POS)","title_tokens":["应答","pos","传统","(",")","码表","v1","交易"]},{"location":"attached/attachments/#_1","text":"processflag取值如下，用于标记处理成功还是失败。 代码 意义 说明 0 成功 1 受理方拒绝 2 转发方失败 3 渠道拒绝 扫码交易，查询失败后超时选择该状态，表示该笔09应答码交易是失败交易 4 超时 5 处理中 6 落地","text_tokens":["方","失败","标记","4","，","成功","处理","代码","该笔","说明","2","应答","选择","超时","渠道","0","扫码","取值","后","processflag","受理","交易","如下","中","查询","意义","用于","1","拒绝","3","该","5","还是","。"," ","转发","6","是","表示","09","落地","状态","码"],"title":"交易处理标志","title_tokens":["交易","处理","标志"]},{"location":"attached/attachments/#_2","text":"revflag取值如下，用于标记源交易。 代码 意义 说明 0 正常 1 冲正 2 撤销 3 退货 4 汇款 5 完成 6 手工退货 7 手工完成 8 手工撤销","text_tokens":["标记","4","，","代码","说明","2","退货","手工","0","取值","revflag","完成","交易","如下","意义","撤销","用于","1","源","7","3","冲正","5","。","正常"," ","6","汇款","8"],"title":"交易冲正标志","title_tokens":["交易","冲正","标志"]},{"location":"attached/attachments/#_3","text":"小票（签购单）样例，银行卡类小票和扫码类小票： 其他说明 签购单中，可以有空行 交易金额显示，如为退货或撤销，均在金额前显示负号 卡号后面的一位字母，刷卡方式，取值：S（刷卡）、I(插卡)、M（无卡）、C（非接） 卡号后面的3位字母，卡品牌CUP 原凭证号：只有撤销或退货时显示 TAG：8583规范中的子域名，必须打印 各项内容必须完备，排版可以略有不同 标点符号全部为半角 银联卡消费打印的签购单中，必须要显示的内容： 内容 字段取值 备注 商户/持卡人/银行存根 固定文本 客户ID 0000000000 目前为10个0 商户名称 Config.IsoMsg.MERCHANT_NAME 商户号 response.getTrans().getCompInfoA2() 终端号 response.getTrans().getCompInfoA3() 卡号 response.getTrans().getCardNo() + response.getTrans().getCardType() + response.getTrans().getCardBrand() 卡号 + 刷卡方式(1S 2I 3C) + 卡品牌 有效期 response.getTrans().getCompExpirationDate() 需格式转换 MM/YY （为空不打印） 收单行 response.getTrans().compInfoA1() 发卡行 response.getTrans().getAdditionalResData() 交易类型 response.getTrans().getTransCode() 需转换，见下文'交易类型码表' 授权码 response.getTrans().getRevAuthCode() 批次号 response.getTrans().getBatchNum() 凭证号 response.getTrans().getTraceNum() 日期时间 response.getTrans().getTransDate() + response.getTrans().getTransDatetime() 需格式转换 参考号 response.getTrans().getRefNum() 交易金额 response.getTrans().getTransAmt() 小费（Tips） 签名 备注 版本 TAG","text_tokens":["，","完备","时","段","字母","批次","getcompinfoa2","name","说明","标点符号","cup","i","略有","mm","内容","个","负号","如为","0000000000","转换","取值","原","码表","为","gettrans","后面","字","签名","getcardbrand","gettranscode","目前","收","无卡","下文","略有不同","卡号","排版","+","客户","号","id","商户","tag","为空","卡","凭证","（","银行卡","、","名称","getrevauthcode","前","在","8583","效期","3c","getcompexpirationdate","10","getcardtype","类型","均","getrefnum","样例","0","或","：","/",".","签购","交易","持卡人","必须","位","tips","金额","撤销","小票","符号","response","要","消费","getcardno","有效","getcompinfoa3","config","全部","需","银行","品牌",")","授权","）","终端","各项","merchant","扫码","gettracenum","日期","卡人","显示","银联","getadditionalresdata","有","2i","标点","getbatchnum","中","固定","半角","1s","和","码","c","存根","时间","小费","其他"," ","gettransdatetime","单行","一位","不同","compinfoa1","(","单","子","交易类型","的","退货","gettransdate","s","yy","_","空行","只有","单中","不","发卡行","'","域名","版本","插卡","持卡","gettransamt","见下文","银联卡","有效期","规范","非接","参考","isomsg","类","文本","3","格式","备注","刷卡","发卡","方式","m","可以","打印"],"title":"签购单规范","title_tokens":["单","规范","签购"]},{"location":"attached/attachments/#_4","text":"transCode 意义 小票打印 PER 消费 PBI 余额查询 PEC 消费冲正 PVR 撤销 PVC 消费撤销冲正 CTH 退货 PPA 预授权 PNP 预授权撤销 ACR 预授权完成 PCR 预授权完成撤销 PPC 预授权冲正 PMC 预授权撤销冲正 PCC 预授权完成冲正 PRC 预授权完成撤销冲正 BPA 条码支付下单 BPP 条码支付预下单 BVD 条码支付撤销 BTH 条码支付退货 BVE 条码支付取消 BPI 条码支付查询 PER2EDC PER类交易DCC－EDC交易 ACR2EDC ACR类交易DCC－EDC交易 TTD 小费 TVD 小费撤销 CASH 现金交易 CCL 现金撤销","text_tokens":["条码","pec","per","授权","cth","cash","acr2edc","退货","bpi","tvd","下单","pbi","prc","预","bpp","pmc","－","完成","交易","pnp","bpa","余额","查询","支付","意义","transcode","撤销","pvc","小票","ppa","pcr","edc","dcc","类","pcc","小费","bve","ccl","冲正","pvr","现金"," ","acr","ppc","bvd","per2edc","消费","ttd","现金交易","取消","bth","打印"],"title":"交易类型码表","title_tokens":["交易","码表","类型","交易类型"]},{"location":"attached/attachments/#-","text":"如果你想要自定义小票的样式，可以参考 新大陆 提供的打印文档，点击 新大陆-打印规范.doc 可以下载。","text_tokens":["你","，","大陆","doc","点击","的","自定","想要","新大","样式","文档","下载","如果",".","定义","小票","规范","参考","-","自定义","。"," ","提供","新大陆","可以","打印"],"title":"新大陆-打印规范","title_tokens":["大陆","规范","-","新大陆","新大","打印"]},{"location":"attached/attachments/#_5","text":"按照银联最新规范，终端展示/打印信息需要根据8583报文中57域信息。因此，SDK中Trans新增部分字段 字段名 意义 compInfoA1 签购单收单行 compInfoA2 签购单商户号 compInfoA3 签购单终端号 compInfoA4 markup compInfoA6 借贷记标识 compInfoA7 营销信息 compInfoA8 二维码信息 详细字段信息可查看 javadoc 中com.cardinfolink.pos.sdk.model.Trans信息","text_tokens":["compinfoa1","按照","8583","，","二维","markup","营销","需要","终端","段","compinfoa6","单","根据","详细","57","trans","域","银联","/",".","签购","javadoc","展示","model","中","借贷","字段","字","打印信息","可","意义","cardinfolink","字段名","pos","因此","规范","compinfoa4","compinfoa7","compinfoa2","部分","二维码","单收","信息","查看","新增","最新","sdk","。","号","记"," ","商户","标识","compinfoa8","com","印信","报文","单行","compinfoa3","打印"],"title":"终端相应合规信息取值","title_tokens":["相应","终端","合规","取值","信息"]},{"location":"attached/attachments/#_6","text":"我们提供了币种和代码对应的一个表格的 PDF 文档，点击 币种代码表20160913.pdf 可以下载。","text_tokens":["对应","币种","，","一个","点击","代码","我们","表","的","pdf","文档","下载","20160913",".","了","和","表格","。"," ","提供","可以"],"title":"币种代码对应表","title_tokens":["代码","对应","币种","表"]},{"location":"attached/fenghuAnserCode/","text":"交易应答码表V2(智能POS) 注1:银行卡的09和扫码的09有区别 注2:位置应答码展示为 \"XX-交易失败-请联系客服\" 代码 意义 原因/采取的措施 说明 POS显示(计划实施) 00 承兑或交易成功 承兑或交易成功 交易成功 交易成功 01 查发卡行 查发卡行 交易失败-请联系发卡行 01交易失败-请联系客服 02 查发卡行的特殊条件 可电话向发卡行查询 交易失败-请联系发卡行 02交易失败-请联系客服 03 无效商户 商户需要在银行或中心登记 商户未登记 03无效商户-请联系客服 04 没收卡 操作员没收卡 没收卡-请联系收单行 04卡片异常-请联系客服或换卡重试 05 不予承兑 发卡不予承兑 交易失败-请联系发卡行 05交易失败-请联系客服 06 出错 发卡行故障 交易失败-请联系发卡行 06交易失败-请联系客服 07 特殊条件下没收卡 特殊条件下没收卡 没收卡-请联系收单行 07卡片异常-请联系客服或换卡重试 09 请求正在处理中 重新提交交易请求 交易失败-请重试 09请重新操作 12 无效交易 发卡行不支持的交易 交易失败-请联系发卡行 12无效交易-请联系客服 13 无效金额 金额为0 或太大 交易金额超限-请重试 13无效金额-请联系客服 14 无效卡号 卡种未在中心登记或读卡号有误 无效卡号-请联系发卡行 14无效卡号-请联系客服或换卡重试 15 无此发卡行 此发卡行未与中心开通业务 此卡不能受理 15无此发卡行-请联系客服或换卡重试 19 重新送入交易 刷卡读取数据有误-可重新刷卡 交易失败-请联系发卡行 19交易失败-请重试 20 无效应答 无效应答 交易失败-请联系发卡行 20交易失败-请联系客服 21 不做任何处理 不做任何处理 交易失败-请联系发卡行 21交易失败-请联系客服 22 怀疑操作有误 POS状态与中心不符-可重新签到 操作有误-请重试 22操作有误-请重试 23 不可接受的交易费 不可接受的交易费 交易失败-请联系发卡行 23交易失败-请联系客服 25 未能找到文件上记录 发卡行未能找到有关记录 交易失败-请联系发卡行 25无效交易-请联系客服 30 格式错误 格式错误 交易失败-请联系发卡行 30格式错误-请联系客服 31 不支持的银行 此发卡方未与中心开通业务 此卡不能受理 31银行未联网-请联系客服 33 过期的卡 过期的卡-操作员可以没收 过期卡-请联系发卡行 33过期卡-请换卡重试 34 有作弊嫌疑 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 34卡片异常-请换卡重试 35 受卡方与安全保密部门联系 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 35卡片异常--请换卡重试 36 受限制的卡 有作弊嫌疑的卡-操作员可以没收 此卡有误-请换卡重试 36卡片异常--请换卡重试 37 受卡方呼受理方安全保密部门(没收卡) 有作弊嫌疑的卡-操作员可以没收 没收卡-请联系收单行 37卡片异常-请换卡重试 38 超过允许的PIN试输入 密码错次数超限-操作员可以没收 密码错误次数超限 38密码错误次数超限 39 无此信用卡账户 可能刷卡操作有误 交易失败-请联系发卡行 39交易失败-请重试 40 请求的功能尚不支持 发卡行不支持的交易类型 交易失败-请联系发卡行 40不支持的交易类型 41 丢失卡 挂失的卡- 操作员可以没收 没收卡-请联系收单行 41卡片异常-请换卡重试 42 无此账户 发卡行找不到此账户 交易失败-请联系发卡方 42卡片异常-请联系客服 43 被窃卡 被窃卡- 操作员可以没收 没收卡-请联系收单行 43卡片异常-请换卡重试 44 无此投资账户 可能刷卡操作有误 交易失败-请联系发卡行 44交易失败-请联系客服或换卡重试 45 请插卡交易 45请插卡交易 51 无足够的存款 账户内余额不足 余额不足-请查询 51余额不足 52 无此支票账户 无此支票账户 交易失败-请联系发卡行 52交易失败-请联系客服 53 无此储蓄卡账户 无此储蓄卡账户 交易失败-请联系发卡行 53交易失败-请联系客服 54 过期的卡 过期的卡 过期卡-请联系发卡行 54过期卡-请换卡重试 55 不正确的PIN 密码输错 密码错-请重试 55密码错误-请重试 56 无此卡记录 发卡行找不到此账户 交易失败-请联系发卡行 56交易失败-请联系客服 57 不允许持卡人进行的交易 不允许持卡人进行的交易 交易失败-请联系发卡行 57未授权的交易-请联系客服 58 不允许终端进行的交易 该商户不允许进行的交易 终端无效-请联系收单行或银联 58未授权的交易-请联系客服 59 有作弊嫌疑 交易失败-请联系发卡行 59交易失败-请联系客服 60 受卡方与安全保密部门联系 交易失败-请联系发卡行 60交易失败-请联系客服 61 超出取款金额限制 一次交易的金额太大 金额太大 61超交易限额-请联系客服或换卡重试 62 受限制的卡 交易失败-请联系发卡行 62卡片异常-请换卡重试 63 违反安全保密规定 违反安全保密规定 交易失败-请联系发卡行 63交易失败-请联系客服 64 原始金额不正确 原始金额不正确 交易失败-请联系发卡行 64原金额错误-请联系客服或重试 65 超出取款次数限制 超出取款次数限制 超出取款次数限制 65超交易次数-请联系客服 66 受卡方呼受理方安全保密部门 受卡方呼受理方安全保密部门 交易失败-请联系收单行或银联 66交易失败-请联系客服 67 捕捉（没收卡） 捕捉（没收卡） 没收卡 67卡片异常-请换卡重试 68 收到的回答太迟 发卡行规定时间内没有回答 交易超时-请重试 68交易超时-请重试 75 允许的输入PIN次数超限 允许的输入PIN次数超限 密码错误次数超限 75密码错误次数超限 76 76交易失败-请联系客服 77 需要向网络中心签到 POS批次与网络中心不一致 请向网络中心签到 77交易失败-请联系客服 78 78交易失败-请联系客服 79 脱机交易对账不平 POS终端上传的脱机数据对账不平 POS终端重传脱机数据 79对账不平-请联系客服 80 80交易失败-请联系客服 81 81交易失败-请联系客服 83 83交易失败-请联系客服 84 84交易失败-请联系客服 85 85交易失败-请联系客服 86 86交易失败-请联系客服 88 88交易失败-请联系客服 89 89交易失败-请联系客服 90 日期切换正在处理 日期切换正在处理 交易失败-请稍后重试 90交易失败-请稍后重试 91 发卡行或收单银行不能操作 电话查询发卡方或收单银行-可重作 交易失败-请稍后重试 91交易失败-请联系客服 92 金融机构或中间网络设施找不到或无法达到 电话查询发卡方或网络中心-可重作 交易失败-请稍后重试 92交易失败-请联系客服 93 交易违法、不能完成 交易违法、不能完成 交易失败-请联系发卡行 93交易失败-请联系客服 94 重复交易 查询网络中心-可重新签到作交易 交易失败-请稍后重试 94重复交易 95 调节控制错 调节控制错 交易失败-请稍后重试 95交易失败-请联系客服 96 系统异常、失效 发卡方或网络中心出现故障 交易失败-请稍后重试 96交易失败-请联系客服 97 POS终端号找不到 终端未在中心或银行登记 终端未登记-请联系收单行或银联 97无效终端-请联系客服或检查配置 98 收不到发卡行应答 收不到发卡行应答 交易超时-请重试 98交易超时-请重试 99 PIN格式错 可重新签到作交易 校验错-请重新签到 99交易失败-请联系客服 A0 MAC校验错 可重新签到作交易 校验错-请重新签到 A0请重新签到或联系客服 C1 卡券已被核销 C1卡券已被核销 C2 卡券已过期 C2卡券已过期 C3 无效的卡券 C3无效的卡券 09 处理中 正常应答-表明该交易需要输入密码-完成后发起查询确认交易状态 09处理中 Y1 商户密钥错误 核实商户交易密钥是否正确 12改为Y1 Y1交易失败-请联系客服 Y0 付款码错误或过期 刷新条码后-重新扫码-发起支付 14改为Y0 Y0付款码错误或过期 ZH 订单号重复 订单号重复-使用新订单号发起交易-建议订单号加上时间防止重复 19改为ZH ZH订单号重复 Y3 订单不存在 该订单系统不存在-不能进行相应操作 25改为Y3 Y3订单不存在 Y4 商户未申请开通此支付方式 查看商户是否提交该渠道申请-如以提交-核实是否有配置路由信息 31改为Y4 Y4不支持此支付方式 Y5 退款失败-商家账户余额不足 建议商家先进行一笔收款-再发起退款 61改为Y5 Y5退款失败-商家账户余额不足 Y6 退款金额超过原订单金额 退款金额需要小于等于可退款金额 64改为Y6 Y6退款金额超过原订单金额 Y7 外部系统错误 具体描述可返回渠道中文描述字段 91改为Y7 Y7交易失败-请联系客服 Y2 商户无此交易渠道权限 H1改为Y2 Y2未授权的交易 Y8 商户无此接口权限 核实该商户是否配置了该接口权限 H2改为Y8 Y8交易失败-请联系客服 Y9 订单已关闭或取消 订单已关闭或取消-不能进行相应操作 H3改为Y9 Y9订单已关闭或取消 YA [字段名]不能为空 检查出错字段 H4改为YA YA交易失败-请联系客服 YB [字段名]格式错误 检查出错字段 H5改为YB YB交易失败-请联系客服 YC 交易状态不合法 检查交易状态是否正常 H6改为YC YC交易失败-请联系客服 YD 交易信息中包含违禁词汇 检查交易信息中是否包含违禁词汇 H7改为YD YD交易失败-请联系客服 YE 原交易非支付交易 原交易非支付交易-不能执行此类操作 R1改为YE YE原交易非支付交易 YF 原交易未成功支付 原交易未成功支付-部分交易不能执行 R2改为YF YF原交易未成功支付 YG 原交易已退款 R3改为YG YG原交易已退款 YH 只能隔天退款 R4改为YH YH只能隔天退款 YJ 不支持的卡类型-请换卡或绑新卡 R5改为YJ YJ不支持的卡类型-请换卡或绑新卡 YK 只能撤销当天交易 R6改为YK YK只能撤销当天交易 YL 顾客账户状态异常 R7改为YL YL顾客账户状态异常 YM 商家账户状态异常 R8改为YM YM商家账户状态异常 YN 付款码与交易渠道不符 R9改为YN YN付款码与交易渠道不符 YP 分账信息不正确 S1改为YP YP交易失败-请联系客服 YQ 软件版本过低-请升级 S2改为YQ YQ软件版本过低-请升级 YR 付款金额小于最低限额 S3改为YR YR付款金额小于最低限额 YS Openid错误 S4改为YS YS交易失败-请联系客服 YT 姓名校验错误 S5改为YT YT姓名校验错误 YU 对同一用户操作过于频繁-请稍候重试 S6改为YU YU对同一用户操作过于频繁-请稍候重试 YV 购汇金额或币种错误 S7改为YV YV购汇金额或币种错误 YW 额度超限 S8改为YW YW额度超限 YX 顾客关闭相关功能 S9改为YX YX顾客关闭相关功能 YY 授权码code错误 J1改为YY YY交易失败-请联系客服 YZ 渠道商户秘钥未配置或配置错误 YZ交易失败-请联系客服 C0 核销失败 C0核销失败 C4 券状态异常 C4券状态异常 C5 未到卡券使用时间 请在卡券有效期内使用 C5未到卡券使用时间 C6 商户不能使用该卡券 C6商户不能使用该卡券 C7 金额达不到满足优惠条件的最小金额 C7金额太小-不可参与优惠 C8 此卡券不能使用此方式进行支付 请使用卡券指定的支付方式 C8此卡券不能使用此方式进行支付 Z0 渠道商户信息有误 检查系统渠道商户配置和渠道是否一致-或者看渠道商户具体应答 E0改为Z0 Z0交易失败-请联系客服 Z1 渠道受理机构信息配置有误 检查与渠道给出信息是否一致-或者看具体应答错误码 E1改为Z1 Z1交易失败-请联系客服 Z2 渠道不支持该业务 如不支持部分退款等 E2改为Z2 Z2未授权的交易-请联系客服 Z3 接入渠道IP验证异常 看渠道方是否有将我方IP配置 99改为Z3 Z3交易失败-请联系客服 Z4 门店状态异常 门店状态被改为异常状态 G1改为Z4 Z4交易失败-请联系客服 Z5 渠道商户状态异常 渠道商户状态被改为异常状态 G2改为Z5 Z5交易失败-请联系客服 Z6 卖家买家账号相同-不能进行交易 通知商户不能用自己账户进行交易-一定要使用其他人账户 G3改为Z6 Z6账号有误-请联系客服 Z7 没有签约扫码支付接口或签约失效 通知商户进行签约 G4改为Z7 Z7未授权的交易-请联系客服 Z8 支付失败-请顾客刷新付款码后重新收款-如再次收款失败-请联系管理员处理 重新扫码收款 G5改为Z8 Z8交易失败-请重试 Z9 未进行应用授权或授权已过期 通知商户重新进行授权操作 G6改为Z9 Z9未授权的交易-请联系客服 ZA 该银行卡已失效-请联系发卡行了解详情-或更换其他支付方式 更换其他支付方式-比如换一张卡或使用钱包余额支付 G7改为ZA ZA交易失败-请更换支付方式 ZB 内部系统操作超时 请重试交易 G9改为ZB ZB交易失败-请联系客服 ZC 渠道验签错误 请至支付宝后台上传公玥 K1改为ZC ZC交易失败-请联系客服 ZD 商户未签约该产品-请按流程完成签约 请按流程完成签约并确认签约成功 K2改为ZD ZD未授权交易-请联系客服 ZE 商户需授权服务商退款接口权限 请服务商按照指引流程-完成授权 K3改为ZE ZE未授权交易-请联系客服 ZF 交易失败-如顾客反馈扣款成功-款项将会在一段时间后退回 不进行发货处理-重新进行一笔收款 F1改为ZF ZF交易失败-请联系客服 ZG 交易失败-请重新发起交易 F8改为ZG ZG交易失败-请重试 E1 程序异常 E1交易失败-请联系客服 E2 配置错误 E2交易失败-请联系客服 E4 E4交易失败-请联系客服 L1 机构额度超限 L1交易失败-请联系客服 L2 商户额度单笔超限 L2交易失败-请联系客服 L3 商户额度单日超限 B1 卡片黑名单 B1交易失败-请联系客服 RA 规则预警 RA交易失败-请联系客服 RB 预警联机拒交易 RB交易失败-请联系客服 RC 预警降额拒交易类P RC交易失败-请联系客服 RD 预警降额拒交易类A RD交易失败-请联系客服","text_tokens":["方","按照","承兑","核实","h7","具体","v2","60","切换","未登记","试","接受","45","z9","s4","条件","外部","l1","19","联系","rd","操作员","将","查看","再","86","81","给出","发起","44","故障","06","银行卡","、","错","]","券","yq","需要","97","无法","词汇","比如","r3","类型","看","ya","未","被","原始","76","表明","签到","40","请","字段","c4","怀疑","误码","s6","58","y3","作","h5","yj","规则","过低","收款","c3","重试","详情","送入","00","12","密钥","r6","可能","未能","处理","允许","yd","支持","c6","换卡","提交","机构","63","已","卡券","code","83","显示","42","了","隔天","s1","加上","再次","zf","是否","g2","e2","53","输错","确认","违反","秘钥","其他","区别","z5"," ","规定","扣款","09","位置","业务","核销","93","至","状态","超出","01","h4","未到","并","大","优惠条件","此卡券","上","异常","交易类型","读取","57","yy","g5","75","或者","相同","s3","用户","脱机","c5","购汇","计划","程序","包含","名单",":","s2","有效期","查询","zh","yr","z1","不予","rb","限制","验证","yu","发卡","或太大","y2","yn","原因","取消","zg","s8","已过期","21","说明","描述","额度","03","做","h3","码表","找","等于","78","一张","绑","达到","将会","合法","记录","g7","单号","z4","费","建议","（","控制","重新","xx","效期","无","65","不符","31","67","--","yb","y1","a","0","04","支付宝","太迟","56","持卡人","yf","g6","使用","30","1","次数","对","受卡方呼","yl","-","登记","33","受卡方","超","中心","zd","此","储蓄","h2","失败","采取","方未","e4","受限制","61","c0","服务","限额","收不到","[","管理","内部","码后","有误","设施","接口","出错","此卡","扫码","执行","c2","没有","98","新","款项","pos","意义","64","用","该卡","投资","输入","mac","等","更换","功能","96","yx","部门","不到","62","单笔","太大","订单号","违禁","39","保密","l2","80","g3","一笔","y5","拒","此类","数据","e1","请求","中文","其他人","校验","刷卡","稍后","一次","信用","z2","openid","\"","可以","码","一致","条码","相应","指引","实施","退回","g4","y9","批次","r7","89","卖家","太小","k1","取款","渠道","14","正在","找到","向","文件","作弊","后台","为","yg","姓名","智能","卡种","先","r8","92","05","分账","联机","只能","降额","收","中间","卡号","非","正常","管理员","为空","卡","了解","对账","读取数据","85","应用","c7","系统","应答","注","22","或","ra","/","交易","捕捉","zb","服务商","41","可","被窃","金额","验签","公玥","反馈","优惠","有效","z0","下","ys","需",")","授权","自己","终端","代码","安全","超时","02","挂失","55","日期","卡人","查","银联","稍候","太","重传","s9","yz","g9","申请","单日","中","y7","r5","升级","90","s5","和","有关","电话","时间","yw","黑名","该","ye","预警","超限","单行","37","68","无此","52","66","yv","上传","(","错误","h1","36","错误码","通知","过于","收单","不","38","yc","他人","超过","插卡","信用卡","持卡","刷新","发货","e0","支付","b1","f8","yp","不可","部分","不能","黑名单","格式","收到","y8","小于","最低","储蓄卡","币种","一段","34","换","段","rc","k2","51","y4","c8","改为","路由","达","23","最小","原","如","内","指定","余额","足够","字","r4","特殊","存在","正确","频繁","y0","yt","15","号","商户","54","h6","当天","同一","在","20","成功","l3","没收","回答","联网","79","新卡","99","买家","后","受限","账号","按","13","yh","参与","展示","88","钱包","客服","不平","任何","流程","撤销","重复","金融机构","措施","84","调节","25","金融","出现","信息","j1","z7","g1","ze","如以","存款","r9","订单","失效","43","要","网络设施","yk","z8","顾客","银行","操作","）","k3","a0","返回","支票","59","2","y6","关闭","退款","相关","付款","一定","与","受理","z6","有","ym","字段名","满足","产品","r1","一段时间","s7","软件","ip","p","重作","91","无效","z3","或读","段时间","丢失","过期","c1","嫌疑","不足","94","防止","77","za","的","密码","开通","我方","违法","发卡行","95","版本","权限","检查","完成","接入","zc","07","账户","网络","进行","r2","签约","商家","配置","卡片","35","类","门店","尚","方式","pin","f1"],"title":"fenghuAnserCode","title_tokens":["fenghuansercode"]},{"location":"attached/sdkAnserCode/","text":"交易应答码表V3(20160811更新) 代码 POS显示(计划实施) 00 交易成功 01 \"01-交易失败请联系发卡行\" 02 \"02-交易失败请联系发卡行\" 03 \"03-无效商户请联系客服\" 04 \"04-卡片异常请换卡重试\" 05 \"05-交易失败请联系发卡行\" 06 \"06-交易失败请联系发卡行\" 07 \"07-卡片异常请换卡重试\" 09 \"09-交易失败请重试\" 12 \"12-发卡行不支持的交易\" 13 \"13-无效金额\" 14 \"14-无效卡号请联系发卡行或换卡重试\" 15 \"15-无此发卡行请换卡重试\" 19 \"19-交易失败请重试\" 20 \"20-交易失败请联系发卡行\" 21 \"21-交易失败请联系发卡行\" 22 \"22-操作有误请重试\" 23 \"23-交易失败请联系发卡行\" 25 \"25-未找到原交易请重试或联系客服\" 30 \"30-格式错误请联系客服\" 31 \"31-交易失败请联系客服\" 33 \"33-过期卡请换卡重试\" 34 \"34-卡片异常请联系发卡行\" 35 \"35-卡片异常请联系发卡行\" 36 \"36-卡片异常请联系发卡行\" 37 \"37-卡片异常请联系发卡行\" 38 \"38-密码错误次数超限\" 39 \"39-交易失败请换卡重试\" 40 \"40-不支持的交易类型请联系客服\" 41 \"41-卡片异常请联系发卡行\" 42 \"42-卡片异常请联系发卡行\" 43 \"43-卡片异常请联系发卡行\" 44 \"44-交易失败请联系发卡行\" 45 \"45-请插卡交易或联系客服\" 51 \"51-余额不足\" 52 \"52-交易失败请换卡重试\" 53 \"53-交易失败请换卡重试\" 54 \"54-过期卡请换卡重试\" 55 \"55-密码错误请重试\" 56 \"56-交易失败请换卡重试\" 57 \"57-卡片异常请联系客服或换卡重试\" 58 \"58-未授权的交易请联系客服\" 59 \"59-卡片异常请联系发卡行\" 60 \"60-卡片异常请联系发卡行\" 61 \"61-超出金额限制请联系客服或换卡重试\" 62 \"62-卡片异常请联系发卡行\" 63 \"63-交易失败请联系发卡行\" 64 \"64-交易失败请联系发卡行\" 65 \"65-交易次数超限请联系发卡行\" 66 \"66-交易失败请联系客服\" 67 \"67-卡片异常请联系发卡行\" 68 \"68-交易超时请重试\" 75 \"75-密码错误次数超限\" 76 \"76-交易失败请联系发卡行\" 77 \"77-交易失败请联系客服\" 78 \"78-交易失败请换卡重试\" 79 \"79-脱机交易对账不平请重传数据或联系客服\" 80 \"80-交易失败请联系客服\" 81 \"81-交易失败请联系客服\" 83 \"83-交易失败请联系客服\" 84 \"84-交易失败请联系客服\" 85 \"85-交易失败请联系客服\" 86 \"86-交易失败请联系客服\" 88 \"88-交易失败请联系客服\" 89 \"89-交易失败请联系客服\" 90 \"90-交易失败请稍后重试\" 91 \"91-交易失败请稍后重试\" 92 \"92-交易失败请稍后重试\" 93 \"93-交易失败请联系发卡行\" 94 \"94-交易失败请稍后重试\" 95 \"95-交易失败请稍后重试\" 96 \"96-系统异常请联系客服\" 97 \"97-无效终端请联系客服或检查配置\" 98 \"98-交易超时请重试\" 99 \"99-交易失败请联系客服\" A0 \"A0-请重新签到或联系客服\" B1 \"B1-卡片异常请联系客服或换卡重试\" C0 \"C0-核销失败\" C1 \"C1-卡券已被核销\" C2 \"C2-卡券已过期\" C3 \"C3-无效的卡券\" C4 \"C4-券状态异常\" C5 \"C5-未到卡券使用时间\" C6 \"C6-商户不能使用该卡券\" C7 \"C7-金额太小不可参与优惠\" C8 \"C8-此卡券不能使用此方式进行支付\" C9 \"C9-交易失败，请联系客服\" CA \"CA-付款码与卡券指定支付方式不符\" CB \"CB-卡券订单不存在\" CC \"CC-交易失败请联系客服\" CD \"CD-卡券订单已支付\" L1 \"L1-交易额度超限请联系客服\" L2 \"L2-交易额度超限请联系客服\" L3 \"L3-交易额度超限请联系客服\" RA \"RA-交易失败请联系客服\" RB \"RB-交易失败请联系客服\" RC \"RC-交易失败请联系客服\" RD \"RD-交易失败请联系客服\" Y0 \"Y0-付款码错误或过期，请重试\" Y1 \"Y1-交易失败请联系客服\" Y2 \"Y2-未开通此支付方式，请联系客服\" Y3 \"Y3-订单不存在，请重试\" Y4 \"Y4-未开通此支付方式，请联系客服\" Y5 \"Y5-退款失败，商家账户余额不足\" Y6 \"Y6-退款金额超过原订单金额\" Y7 \"Y7-交易失败请联系客服\" Y8 \"Y8-不支持的交易类型请联系客服\" Y9 \"Y9-订单已关闭或取消\" YA \"YA-交易失败请联系客服\" YB \"YB-交易失败请联系客服\" YC \"YC-交易失败请联系客服\" YD \"YD-交易失败请联系客服\" YE \"YE-该交易类型不能执行此操作\" YF \"YF-该交易类型不能执行此操作\" YG \"YG-原交易已退款\" YH \"YH-只能隔天退款\" YJ \"YJ-不支持的卡类型，请换卡或绑新卡\" YK \"YK-只能撤销当天交易\" YL \"YL-顾客账户状态异常\" YM \"YM-商家账户状态异常\" YN \"YN-付款码与交易渠道不符\" YP \"YP-交易失败请联系客服\" YQ \"YQ-软件版本过低，请升级\" YR \"YR-付款金额小于最低限额\" YS \"YS-交易失败请联系客服\" YT \"YT-姓名校验错误\" YU \"YU-对同一用户操作过于频繁，请稍后重试\" YV \"YV-购汇金额或币种错误\" YW \"YW-额度超限\" YX \"YX-顾客关闭相关功能\" YY \"YY-交易失败请重试\" YZ \"YZ-交易失败请联系客服\" Z0 \"Z0-交易失败请联系客服\" Z1 \"Z1-交易失败请联系客服\" Z2 \"Z2-未授权的交易请联系客服\" Z3 \"Z3-交易失败请联系客服\" Z4 \"Z4-交易失败请联系客服\" Z5 \"Z5-交易失败请联系客服\" Z6 \"Z6-卖家买家账号相同，不能进行交易\" Z7 \"Z7-商户未签约请联系客服\" Z8 \"Z8-交易失败请重试\" Z9 \"Z9-商户未授权请联系客服\" ZA \"ZA-交易失败，请更换支付方式\" ZB \"ZB-交易失败请重试或联系客服\" ZC \"ZC-交易失败请联系客服\" ZD \"ZD-未授权交易请联系客服\" ZE \"ZE-该商户暂无退款权限请联系客服\" ZF \"ZF-交易异常，如有扣款，款项稍后退回\" ZG \"ZG-交易失败，请重试\" ZH \"ZH-交易失败请联系客服\" ZI \"ZI-直接进入扫码流程显示流程界面\" ZJ \"ZJ-直接进入扫码流程显示流程界面\" ZK \"ZK-交易失败请联系客服\" ZL \"ZL-交易失败请联系客服\" ZM \"ZM-买家付款额度超限\" ZN \"ZN-商家收款额度超限\" ZP \"ZP-超出每日限额，请联系客服\" ZQ \"ZQ-提升限额申请正在审核中\" ZR \"ZR-交易失败，请联系客服\" ZS \"ZS-不支持该交易类型，请联系客服\" ZT \"ZT-交易失败请联系客服\" ZU \"ZU-交易失败请联系客服\" ZV \"ZV-未开通此支付方式，请联系客服\" ZY \"ZY-用户取消支付，请重新发起交易\" ZZ \"ZZ-交易失败请联系客服\"","text_tokens":["60","45","zq","z9","l1","19","联系","rd","未找到","86","81","cd","发起","44","06","券","yq","97","c9","类型","ya","未","被","76","签到","40","请","c4","58","y3","yj","过低","收款","c3","重试","00","12","yd","支持","c6","换卡","63","已","卡券","83","显示","42","zj","zt","隔天","zf","53","zy","z5"," ","扣款","09","核销","93","状态","超出","提升","01","未到","此卡券","异常","zl","交易类型","57","yy","75","相同","用户","脱机","c5","购汇","计划","zh","yr","z1","rb","限制","yu","发卡","y2","yn","取消","zg","已过期","21","额度","03","码表","78","绑","z4","重新","65","不符","31","67","yb","y1","04","56","暂无","yf","zp","使用","v3","30","次数","对","yl","-","33","zd","此","失败","61","c0","限额","有误","此卡","扫码","执行","c2","98","款项","pos","64","该卡","zs","更换","功能","96","yx","62","39","l2","80","y5","20160811","进入","cb","数据","校验","稍后","z2","审核","\"","码","退回","实施","，","y9","89","卖家","太小","渠道","zr","14","正在","找到","ca","yg","姓名","更新","05","92","只能","卡号","卡","对账","85","c7","系统","应答","22","或","ra","zb","交易","41","金额","优惠","z0","ys",")","授权","终端","代码","超时","02","55","重传","yz","申请","zi","每日","中","y7","升级","90","时间","yw","卡请","该","ye","超限","37","68","无此","52","66","yv","(","错误","36","过于","zz","不","38","yc","超过","插卡","界面","支付","b1","yp","不可","不能","格式","y8","小于","最低","币种","34","rc","51","y4","c8","23","原","如","指定","余额","zu","存在","频繁","y0","yt","15","商户","54","当天","同一","20","成功","l3","79","新卡","99","买家","账号","13","yh","参与","88","客服","不平","流程","撤销","84","z7","25","ze","订单","43","yk","z8","顾客","操作","a0","59","y6","关闭","退款","相关","付款","与","z6","有","ym","软件","91","无效","z3","过期","c1","直接","不足","94","za","77","的","密码","开通","zk","zm","版本","发卡行","95","权限","检查","zc","07","账户","进行","签约","商家","配置","卡片","35","方式","zv","zn","cc"],"title":"1. 应答码表:sdk应答码表","title_tokens":["sdk"," ","1","码表",".","应答",":"]},{"location":"attached/symbol/","text":"交易处理标志 processflag取值如下，用于标记处理成功还是失败。 代码 意义 说明 0 成功 1 受理方拒绝 2 转发方失败 3 渠道拒绝 扫码交易，查询失败后超时选择该状态，表示该笔09应答码交易是失败交易 4 超时 5 处理中 6 落地 交易冲正标志 revflag取值如下，用于标记源交易。 代码 意义 说明 0 正常 1 冲正 2 撤销 3 退货 4 汇款 5 完成 6 手工退货 7 手工完成 8 手工撤销","text_tokens":["方","失败","标记","4","，","成功","处理","代码","该笔","说明","2","应答","退货","选择","超时","手工","渠道","0","扫码","标志","取值","后","revflag","processflag","受理","完成","交易","如下","中","查询","意义","撤销","用于","1","源","拒绝","7","3","该","冲正","5","还是","。","正常"," ","转发","6","是","表示","09","落地","汇款","8","状态","码"],"title":"2. 交易处理标志和冲正标志","title_tokens":["冲正"," ","处理","标志","和",".","2","交易"]},{"location":"attached/symbol/#_1","text":"revflag取值如下，用于标记源交易。 代码 意义 说明 0 正常 1 冲正 2 撤销 3 退货 4 汇款 5 完成 6 手工退货 7 手工完成 8 手工撤销","text_tokens":["标记","4","，","代码","说明","2","退货","手工","0","取值","revflag","完成","交易","如下","意义","撤销","用于","1","源","7","3","冲正","5","。","正常"," ","6","汇款","8"],"title":"交易冲正标志","title_tokens":["交易","冲正","标志"]},{"location":"attached/ticket/","text":"签购单规范 小票（签购单）样例，银行卡类小票和扫码类小票： 其他说明 签购单中，可以有空行 交易金额显示，如为退货或撤销，均在金额前显示负号 卡号后面的一位字母，刷卡方式，取值：S（刷卡）、I(插卡)、M（无卡）、C（非接） 卡号后面的3位字母，卡品牌CUP 原凭证号：只有撤销或退货时显示 TAG：8583规范中的子域名，必须打印 各项内容必须完备，排版可以略有不同 标点符号全部为半角 银联卡消费打印的签购单中，必须要显示的内容： 内容 字段取值 备注 商户/持卡人/银行存根 固定文本 客户ID 0000000000 目前为10个0 商户名称 Config.IsoMsg.MERCHANT_NAME 商户号 response.getTrans().getCompInfoA2() 终端号 response.getTrans().getCompInfoA3() 卡号 response.getTrans().getCardNo() + response.getTrans().getCardType() + response.getTrans().getCardBrand() 卡号 + 刷卡方式(1S 2I 3C) + 卡品牌 有效期 response.getTrans().getCompExpirationDate() 需格式转换 MM/YY （为空不打印） 收单行 response.getTrans().compInfoA1() 发卡行 response.getTrans().getAdditionalResData() 交易类型 response.getTrans().getTransCode() 需转换，见下文'交易类型码表' 授权码 response.getTrans().getRevAuthCode() 批次号 response.getTrans().getBatchNum() 凭证号 response.getTrans().getTraceNum() 日期时间 response.getTrans().getTransDate() + response.getTrans().getTransDatetime() 需格式转换 参考号 response.getTrans().getRefNum() 交易金额 response.getTrans().getTransAmt() 小费（Tips） 签名 备注 版本 TAG 新大陆-打印规范 如果你想要自定义小票的样式，可以参考 新大陆 提供的打印文档，点击 新大陆-打印规范.doc 可以下载。 终端相应合规信息取值 按照银联最新规范，终端展示/打印信息需要根据8583报文中57域信息。因此，SDK中Trans新增部分字段 字段名 意义 compInfoA1 签购单收单行 compInfoA2 签购单商户号 compInfoA3 签购单终端号 compInfoA4 markup compInfoA6 借贷记标识 compInfoA7 营销信息 compInfoA8 二维码信息 详细字段信息可查看 javadoc 中com.cardinfolink.pos.sdk.model.Trans信息","text_tokens":["相应","按照","，","doc","完备","时","段","字母","批次","点击","getcompinfoa2","name","说明","自定","标点符号","cup","i","略有","trans","mm","内容","个","负号","下载","如为","0000000000","转换","取值","原","码表","为","gettrans","后面","字","签名","定义","因此","getcardbrand","gettranscode","目前","收","无卡","下文","查看","略有不同","卡号","排版","最新","+","sdk","客户","号","id","compinfoa8","商户","tag","com","为空","卡","凭证","报文","（","银行卡","提供","、","名称","getrevauthcode","compinfoa6","前","在","8583","效期","二维","3c","getcompexpirationdate","需要","10","getcardtype","类型","均","getrefnum","样式","样例","0","域","合规","或","：","/",".","签购","如果","交易","持卡人","展示","必须","位","tips","字段","可","金额","撤销","小票","二维码","信息","-","自定义","记","。","符号","response","要","消费","getcardno","有效","新大陆","getcompinfoa3","config","全部","需","大陆","银行","品牌",")","授权","）","终端","各项","详细","想要","merchant","文档","扫码","gettracenum","日期","卡人","显示","银联","getadditionalresdata","有","2i","标点","getbatchnum","javadoc","中","固定","意义","半角","字段名","pos","1s","compinfoa7","和","compinfoa2","单收","码","c","存根","时间","小费","其他"," ","标识","gettransdatetime","单行","compinfoa3","一位","不同","compinfoa1","你","(","markup","营销","单","子","交易类型","根据","的","退货","gettransdate","新大","57","s","yy","_","空行","只有","单中","不","发卡行","'","域名","版本","插卡","持卡","gettransamt","model","见下文","银联卡","借贷","有效期","打印信息","cardinfolink","规范","compinfoa4","非接","参考","isomsg","部分","类","文本","3","新增","格式","备注","刷卡","发卡","方式","m","印信","可以","打印"],"title":"3. 签购单规范","title_tokens":[" ","规范","单",".","签购","3"]},{"location":"attached/ticket/#_1","text":"按照银联最新规范，终端展示/打印信息需要根据8583报文中57域信息。因此，SDK中Trans新增部分字段 字段名 意义 compInfoA1 签购单收单行 compInfoA2 签购单商户号 compInfoA3 签购单终端号 compInfoA4 markup compInfoA6 借贷记标识 compInfoA7 营销信息 compInfoA8 二维码信息 详细字段信息可查看 javadoc 中com.cardinfolink.pos.sdk.model.Trans信息","text_tokens":["compinfoa1","按照","8583","，","二维","markup","营销","需要","终端","段","compinfoa6","单","根据","详细","57","trans","域","银联","/",".","签购","javadoc","展示","model","中","借贷","字段","字","打印信息","可","意义","cardinfolink","字段名","pos","因此","规范","compinfoa4","compinfoa7","compinfoa2","部分","二维码","单收","信息","查看","新增","最新","sdk","。","号","记"," ","商户","标识","compinfoa8","com","印信","报文","单行","compinfoa3","打印"],"title":"终端相应合规信息取值","title_tokens":["相应","终端","合规","取值","信息"]},{"location":"attached/traditionAnserCode/","text":"交易应答码表V1(传统POS) 交易返回合作方时都有 39 域，合作方和终端需根据应答码要采取相应的操作，可以把操作分为以下几类: A:交易成功 B:交易失败, 可重试 C:交易失败, 不需要重试 D:交易失败, 终端操作员处理 E:交易失败, 系统故障, 不需要重试 注 1: 如果 39 域的内容不能在下表中找到，就显示“交易失败” 注 2: 如果POS交易的批次号和网络中心批次号不一致时应答码会填 “77”，此时POS机应当提示操作员重新签到， 再作交易。 代码 意义 类别 原因/采取的措施 说明 00 承兑或交易成功 A 承兑或交易成功 交易成功 01 查发卡行 C 查发卡行 交易失败，请联系发卡行 02 查发卡行的特殊条件 C 可电话向发卡行查询 交易失败，请联系发卡行 03 无效商户 C 商户需要在银行或中心登记 商户未登记 04 没收卡 D 操作员没收卡 没收卡，请联系收单行 05 不予承兑 C 发卡不予承兑 交易失败，请联系发卡行 06 出错 E 发卡行故障 交易失败，请联系发卡行 07 特殊条件下没收卡 D 特殊条件下没收卡 没收卡，请联系收单行 09 请求正在处理中 B 重新提交交易请求 交易失败，请重试 12 无效交易 C 发卡行不支持的交易 交易失败，请联系发卡行 13 无效金额 B 金额为 0 或太大 交易金额超限，请重试 14 无效卡号 B 卡种未在中心登记或读卡号有误 无效卡号，请联系发卡行 15 无此发卡行 C 此发卡行未与中心开通业务 此卡不能受理 19 重新送入交易 C 刷卡读取数据有误，可重新刷卡 交易失败，请联系发卡行 20 无效应答 C 无效应答 交易失败，请联系发卡行 21 不做任何处理 C 不做任何处理 交易失败，请联系发卡行 22 怀疑操作有误 C POS 状态与中心不符，可重新签到 操作有误，请重试 23 不可接受的交易费 C 不可接受的交易费 交易失败，请联系发卡行 25 未能找到文件上记录 C 发卡行未能找到有关记录 交易失败，请联系发卡行 30 格式错误 C 格式错误 交易失败，请联系发卡行 31 不支持的银行 C 此发卡方未与中心开通业务 此卡不能受理 33 过期的卡 D 过期的卡，操作员可以没收 过期卡，请联系发卡行 34 有作弊嫌疑 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 35 受卡方与安全保密部门联系 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 36 受限制的卡 D 有作弊嫌疑的卡，操作员可以没收 此卡有误，请换卡重试 37 受卡方呼受理方安全保密部门(没收卡) D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 38 超过允许的 PIN 试输入 D 密码错次数超限，操作员可以没收 密码错误次数超限 39 无此信用卡账户 C 可能刷卡操作有误 交易失败，请联系发卡行 40 请求的功能尚不支持 C 发卡行不支持的交易类型 交易失败，请联系发卡行 41 丢失卡 D 挂失的卡，操作员可以没收 没收卡，请联系收单行 42 无此账户 B 发卡行找不到此账户 交易失败，请联系发卡方 43 被窃卡 D 被窃卡， 操作员可以没收 没收卡，请联系收单行 44 无此投资账户 C 可能刷卡操作有误 交易失败，请联系发卡行 51 无足够的存款 C 账户内余额不足 余额不足，请查询 52 无此支票账户 C 无此支票账户 交易失败，请联系发卡行 53 无此储蓄卡账户 C 无此储蓄卡账户 交易失败，请联系发卡行 54 过期的卡 C 过期的卡 过期卡，请联系发卡行 55 不正确的 PIN C 密码输错 密码错，请重试 56 无此卡记录 C 发卡行找不到此账户 交易失败，请联系发卡行 57 不允许持卡人进行的交易 C 不允许持卡人进行的交易 交易失败，请联系发卡行 58 不允许终端进行的交易 C 该商户不允许进行的交易 终端无效，请联系收单行或银联 59 有作弊嫌疑 C 交易失败，请联系发卡行 60 受卡方与安全保密部门联系 C 交易失败，请联系发卡行 61 超出取款金额限制 C 一次交易的金额太大 金额太大 62 受限制的卡 C 交易失败，请联系发卡行 63 违反安全保密规定 C 违反安全保密规定 交易失败，请联系发卡行 64 原始金额不正确 C 原始金额不正确 交易失败，请联系发卡行 65 超出取款次数限制 C 超出取款次数限制 超出取款次数限制 66 受卡方呼受理方安全保密部门 C 受卡方呼受理方安全保密部门 交易失败，请联系收单行或银联 67 捕捉(没收卡) C 捕捉(没收卡) 没收卡 68 收到的回答太迟 C 发卡行规定时间内没有回答 交易超时，请重试 75 允许的输入 PIN 次数超限 C 允许的输入 PIN 次数超限 密码错误次数超限 77 需要向网络中心签到 D POS 批次与网络中心不一致 请向网络中心签到 79 脱机交易对账不平 C POS 终端上传的脱机数据对账不 平 POS 终端重传脱机数据 90 日期切换正在处理 C 日期切换正在处理 交易失败，请稍后重试 91 发卡行或收单银行不能操作 C 电话查询发卡方或收单银行，可重作 交易失败，请稍后重试 92 金融机构或中间网络设施无法达到 C 电话查询发卡方或网络中心，可重 作 交易失败，请稍后重试 93 交易违法、不能完成 C 交易违法、不能完成 交易失败，请联系发卡行 94 重复交易 C 查询网络中心，可重新签到作交易 交易失败，请稍后重试 95 调节控制错 C 调节控制错 交易失败，请稍后重试 96 系统异常、失效 C 发卡方或网络中心出现故障 交易失败，请稍后重试 97 POS 终端号找不到 D 终端未在中心或银行登记 终端未登记，请联系收单行或银联 98 收不到发卡行应答 E 收不到发卡行应答 交易超时，请重试 99 PIN 格式错 B 可重新签到作交易 校验错，请重新签到 A0 MAC 校验错 B 可重新签到作交易 校验错，请重新签到 C1 卡券已被核销 C C2 卡券已过期 C C3 无效的卡券 C","text_tokens":["方","承兑","切换","60","未登记","试","接受","条件","19","联系","操作员",",","44","故障","06","、","错","需要","无法","97","类型","未","被","原始","签到","“","40","请","怀疑","会填","58","作","c3","重试","送入","00","12","可能","未能","处理","允许","支持","提交","换卡","机构","63","已","卡券","显示","42","53","输错","违反","应当","把"," ","规定","b","09","业务","核销","93","状态","分为","超出","01","大","上","异常","交易类型","读取","就","57","75","脱机",":","查询","不予","限制","发卡","或太大","原因","已过期","21","时","说明","03","做","码表","找","采取相应","传统","达到","记录","系统故障","费","控制","重新","无","65","不符","31","67","a","0","04","太迟","56","如果","持卡人","30","1","合作方","次数","受卡方呼","登记","33","受卡方","。","中心","此","储蓄","失败","采取","方未","受限制","61","收不到","有误","设施","出错","c2","没有","98","pos","意义","64","投资","输入","mac","平","机","功能","96","部门","不到","62","根据","太大","39","保密","数据","请求","校验","刷卡","稍后","一次","信用","可以","码","一致","相应","，","批次","取款","内容","14","正在","找到","向","文件","作弊","为","卡种","92","05","再作","收","中间","卡号","卡","对账","读取数据","”","可重","系统","应答","都","以下","域","注","22","或","/","交易","捕捉","41","可","被窃","金额","下","需",")","d","终端","代码","几类","安全","超时","02","挂失","55","日期","卡人","查","银联","太","重传","中","90","合作","和","有关","电话","时间","该","超限","单行","37","68","无此","52","66","上传","(","错误","36","收单","不","38","超过","v1","信用卡","持卡","不可","不能","格式","收到","e","储蓄卡","34","51","此时","23","内","余额","足够","特殊","类别","正确","15","号","商户","54","在","20","成功","没收","回答","79","99","受限","13","不平","任何","重复","金融机构","措施","调节","出现","25","金融","存款","下表中","失效","43","网络设施","银行","提示","操作","a0","返回","支票","59","2","与","受理","有","c","重作","91","无效","或读","码要","丢失","过期","c1","嫌疑","不足","94","77","的","密码","开通","违法","发卡行","95","完成","07","网络","账户","进行","35","尚","pin"],"title":"traditionAnserCode","title_tokens":["traditionansercode"]},{"location":"attached/traditionAnserCode/#v1pos","text":"交易返回合作方时都有 39 域，合作方和终端需根据应答码要采取相应的操作，可以把操作分为以下几类: A:交易成功 B:交易失败, 可重试 C:交易失败, 不需要重试 D:交易失败, 终端操作员处理 E:交易失败, 系统故障, 不需要重试 注 1: 如果 39 域的内容不能在下表中找到，就显示“交易失败” 注 2: 如果POS交易的批次号和网络中心批次号不一致时应答码会填 “77”，此时POS机应当提示操作员重新签到， 再作交易。 代码 意义 类别 原因/采取的措施 说明 00 承兑或交易成功 A 承兑或交易成功 交易成功 01 查发卡行 C 查发卡行 交易失败，请联系发卡行 02 查发卡行的特殊条件 C 可电话向发卡行查询 交易失败，请联系发卡行 03 无效商户 C 商户需要在银行或中心登记 商户未登记 04 没收卡 D 操作员没收卡 没收卡，请联系收单行 05 不予承兑 C 发卡不予承兑 交易失败，请联系发卡行 06 出错 E 发卡行故障 交易失败，请联系发卡行 07 特殊条件下没收卡 D 特殊条件下没收卡 没收卡，请联系收单行 09 请求正在处理中 B 重新提交交易请求 交易失败，请重试 12 无效交易 C 发卡行不支持的交易 交易失败，请联系发卡行 13 无效金额 B 金额为 0 或太大 交易金额超限，请重试 14 无效卡号 B 卡种未在中心登记或读卡号有误 无效卡号，请联系发卡行 15 无此发卡行 C 此发卡行未与中心开通业务 此卡不能受理 19 重新送入交易 C 刷卡读取数据有误，可重新刷卡 交易失败，请联系发卡行 20 无效应答 C 无效应答 交易失败，请联系发卡行 21 不做任何处理 C 不做任何处理 交易失败，请联系发卡行 22 怀疑操作有误 C POS 状态与中心不符，可重新签到 操作有误，请重试 23 不可接受的交易费 C 不可接受的交易费 交易失败，请联系发卡行 25 未能找到文件上记录 C 发卡行未能找到有关记录 交易失败，请联系发卡行 30 格式错误 C 格式错误 交易失败，请联系发卡行 31 不支持的银行 C 此发卡方未与中心开通业务 此卡不能受理 33 过期的卡 D 过期的卡，操作员可以没收 过期卡，请联系发卡行 34 有作弊嫌疑 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 35 受卡方与安全保密部门联系 D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 36 受限制的卡 D 有作弊嫌疑的卡，操作员可以没收 此卡有误，请换卡重试 37 受卡方呼受理方安全保密部门(没收卡) D 有作弊嫌疑的卡，操作员可以没收 没收卡，请联系收单行 38 超过允许的 PIN 试输入 D 密码错次数超限，操作员可以没收 密码错误次数超限 39 无此信用卡账户 C 可能刷卡操作有误 交易失败，请联系发卡行 40 请求的功能尚不支持 C 发卡行不支持的交易类型 交易失败，请联系发卡行 41 丢失卡 D 挂失的卡，操作员可以没收 没收卡，请联系收单行 42 无此账户 B 发卡行找不到此账户 交易失败，请联系发卡方 43 被窃卡 D 被窃卡， 操作员可以没收 没收卡，请联系收单行 44 无此投资账户 C 可能刷卡操作有误 交易失败，请联系发卡行 51 无足够的存款 C 账户内余额不足 余额不足，请查询 52 无此支票账户 C 无此支票账户 交易失败，请联系发卡行 53 无此储蓄卡账户 C 无此储蓄卡账户 交易失败，请联系发卡行 54 过期的卡 C 过期的卡 过期卡，请联系发卡行 55 不正确的 PIN C 密码输错 密码错，请重试 56 无此卡记录 C 发卡行找不到此账户 交易失败，请联系发卡行 57 不允许持卡人进行的交易 C 不允许持卡人进行的交易 交易失败，请联系发卡行 58 不允许终端进行的交易 C 该商户不允许进行的交易 终端无效，请联系收单行或银联 59 有作弊嫌疑 C 交易失败，请联系发卡行 60 受卡方与安全保密部门联系 C 交易失败，请联系发卡行 61 超出取款金额限制 C 一次交易的金额太大 金额太大 62 受限制的卡 C 交易失败，请联系发卡行 63 违反安全保密规定 C 违反安全保密规定 交易失败，请联系发卡行 64 原始金额不正确 C 原始金额不正确 交易失败，请联系发卡行 65 超出取款次数限制 C 超出取款次数限制 超出取款次数限制 66 受卡方呼受理方安全保密部门 C 受卡方呼受理方安全保密部门 交易失败，请联系收单行或银联 67 捕捉(没收卡) C 捕捉(没收卡) 没收卡 68 收到的回答太迟 C 发卡行规定时间内没有回答 交易超时，请重试 75 允许的输入 PIN 次数超限 C 允许的输入 PIN 次数超限 密码错误次数超限 77 需要向网络中心签到 D POS 批次与网络中心不一致 请向网络中心签到 79 脱机交易对账不平 C POS 终端上传的脱机数据对账不 平 POS 终端重传脱机数据 90 日期切换正在处理 C 日期切换正在处理 交易失败，请稍后重试 91 发卡行或收单银行不能操作 C 电话查询发卡方或收单银行，可重作 交易失败，请稍后重试 92 金融机构或中间网络设施无法达到 C 电话查询发卡方或网络中心，可重 作 交易失败，请稍后重试 93 交易违法、不能完成 C 交易违法、不能完成 交易失败，请联系发卡行 94 重复交易 C 查询网络中心，可重新签到作交易 交易失败，请稍后重试 95 调节控制错 C 调节控制错 交易失败，请稍后重试 96 系统异常、失效 C 发卡方或网络中心出现故障 交易失败，请稍后重试 97 POS 终端号找不到 D 终端未在中心或银行登记 终端未登记，请联系收单行或银联 98 收不到发卡行应答 E 收不到发卡行应答 交易超时，请重试 99 PIN 格式错 B 可重新签到作交易 校验错，请重新签到 A0 MAC 校验错 B 可重新签到作交易 校验错，请重新签到 C1 卡券已被核销 C C2 卡券已过期 C C3 无效的卡券 C","text_tokens":["方","承兑","切换","60","未登记","试","接受","条件","19","联系","操作员",",","44","故障","06","、","错","需要","无法","97","类型","未","被","原始","签到","“","40","请","怀疑","会填","58","作","c3","重试","送入","00","12","可能","未能","处理","允许","支持","提交","换卡","机构","63","已","卡券","显示","42","53","输错","违反","应当","把"," ","规定","b","09","业务","核销","93","状态","分为","超出","01","大","上","异常","交易类型","读取","就","57","75","脱机",":","查询","不予","限制","发卡","或太大","原因","已过期","21","时","说明","03","做","找","采取相应","达到","记录","系统故障","费","控制","重新","无","65","不符","31","67","a","0","04","太迟","56","如果","持卡人","30","1","合作方","次数","受卡方呼","登记","33","受卡方","。","中心","此","储蓄","失败","采取","方未","受限制","61","收不到","有误","设施","出错","c2","没有","98","pos","意义","64","投资","输入","mac","平","机","功能","96","部门","不到","62","根据","太大","39","保密","数据","请求","校验","刷卡","稍后","一次","信用","可以","码","一致","相应","，","批次","取款","内容","14","正在","找到","向","文件","作弊","为","卡种","92","05","再作","收","中间","卡号","卡","对账","读取数据","”","可重","系统","应答","都","以下","域","注","22","或","/","交易","捕捉","41","可","被窃","金额","下","需",")","d","终端","代码","几类","安全","超时","02","挂失","55","日期","卡人","查","银联","太","重传","中","90","合作","和","有关","电话","时间","该","超限","单行","37","68","无此","52","66","上传","(","错误","36","收单","不","38","超过","信用卡","持卡","不可","不能","格式","收到","e","储蓄卡","34","51","此时","23","内","余额","足够","特殊","类别","正确","15","号","商户","54","在","20","成功","没收","回答","79","99","受限","13","不平","任何","重复","金融机构","措施","调节","出现","25","金融","存款","下表中","失效","43","网络设施","银行","提示","操作","a0","返回","支票","59","2","与","受理","有","c","重作","91","无效","或读","码要","丢失","过期","c1","嫌疑","不足","94","77","的","密码","开通","违法","发卡行","95","完成","07","网络","账户","进行","35","尚","pin"],"title":"交易应答码表V1(传统POS)","title_tokens":["应答","pos","传统","(",")","码表","v1","交易"]},{"location":"attached/transType/","text":"交易类型码表 transCode 意义 小票打印 PER 消费 PBI 余额查询 PEC 消费冲正 PVR 撤销 PVC 消费撤销冲正 CTH 退货 PPA 预授权 PNP 预授权撤销 ACR 预授权完成 PCR 预授权完成撤销 PPC 预授权冲正 PMC 预授权撤销冲正 PCC 预授权完成冲正 PRC 预授权完成撤销冲正 BPA 条码支付下单 BPP 条码支付预下单 BVD 条码支付撤销 BTH 条码支付退货 BVE 条码支付取消 BPI 条码支付查询 PER2EDC PER类交易DCC－EDC交易 ACR2EDC ACR类交易DCC－EDC交易 TTD 小费 TVD 小费撤销 CASH 现金交易 CCL 现金撤销","text_tokens":["条码","pec","per","授权","cth","cash","acr2edc","交易类型","退货","bpi","类型","tvd","下单","pbi","prc","预","bpp","pmc","－","码表","完成","交易","pnp","bpa","余额","查询","支付","意义","transcode","撤销","pvc","小票","ppa","pcr","edc","dcc","类","pcc","小费","bve","ccl","冲正","pvr","现金"," ","acr","ppc","bvd","per2edc","消费","ttd","现金交易","取消","bth","打印"],"title":"4. 交易类型","title_tokens":["4"," ",".","交易类型","交易","类型"]},{"location":"documentation/Qr/","text":"扫码交易 扫码相关的交易则是不依赖 POS 机器的读卡模块的,但是你需要将 微信 或者 支付宝 的二维码读出来传给扫码消费接口,扫码可以使用第三方库,如 zxing 。 扫码消费 CILRequest request = new CILRequest(); request.setAmount(amount);//交易金额 request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果，字段说明见底部 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： // resultCode = response.getTrans().getRespCode(); // if (\"09\".equals(resultCode)) { // CILSDK.queryQr(); // `queryQr` 方法见下文 // } } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); 注意,如果应答码返回09或98，需要调用讯联扫码查询接口，查询该笔订单的实际状态。 扫码撤销 CILRequest request = new CILRequest(); request.setAmount(amount);//原交易金额 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证(流水)号 request.setReferenceNumber(refNum); //原交易参考号 CILSDK.revokeConsumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码退货 CILRequest request = new CILRequest(); request.setAmount(amount);//退款金额 request.setReferenceNumber(serialNum);//原交易参考号 request.setTransDatetime(tradeDate);//原交易时间 CILSDK.returnConsumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码查询 CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum());//批次号 request.setTraceNum(response.getTrans().getTraceNum());//凭证号 request.setPeriod(10000L);//10s request.setLimitTime(6);//6 次 request.setReferenceNumber(response.getTrans().getRefNum());//参考号 request.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 request.setScanCodeId(response.getTrans().getScanCodeId());//扫码号 request.setAmount(response.getTrans().getTransAmt());//交易金额 CILSDK.queryQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码消费查询,只查询一次，不含取消接口 CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum());//批次号 request.setTraceNum(response.getTrans().getTraceNum());//凭证号 request.setReferenceNumber(response.getTrans().getRefNum());//参考号 request.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 request.setScanCodeId(response.getTrans().getScanCodeId());//扫码号 CILSDK.queryQrJustOnce(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码取消 /** * 扫码取消 * 对于09状态的消费订单，最终需要取消、关单 * @param request * @param listener */ CILRequest cilRequest = new CILRequest(); cilRequest.setOriginalTradeDate(response.getTrans().getTransDate());//原交易日期 cilRequest.setAmount(response.getTrans().getTransAmt());//交易金额 cilRequest.setBatchNum(response.getTrans().getBatchNum());//批次号 cilRequest.setTraceNum(response.getTrans().getTraceNum());//凭证号 cilRequest.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 cilRequest.setReferenceNumber(response.getTrans().getRefNum());//参考号 CILSDK.voidQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权 CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.preAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { // 处理扫码预授权结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { //扫码预授权出错 } }); 扫码预授权撤销 CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 request.setBatchNum(curTrans.getBatchNum());//原预授权交易批次号 request.setTraceNum(curTrans.getTraceNum());//原预授权交易凭证（流水）号 CILSDK.revokePreAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权完成 CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 CILSDK.preAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权完成撤销 CILRequest request = new CILRequest(); request.setAmount(transaction.getTransAmt());//原预授权完成交易金额 request.setBatchNum(transaction.getBatchNum());//原预授权完成交易批次号 request.setTraceNum(transaction.getTraceNum());//原预授权完成交易凭证（流水）号 request.setReferenceNumber(transaction.getRefNum());//原预授权完成交易参考号 CILSDK.revokePreAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 单品券功能接入指引 注意：sdk v2.5.3及之后版本支持该功能 1. 扫码消费接口增加单品券核销功能，扫码消费接口增加入参两个参数，订单优惠标记（为配券时候的填的优惠标记）,商品列表； /** * 扫码消费 */ CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） request.setOrderPromotionMark(orderPromotionMark);//订单优惠标记（类型String可选参数） request.setGoodsList(goodsList);//商品列表（类型String可选参数）详见下新增字段说明 CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); 新增字段说明 字段 类型 含义 是否可选 备注1 备注2 orderPromotionMark String 订单优惠标记 Y ans32 来源于配券时选填字段 goodsList String 商品列表 Y 最多9个商品 按照以下样例格式传输 报文样例： \"orderPromotionMark\":\"1111\", \"[ { \"goodsName\":\"小面包\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"1111\" }, { \"goodsName\":\"棒棒糖\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"2222\" }, { \"goodsName\":\"彩虹糖\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"3333\" }, { \"goodsName\":\"矿泉水\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"4444\" } ]\" 响应报文新增一个CouponInfo的实例,内部包含属性字段有： 字段 类型 含义 是否可选 备注 couponId String 优惠券id Y couponName String 优惠券名称 Y channelContribution String 渠道出资 Y MerchantContribution String 商家出资 Y otherContribution String 其它出资 Y discountType String 优惠类型 Y discountRange String 优惠范围 Y discountbatchaId String 优惠活动批次ID Y goodsList String 单品优惠商品列表 Y 单品优惠列表商品字段 字段 类型 含义 是否可选 备注 goodsBarCode String 商品条码号 Y goodsDiscount String 单品优惠金 Y CouponInfo响应报文样例： { \"MerchantContribution\":\"000000000100\", \"couponId\":\"9026256969\", \"couponName\":\"讯联满1.1减1 tag\", \"discountRange\":\"SINGLE\", \"discountType\":\"DISCOUNT\", \"discountbatchaId\":\"9803978\", \"goodsList\":\"[{\"goodsBarCode\":\"1111\",\"goodsDiscount\":\"000000000034\"}, {\"goodsBarCode\":\"2222\",\"goodsDiscount\":\"000000000034\"}, {\"goodsBarCode\":\"3333\",\"goodsDiscount\":\"000000000032\"}]\", \"otherContribution\":\"000000000000\" } 附：最多支持传入9个商品","text_tokens":["按照","该笔","附","配券","9026256969","外部","price","棒棒糖",",","将","面包","setreferencenumber","id","报文","returnconsumeqr","、","getrespcode","serialnum","]","setorderpromotionmark","goodslist","方法","矿泉水","需要","类型","第三方","如下","填","字段","y","二维码","消费","优惠券","来源","讯","othercontribution","000000000034","处理","支持","矿泉","原预","result","code","1111","是否","选","但是","public","override"," ","详见","源于","是","listener","refnum","zxing","09","核销","request","状态","读出","增加","new","三方","revauthcode","或者","setlimittime","实例","setgoodslist",">","setscancodeid","revokeconsumeqr","包含","见下文",":","活动","<","查询","参考","resultcode","范围","出来","goodsdiscount","取消","填字","库","10s","说明","；","依赖","amount","小面包","最多","单号","transamt","传入","入参","（","名称","最终","实际","void","000000000000","预","样例","支付宝","如果","响应","settracenum","使用","}","1","@","金","。","单品","response","结果","1.1","couponid","9","*","3333","见","merchantcontribution","服务","[","内部","可选","接口","出错","扫码","传输","彩虹","if","第三","98","pos","setorderid","两个","setoriginaltradedate","之后","模块","输入","preauthqr","transdate","single","棒棒","功能","setamount","equals","10000l","注意","退货","gettransdate","订单号","settransdatetime","多","discount","读卡","3","一次","2222","属性","orderid","\"","码","调用","条码","可以","指引","，","批次","流水","机器","渠道","voidqr","为","gettrans","goodsbarcode","9803978","减","关单","二维","一个","curtrans","应答","string","revokepreauthqr","以下","setposinputstyle","或","/",".","交易","可","金额","糖","onresult","及","出资","discountrange","优惠","下","v2.5","goodsname","queryqr","`",")","授权","parcelable","...","日期","单品券","getbatchnum","次","goodsid","时候","param","对于","时间","该","优惠活动","cilsdk","4444","cilrequest","你","(","只","orderpromotionmark","不","cilresponse","支付","tracenum","batchnum","新增","格式","时选","setbatchnum","则","6","getposinputstyle","获取","getscancodeid","e","读出来","段","000000000032","个","原","如","goodsnum","字",";","含","下文","联满","ans32","=","sdk","000000000100","号","consumeqr","tag","微信","凭证","exception","queryqrjustonce","getrefnum","商品","：","参数","撤销","transaction","setperiod","订单","列表","couponinfo","来源于","标记","泉水","）","返回","2","onerror","couponname","退款","相关","gettracenum","有","channelcontribution","preauthcompleteqr","传给","discounttype","discountbatchaid","{","的","版本","callback","完成","接入","gettransamt","底部","其它","商家","revokepreauthcompleteqr","含义","备注","tradedate","方式","联扫码","最"],"title":"Qr","title_tokens":["qr"]},{"location":"documentation/active/","text":"激活POS机 激活环节分为三步，分别是：激活，终端参数下载，终端密钥下载，三步都成功，表示激活成功，激活成功之后才能正常使用后面的交易流程。 激活 a、新激活接口（推荐） 根据用户反馈，为了简化激活流程，我们新增了激活码的方式激活，当你拿到 POS 机器之后，我们会为这个商户发放激活码，一个激活码可以激活一台 POS 机。 成功激活后，接口会返回商户号，终端号等信息，后续参数下载需要用到。 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。 //authCode 激活码（建议用扫码的方式得到激活码，避免让用户手输） CILSDK.activeWithCode(authCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败，失败原因见 cilResponse.getMessage() } } @Override public void onError(Parcelable cilRequest, Exception e) { //激活出错 } }); b、旧激活接口 第一次使用智能 POS 终端的时候,需要使用讯联下发的商户号 merCode 和终端号 termCode 激活 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。推荐APP本身能够保持设备是否已经激活标志 //merCode 讯联下发的商户号 //termCode 讯联下发的终端号 CILSDK.active(merCode, termCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败 } } @Override public void onError(Parcelable p, Exception e) { //激活出错 } }); 终端参数下载 激活成功之后,你的应用还需要下载一些交易时使用的参数,比如 交易地址和端口 、 交易超时时间 、 终端支持的功能 、 TPDU 等, 在你拿到 POS 终端之前,这些参数都会在讯联后台已经配置好,全部参数见 CILResponse.Info 返回值。下载成功之后 SKD 会 以json字符串的形式保存这些参数到 SharedPreference (请不要擅自改动这些参数值,以免导致交易失败) 。当然,在 onResult 中也会返回,你也可以自己选择性保存一些参数。另外, SDK 保存在 SharedPreference 里的值会提供接口 CILSDK.getSystemParams() 获取。 注意：正常情况下，此方法只需执行成功一次，但是后台参数配置可能会有改动，APP本身需要调用预留功能调用此方法 //merCode 讯联下发的商户号 激活成功之后可以确定商户号 //termCode 讯联下发的终端号 激活成功之后可以确定终端号 CILSDK.downloadParams(merCode, termCode, new com.cardinfolink.pos.listener.Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) { //参数下载成功,具体返回的参数见 response.Info } else { //参数下载错误 } } @Override public void onError(Parcelable p, Exception e) { //下载出错 } }); 终端密钥下载 终端密钥下载只需要成功执行一次就可以,成功下载的密钥会被转载到POS硬件模块里面,后面就不需要再次调用了,建议你的应用可以在成功下载密钥之后持久化一个标志位, 下次进入应用就不再去下载密钥了。整个过程可能会需要1~2分钟左右(依赖当前的网络状况),会经历以下步骤: 请求讯联网关 RSA -> 装载 RSA -> 请求主密钥 -> 装载主密钥 -> 启用主密钥 -> 请求工作密钥(签到) -> 装载工作密钥 -> 下载 AID -> 装载 AID -> 下载 IC 公钥 -> 装载 IC 公钥。 建议APP本身存储设备是否已经初始化方法标志。 注意：此方法一般只需要安装后成功调用一次即可。但银行交互密钥有可能会更新，APP本身需要调用预留功能调用此方法 CILSDK.downloadParamsWithProgress(new ProgressCallback<CILResponse>() { @Override public void onProgressUpdate(int progress) { //progress下载密钥的进度 } @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) //密钥下载成功。在这里可以持久化一个标志位 } @Override public void onError(Parcelable p, Exception e) { //下载密钥出错 } });","text_tokens":["化","下发","，","sharedpreference","会为","返回值","分钟","时","状况","装载","具体","手输","避免","多次","依赖","整个","下次","机器","下载","参数值","情况","擅自","后台","如","到","讯联","智能","里","后面","联系","不再","阶段",";",",","过程","更新","int","=","值会","本身","tpdu","sdk","正常","号","getstatus","公钥","商户","转载","com","持久","建议","表示","设备","左右","（","提供","、","以免","onprogressupdate","用到","激活码","else","exception","在","选择性","确定","~","成功","一个","让","方法","当","需要","应用","aid","无法","比如","联网","第一次","void","调用","硬件","都","以","以下","rsa","a","仅","0","推荐","后","字符串","另外","被","：","/",".","初始","交易","拿到","好","参数","当前","签到","请","使用","客服","位","步骤","激活","流程","}","简化","联","重复","1","onresult","预留","一些","第一","这里","存储设备","信息","active","关","-","才能","@","安装","端口","反馈","。","旧","response","下","得到","此","能够","已经","密钥","需求","失败","getmessage","app","发放","还","讯","全部","形式",")","需","见","）","终端","操作","自己","返回","我们","支持","字符","parcelable","getsystemparams","2","后续","初始化","即可","onerror","超时","进度","debug","termcode","环节","数值","去","接口","出错","改动","progresscallback","扫码","执行","存储","工作","progress","activewithcode","if","有","了","时候","中","ic","json","再次","新","是否","downloadparams","pos","交互","用","分别","但是","和","之后","这些","保存","时间","模块","p","public","机","等","override"," ","authcode","是","b","cilsdk","info","listener","功能","也","里面","downloadparamswithprogress","分为","三步","cilrequest","你","(","保持","只","错误","能且","new","根据","注意","{","的","一台","当然","选择","就","之前","skd","callback",">","不","用户","标志","主","cilresponse","网络","进行",":","不要","<","为了","cardinfolink","进入","mercode","这个","配置","导致","若有","经历","银行","新增","地址","请求","能","启用","方式","但","一次","一般","获取","原因","会","可能","可以","e"],"title":"Active","title_tokens":["active"]},{"location":"documentation/bill/","text":"账单查询 智能 POS SDK 分别提供了最多30天的 账单列表查询 和 账单统计接口 接口,接口会根据 type 值确定返回 银行卡账单 或 扫码账单 。 交易成功还是失败最终以返回账单中应答码为准，见 应答码表 。 交互设计建议：交易中，具体来说，调用CILSDK.consumeQr()或是CILSDK.consume()方法时，当因为网络中断进入onError callback时，建议在交互中加入 查询账单列表 的逻辑，这样交易失败后可方便收银员通过账单来确认这笔订单的实际状态。 注意：对于 09 （请求正在处理中）状态的交易账单数据，还需要看 处理标志位 才能判定此次交易成功与否，使用 getProcessFlag() 获取。 当 processFlag 为 '0' 时，此次交易成功；当 processFlag 为非'0' 时，此次交易失败，见 处理标志表 。 根据外部订单号获取该笔订单信息（同步） //outOrderNum为传入数据 CILSDK.getBillsAsync(outOrderNum, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }) 根据凭证号获取当前批次号下该笔订单详情(异步) /** * 依据凭证号，获取当前批次下的订单详情 回调在主线程 * 异步操作 * @param traceNum 凭证号 * @param listener */ CILSDK.getBillByTraceNum(traceNum, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 根据参考号获取当前批次下的订单详情（异步操作） /** * @param refNum 参考号 * @param callBackIsOnMainThread 是否在主线程中回调 */ CILSDK.getBillByRefNumAsync(refNum, callBackIsOnMainThread, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 根据批次号获取当前批次下的订单详情（异步操作） /** * @param refNum 批次号 * @param callBackIsOnMainThread 是否在主线程中回调 */ CILSDK.getBillByBatchNumAsync(batchNum, callBackIsOnMainThread, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 获取账单列表 1. 默认获取三十天的账单列表 /** * 获取账单列表 异步 * * @param int page 从0开始 * @param int size 每页返回的条数 * @param int type 账单类型(TransConstants.CARD_BILL, TransConstants.QR_BILL, TransConstants.ALL_BILL) * */ CILSDK.getBillsAsync(page, size, @BillType int type, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { if (null != response && 0 == response.getStatus()) { //账单获取成功 Trans[] trans = response.getTxn(); //账单数据,字段详情见 Trans } } @Override public void onError(Parcelable p, Exception ex) { //账单获取出错 } }); 2. 获取指定区间的账单列表 /** * 获取账单列表 异步 * * @param page * @param size * @param startTime 查询订单开始时间，格式：yyyyMMdd * @param endTime 查询订单结束时间，格式：yyyyMMdd * @param type * @param callBackIsOnMainThread * @param listener * @return */ CILSDK.getBillsAsync(page, size, startTime, endTime, type, true, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 获取今日交易统计 /** * 获取今日交易统计 异步 * @param type 账单类型 * <ul> * <li>TransConstants.ALL_BILL:所有账单</li> * <li>TransConstants.CARD_BILL:银行卡账单</li> * <li>TransConstants.QR_BILL:扫码账单</li> * </ul> * */ CILSDK.getBillStatAsync(@BillType int type, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (null != response && 0 == response.getStatus()) { //今日交易统计获取成功 } } @Override public void onError(Parcelable p, Exception ex) { //今日交易统计获取出错 } }); SDK 的网络部分使用的是第三方库 okhttp ,以上账单接口分别还提供了相对应的同步接口 getBills 和 getBillStat 。 对于异步接口来说,都会返回一个 Call 对象,你可以在应用出错的时候调用 call.cancel() 取消这次请求,以免造成内存泄露。","text_tokens":["设计","consume","每页","，","时","段","批次","bill","所有","getprocessflag","具体","该笔","；","来说","final","收银","天","结束","trans","getbillstatasync","ul","正在","程中","码表","取消","processflag","为","外部","billtype","size","对象","指定","智能","outordernum","逻辑","这样","字","中断","通过",";",",","getbillstat","单号","=","cancel","非","null","这笔","sdk","还是","号","getstatus","传入","consumeqr","为准","凭证","建议","（","银行卡","提供","以免","最终","exception","在","确定","]","call","成功","方法","区间","一个","当","需要","应用","值","实际","方便","应答","判定","void","与否","类型","以","都","type","第三方","看","0","从","统计","getbills","后","或","：",".","/","交易","当前","同步","使用","位","qr","可","}","十天","30","all","1","onresult","应","信息","可以","账单","因为","相对","才能","@","内存","订单","。","response","列表","getbillbybatchnumasync","getbillbytracenum","getbillsasync","return","下","详情","callbackisonmainthread","最","okhttp","transconstants","三十天","失败","*","三十","int","银行","还","条数",")","见","处理","）","操作","返回","此次","[","表","parcelable","2","造成","onerror","接口","加入","出错","扫码","...","程","if","这次","了","li","中","endtime","第三","时候","param","是否","pos","交互","分别","确认","对于","和","&&","默认","时间","泄露","p","public","!","override","或是"," ","是","listener","cilsdk","refnum","09","状态","page","cilrequest","getbillbyrefnumasync","你","(","gettxn","new","根据","注意","{","的","三方","订单号","开始","_","依据","callback",">","'","标志","今日","多","异步","cilresponse","ex","yyyymmdd","网络",":","<","查询","starttime","收银员","tracenum","回调","进入","true","以上","参考","batchnum","具体来说","部分","数据","请求","格式","来","e","card","获取","主线","会","银员","库","码","调用"],"title":"Bill","title_tokens":["bill"]},{"location":"documentation/bluetooth/","text":"一、使用场景和流程 传统收银机需要连接讯联的智能 POS 进行收银，但是为了适应收银机上已有的一些业务系统，需要做到收银机唤起智能 POS， 同时接收来自收银机的一些参数，如金额，参考号等。待智能 POS 接收到请求并处理完毕之后，会立即将交易的处理结果返回给收银机。 需要下载风狐智能 POS 蓝牙版，才能具备串口唤起我们的应用功能，请扫描下方二维码，或 下载到本地 注：目前只支持新大陆 N900 智能 POS + 新大陆 N900 蓝牙底座 二、传输数据格式定义 //request 报文 (收银机 -> 智能 POS) { \"action\":\"CBANK\", //CBANK:银行卡消费, CQR:扫码消费, CANBANK:银行卡撤销, CANQR:扫码撤销, RETBANK:银行卡退货, RETQR:扫码退货, ORDER:订单查询 \"amount\":\"10.01\", //金额 \"extOrder\":\"1002016122912\", //外部订单号（可选） \"refNum\":\"361172435022\", //原交易参考号 \"revAuthCode\":\"012345\", //原交易授权码 \"batchNum\":\"000001\", //原交易批次号 \"traceNum\":\"000012\", //原交易凭证号 \"transDatetime\":\"1229\", //原交易日期(MMdd) \"page\":\"1\", //第几页（从1开始） \"size\":\"10\", //每页返回的条数 \"txnType\":\"QR\" //账单类型 CARD:银行卡账单, QR:扫码账单, ALL:银行卡和扫码账单 } //response 报文 (智能 POS -> 收银机) { \"status\":1, //状态 1 成功；0 失败； \"msg\":\"success\", //详细信息 \"data\":[ //数据 { //交易数据字段详情可见 javadoc \"additionalResData\": \"0102000010134001\",//附加响应数据 \"batchNum\": \"000001\", //批次号 \"billingAmt\": \"\", //持卡人扣帐金额 \"billingCurr\": \"\", //持卡人扣帐货币代码 \"cardBrand\": \"CUP\", //国际信用卡公司代码 \"cardNo\": \"6222042600001000\", //银行卡号(后续将会返回622204****1000形式) \"clearingDate\": \"0122\", //清算日期 \"localTransDate\": \"0122\", //受卡方所在地日期 \"localTransTime\": \"142139\", //受卡方所在地时间 \"merCode\": \"201605260000001\", //商户号 \"posInputStyle\": \"\", //服务点输入方式码 \"processflag\": \"0\", //交易处理标志 \"refNum\": \"022142445573\", //检索参考号 \"respCode\": \"00\", //应答码 \"revAuthCode\": \"007508\", //授权标识应答码 \"revFlag\": \"0\", //冲正标志 \"revInsCode\": \"0102000010134001\", //附加响应数据 \"scanCodeId\": \"\", //扫码号 \"termCode\": \"00000007\", //终端号 \"traceNum\": \"000037\", //凭证号 \"transAmt\": \"10.01\", //交易金额 \"transCode\": \"PER\", //交易类型码 \"transCurr\": \"156\", //交易货币代码 \"transDate\": \"20170122142141\", //原交易日期 \"transDatetime\": \"0122142139\", //受卡方所在地日期＋受卡方所在地时 \"transRate\": \"\", //持卡人扣帐汇率 \"merDiscount\":\"1.00\", //商家优惠金额 \"coupon\":\"0.01\" //支付宝/微信优惠金额 }, ... ] } 注意：respCode 应答码表可参见 交易应答码表V3 三、调试方法 将蓝牙底座和串口正确连接，并且将智能 POS 机上的蓝牙底座应用打开，找到底座蓝牙并且连接成功。然后就可以使用串口调试工具发送示例报文了。 四、交易报文示例 银行卡消费 //request { \"action\": \"CBANK\", \"amount\": \"10.01\", \"extOrder\":\"1002016122912\" } //response { \"data\": [ { \"additionalResData\": \"01020000 10134001 \", \"batchNum\": \"000001\", \"billingAmt\": \"\", \"billingCurr\": \"\", \"cardBrand\": \"CUP\", \"cardNo\": \"6222042600001000\", \"clearingDate\": \"0122\", \"localTransDate\": \"0122\", \"localTransTime\": \"142139\", \"merCode\": \"201605260000001\", \"posInputStyle\": \"\", \"processflag\": \"0\", \"refNum\": \"022142445573\", \"respCode\": \"00\", \"revAuthCode\": \"007508\", \"revFlag\": \"0\", \"revInsCode\": \"01020000 10134001 \", \"scanCodeId\": \"\", \"termCode\": \"00000007\", \"traceNum\": \"000037\", \"transAmt\": \"10.01\", \"transCode\": \"PER\", \"transCurr\": \"156\", \"transDate\": \"20170122142141\", \"transDatetime\": \"0122142139\", \"transRate\": \"\" } ], \"msg\": \"success\", \"status\": 1 } 银行卡撤销 //request { \"action\": \"CANBANK\", \"amount\": \"10.01\", \"traceNum\": \"000037\", \"extOrder\":\"1002016122912\" } //response { \"data\": [ { \"additionalResData\": \"01020000 10134001 \", \"batchNum\": \"000001\", \"billingAmt\": \"\", \"billingCurr\": \"\", \"cardBrand\": \"CUP\", \"cardNo\": \"6222042600001000\", \"clearingDate\": \"0122\", \"localTransDate\": \"0122\", \"localTransTime\": \"145536\", \"merCode\": \"201605260000001\", \"posInputStyle\": \"\", \"processflag\": \"0\", \"refNum\": \"022142445573\", \"respCode\": \"00\", \"revAuthCode\": \"007508\", \"revFlag\": \"0\", \"revInsCode\": \"01020000 10134001 \", \"scanCodeId\": \"\", \"termCode\": \"00000007\", \"traceNum\": \"000040\", \"transAmt\": \"10.01\", \"transCode\": \"PVR\", \"transCurr\": \"156\", \"transDate\": \"20170122145538\", \"transDatetime\": \"0122145536\", \"transRate\": \"\" } ], \"msg\": \"success\", \"status\": 1 } 银行卡退货 //request { \"action\": \"RETBANK\", \"amount\": \"10.01\", \"refNum\": \"022145445612\", \"transDatetime\": \"0122\", \"extOrder\":\"1002016122912\" } //response { \"data\": [ { \"additionalResData\": \"01020000 10134001 \", \"batchNum\": \"000001\", \"billingAmt\": \"\", \"billingCurr\": \"\", \"cardBrand\": \"CUP\", \"cardNo\": \"6222042600001000\", \"clearingDate\": \"0122\", \"localTransDate\": \"0122\", \"localTransTime\": \"150037\", \"merCode\": \"201605260000001\", \"posInputStyle\": \"\", \"processflag\": \"0\", \"refNum\": \"022145445612\", \"respCode\": \"00\", \"revAuthCode\": \"\", \"revFlag\": \"0\", \"revInsCode\": \"01020000 10134001 \", \"scanCodeId\": \"\", \"termCode\": \"00000007\", \"traceNum\": \"000042\", \"transAmt\": \"10.01\", \"transCode\": \"CTH\", \"transCurr\": \"156\", \"transDate\": \"20170122150039\", \"transDatetime\": \"0122150037\", \"transRate\": \"\" } ], \"msg\": \"success\", \"status\": 1 } 扫码消费 //request { \"action\": \"CQR\", \"amount\": \"0.01\", \"extOrder\":\"1002016122912\" } //response { \"data\": [ { \"additionalResData\": \"00000000 10134001 \", \"batchNum\": \"000001\", \"billingAmt\": \"\", \"billingCurr\": \"\", \"cardBrand\": \"ALP\", \"cardNo\": \"pho***@foxmail.com\", \"clearingDate\": \"\", \"localTransDate\": \"0122\", \"localTransTime\": \"145144\", \"merCode\": \"201605260000001\", \"posInputStyle\": \"040\", \"processflag\": \"0\", \"refNum\": \"022145445609\", \"respCode\": \"00\", \"revAuthCode\": \"\", \"revFlag\": \"0\", \"revInsCode\": \"00000000 10134001 \", \"revOrderNum\": \"2017012221001004480248605076\", \"scanCodeId\": \"E68890E58A9F\", \"termCode\": \"00000007\", \"traceNum\": \"000038\", \"transAmt\": \"0.01\", \"transCode\": \"BPA\", \"transCurr\": \"156\", \"transDate\": \"20170122145149\", \"transDatetime\": \"0122145144\", \"transRate\": \"\" } ], \"msg\": \"success\", \"status\": 1 } 扫码撤销 //request { \"action\": \"CANQR\", \"amount\": \"0.01\", \"traceNum\": \"000038\", \"extOrder\":\"1002016122912\" } //response { \"data\": [ { \"additionalResData\": \"00000000 10134001 \", \"batchNum\": \"000001\", \"billingAmt\": \"\", \"billingCurr\": \"\", \"cardBrand\": \"ALP\", \"cardNo\": \"pho***@foxmail.com\", \"clearingDate\": \"\", \"localTransDate\": \"0122\", \"localTransTime\": \"145411\", \"merCode\": \"201605260000001\", \"posInputStyle\": \"\", \"processflag\": \"0\", \"refNum\": \"022145445610\", \"respCode\": \"00\", \"revAuthCode\": \"\", \"revFlag\": \"0\", \"revInsCode\": \"00000000 10134001 \", \"revOrderNum\": \"2017012221001004480248605076\", \"scanCodeId\": \"E68890E58A9F\", \"termCode\": \"00000007\", \"traceNum\": \"000039\", \"transAmt\": \"0.01\", \"transCode\": \"BPA\", \"transCurr\": \"156\", \"transDate\": \"20170122145414\", \"transDatetime\": \"0122145411\", \"transRate\": \"\" } ], \"msg\": \"success\", \"status\": 1 } 扫码退货 //request { \"action\": \"RETQR\", \"amount\": \"0.01\", \"refNum\": \"022150445617\", \"transDatetime\": \"0122\", \"extOrder\":\"1002016122912\" } //response { \"data\": [ { \"additionalResData\": \"00000000 10134001 \", \"batchNum\": \"000001\", \"billingAmt\": \"\", \"billingCurr\": \"\", \"cardBrand\": \"ALP\", \"cardNo\": \"pho***@foxmail.com\", \"clearingDate\": \"\", \"localTransDate\": \"0122\", \"localTransTime\": \"150601\", \"merCode\": \"201605260000001\", \"posInputStyle\": \"\", \"processflag\": \"0\", \"refNum\": \"022150445618\", \"respCode\": \"00\", \"revAuthCode\": \"\", \"revFlag\": \"0\", \"revInsCode\": \"00000000 10134001 \", \"revOrderNum\": \"2017012221001004480248627853\", \"scanCodeId\": \"E68890E58A9F\", \"termCode\": \"00000007\", \"traceNum\": \"000044\", \"transAmt\": \"0.01\", \"transCode\": \"BPA\", \"transCurr\": \"156\", \"transDate\": \"20170122150605\", \"transDatetime\": \"0122150601\", \"transRate\": \"\" } ], \"msg\": \"success\", \"status\": 1 } 交易明细 //request { \"action\": \"ORDER\", \"page\": \"1\", \"size\": \"10\", \"txnType\": \"QR\" } //response { \"data\": [ { \"batchNum\": \"000001\", \"billingAmt\": \".01\", \"billingCurr\": \"156\", \"cardBrand\": \"ALP\", \"cardNo\": \"0000000000000000000\", \"insCode\": \"10134001\", \"merCode\": \"201605260000001\", \"processflag\": \"0\", \"refNum\": \"022150445618\", \"respCode\": \"00\", \"revAuthCode\": \" \", \"revFlag\": \"0\", \"revOrderNum\": \"2017012221001004480248627853\", \"termCode\": \"00000007\", \"traceNum\": \"000044\", \"transAmt\": \"0.01\", \"transCode\": \"BTH\", \"transCurr\": \"156\", \"transDate\": \"20170122\", \"transDatetime\": \"0122150601\", \"transRate\": \"30001000\" }, ... ], \"msg\": \"success\", \"status\": 1 } 会员卡（佰馏卡） //request { \"action\": \"VC_MEMBER\" } //response { \"extra\":{ \"amount\": \"100000\",//金额 \"balance\": \"10000\",//余额 \"points\": \"100\",//积分 \"cardNum\": \"0000000000000000000\",//卡号 \"requestType\": {}, \"response\": {},/消费返回信息 \"vcRespAggrRes\": {},//合计信息 \"vcRespInquiry\": {},//余额查询信息 \"originTransNum\": \"\"//原交易号 }, \"msg\": \"success\", \"status\": 1 } 五、错误码(TODO) 代码 意义 0 失败 1 成功 -1 请求为空 -11 金额格式不合法 -12 参数长度错误 -13 未知交易类型 -14 日期格式错误 -15 报文格式错误 -16 字段为空 -17 无权限 -2 设备被占用 六、Q&A (TODO) 1、为什么智能 POS 在有些界面接收到蓝牙发去的报文没任何反应呢？ 当 N900 处在刷卡，打印等情况时，设备会被占用，主要体现在刷卡界面，扫码界面等和打印凭条的时候， 所以当智能 POS 应用处于以下界面的时候，会不接收蓝牙发过来的交易请求： (为不和用户直接操作 POS 冲突，建议当应用处于主界面的时候发送请求) 扫码界面、等待刷卡界面、密码键盘界面、电子签名界面、交易成功界面、交易失败界面、订单详情界面、 设置界面、会员卡所有的界面、撤销确认界面、扫码退货界面、余额查询界面、DCC转EDC界面、收取小费界面、 小费撤销界面、收取小费确认界面、撤销小费确认界面、结算详情界面、历史结算详情界面、记账结算界面、 记账明细界面、现金结算界面、现金历史结算界面","text_tokens":["022145445610","现金结算","10134001","cup","佰馏卡","0.01","然后","外部","讯联","msg","data","定义","20170122150039","转",",","将","+","com","设备","报文","银行卡","、","四","]","方法","action","需要","类型","canbank","txntype","extorder","150037","被","数据格式","bpa","请","145144","字段","误码","二维码","处理结果","什么","000037","账单","才能","第几","已有","transcurr","发过来","消费","详情","00","新大陆","12","三","清算","给","处理","cth","支持","20170122","00000000","详细","termcode","了","选","但是","022150445618","todo","确认","立即","billingamt","vcrespaggrres","会员","pvr","所以","呢"," ","revinscode","refnum","1002016122912","业务","request","状态","01","并","cbank","上","0122145144","交易类型","balance","就","revauthcode","_","revordernum","20170122142141",">","用户","主","下方","0102000010134001","vc","10000","150601",":","未知","查询","没","主要","参考","20170122145414","场景","数据字","30001000","q","第几页","做到","201605260000001","requesttype","每页","localtransdate","时","键盘","；","设置","2017012221001004480248627853","amount","007508","revflag","码表","到","并且","100","success","所在","收取","points","传统","将会","合法","目前","本地","单号","＋","？","retbank","transamt","origintransnum","000044","同时","建议","622204","（","per","无","10","连接","a","0","retqr","从","支付宝","报文格式","响应","持卡人","cardnum","使用","mmdd","v3","qr","}","所在地","1","01020000","merdiscount","-","000040","@","10.01","示例","受卡方","。","response","coupon","结果","17","冲突","失败","*","大陆","条数","billingcurr","服务","canqr","[","传输","扫码","适应","几页","pos","意义","respcode","之后","收银机","输入","transdate","过来","e68890e58a9f","等","000042","标识","功能","transrate","调试","142139","注意","处理完毕","退货","156","订单号","为了","风狐","扣","数据","请求","000001","附加","冲正","刷卡","串口","card","信用","会","\"","体现","可以","码","工具","，","posinputstyle","批次","收银","待","具备","下载","14","发过","找到","汇率","processflag","为","智能","卡号","为空","蓝牙","可见","extra","为什么","完毕","localtranstime","二维","100000","当","应用","系统","应答","长度","以下","点","注","0000000000000000000","或","/",".","交易","一","会员卡","可","金额","积分","优惠","五","0122","形式",")","授权","终端","代码","11","我们","检索","...","电子","日期","卡人","000038","javadoc","时候","唤起","和","二","反应","时间","361172435022","版","scancodeid","alp","page","clearingdate","000039","只","(","错误","帐","新大","记账","022145445609","错误码","空","不","145536","处于","持卡","n900","信用卡","参见","界面","&","支付","foxmail","tracenum","transcode","mercode","详细信息","公司","dcc","batchnum","六","格式","status","现金","022150445617","1000","货币","vcrespinquiry","结算","00000007","member","段","所有","情况","原","如","transdatetime","size","cardbrand","占用","1229","余额","0122150037","签名","order","历史","机上","additionalresdata","正确","15","号","商户","发去","凭证","6222042600001000","微信","inscode","在","接收","成功","0122142139","000012","1.00","有些","pho","国际","：","13","参数","20170122150605","任何","流程","撤销","cqr","all","一些","信息","底座","订单","电子签名","处在","发送","012345","理完","银行","）","操作","返回","2","后续","等待","040","16","0122145536","明细","合计","0122145411","edc","小费","扫描","145411","2017012221001004480248605076","直接","{","的","0122150601","密码","凭条","开始","标志","打开","权限","cardno","20170122145538","进行","商家","022145445612","来自","022142445573","20170122145149","方式","bth","打印"],"title":"2. BLUETOOTH API","title_tokens":["bluetooth"," ",".","2","api"]},{"location":"documentation/card/","text":"a、银行卡交易 由于银行卡交易逻辑有点复杂,讯联提供了一个 BaseCardActivity 基础类,你只需要继承这个类便可以做银行卡类的交易了。具体使用方法可以见 demo 里的 CommonCardHandlerActivity 类。下面给个大概说明: public class CommonCardHandlerActivity extends BaseCardActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //... } /** * 必须传入金额 * * @return */ public String getAmount() { //在这里传入金额 } /** * 此方法为控制sdk内部是否开启DCC交易逻辑（sdk2.4.1版本及以上支持该方法） * *@return 需要进行DCC交易时，返回true，否则返回false */ public boolean isOpenDcc() { //只有刷卡消费和刷卡预授权才支持DCC交易 //如果接入方无需支持DCC，则此方法返回false即可 return false; } /** * 读卡的结果（sdk2.4.1版本及以上新增RateInfo参数，返回DCC读卡流程中进行汇率查询的结果） * * @param isSuccess 是否成功 * @param cardType 卡片种类(-1(unknow) 1(msc) 2(ic) 3(nfc) 4(scancode) 5(other)) * @param cardInfo 读取卡片信息 * @param rateInfo 汇率信息 */ public void cardReaderHandler(boolean isSuccess, @CardType.Type int cardType, CardInfo cardInfo, RateInfo rateInfo){ //读卡成功后才发起交易 if (!isSuccess || cardInfo == null) { Toast.makeText(getApplicationContext(), \"读卡失败\", Toast.LENGTH_SHORT).show(); initCardEvent(); return; } //1. 根据银联85号文规定，智能终端需上送经度，纬度，坐标系信息到卡组织 CILRequest request = new CILRequest(); request.setLongitude(121.600228);//设置经度 request.setLatitude(31.180606);//设置纬度 request.setCoordinates(\"GCJ02\");//设置坐标系 //关于坐标系，国内一些常用第三方取值：百度（BD09），高德、腾讯（GCJ02），GPS（WGS84）。 //一般第三方定位SDK都能从定位后返回的位置信息类中取到，详细可查看各第三方接入文档。 //2.如果接入方需要进行DCC交易，需将汇率信息填入request中，否则无需处理 CILRequest request = new CILRequest(); ... if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//设置扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//设置扣账币种 request.setTransRate(rateInfo.getTransRate());//设置交易汇率 request.setBatchNum(rateInfo.getBatchNum());//设置汇率请求批次号 request.setTraceNum(rateInfo.getTraceNum());//设置汇率请求流水号 } //3. 在这里面发送银行卡相关的交易(如消费、消费撤销、退货、预授权、预授权撤销、预授权完成、预授权完成撤销、余额查询) //CILSDK.consume(request, cardType, new Callback<CILResponse>() //消费 } /** * 显示读卡时的缓冲页面 */ public void waitLoadingShow(){ } /** * 取消读卡时的缓冲页面 */ public void waitLoadingDismiss(){ } /** * 读卡失败 */ public void cardHandlerError(Exception e){ } } 注意: 调用银行卡类交易接口时，需要传入CILRequest以及CardType，且所有接口中CILRequest均需要传入以下信息： /** * @param: request:请求信息 * @param: cardType:卡片类型 */ request.setAmount(amount);//消费金额 /** * 刷卡获取的cardInfo信息 */ request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPinEmv(cardInfo.getPinBins());//卡bin request.setCardSequenceNumber(cardInfo.getSequenceSerialNum());//卡片序列号 request.setField55(cardInfo.getField55());//55域信息 request.setSecondTrack(cardInfo.getTrack2());//二磁道信息 request.setOrderId(orderId);//可选参数。（消费、退货、预授权、预授权完成、扫码下单、扫码退货） request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权） 1、消费 消费接口 request必须包含参数: CILSDK.consume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 2、撤销 撤销接口 request必须包含参数: /** * 撤销接口除基础信息外， * 还需要原交易信息 */ request.setReferenceNumber(transaction.getRefNum());//原交易参考号 request.setRevAuthCode(transaction.getRevAuthCode());//原交易授权码 request.setBatchNum(transaction.getBatchNum());//原交易批次号 request.setTraceNum(transaction.getTraceNum());//原交易凭证号 CILSDK.revokeConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 3、退货 退货接口 request必须包含参数: /** * 退货接口除基础信息外 * 还需要原交易信息 */ request.setReferenceNumber(referenceNumber); request.setTransDatetime(tradeDate); CILSDK.returnConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 4、余额查询 余额查询接口 request必须包含参数: CILSDK.checkBalance(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 5、卡预授权 预授权接口 request必须包含参数: request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权） CILSDK.preAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 6、卡预授权撤销 预授权撤销接口 request必须包含参数: /** * 预授权撤销接口除基础信息外 * 还需要原预授权交易信息 */ request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.revokePreAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 7、卡预授权完成 预授权完成接口 request必须包含参数: /** * 预授权完成接口除基础信息外 * 还需要原预授权交易信息 */ request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.preAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 8、卡预授权完成撤销 预授权完成撤销接口 request必须包含参数: /** * 预授权完成撤销接口除基础信息外 * 还需要原预授权完成交易信息 */ request.setReferenceNumber(refNum);//原预授权完成交易参考号 request.setRevAuthCode(authCode);//原预授权完成交易授权码 request.setTraceNum(traceNum);//原预授权完成交易凭证号 request.setBatchNum(batchNum);//原预授权完成交易批次号 request.setTransDatetime(originalTradeDate);//原预授权完成交易日期 CILSDK.revokePreAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 9、DCC转EDC 当交易卡片为外卡时，消费类（消费、预授权完成）交易可选择进行DCC转EDC。 CILRequest request = new CILRequest(); request.setCardNum(cardNum);//卡号 request.setTransDatetime(datetime);//原交易时间 request.setAmount(amount);//原交易金额 request.setBillingAmt(biilingAmt);//原扣币金额 request.setReferenceNumber(refNum);//原交易参考号 request.setRevAuthCode(revAuthCode);//原交易授权码 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证号 request.setTransCurr(transCurr);//原交易币种 request.setBillingCurr(billingCurr);//原交易扣款币种 CILSDK.dccToEdc(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable p, Exception e) { ... } }); 交易结果字段说明 字段 类型 含义 备注 备注 additionalResData String 受理方标识码 无 afterTransCode String 原交易类型 无 batchNum String 批次号 无 billingAmt String 持卡人扣帐金额 无 billingCurr String 持卡人扣帐货币代码符号，三位字母 例如USD billingCurrNum String 持卡人扣帐货币代码,三位数字 无 cardBrand String 国际信用卡公司代码 无 cardNo String 银行卡号 无 cardType String 刷卡方式 无 cashierName String 收银员 无 cashierNum String 收银员号 无 clearingDate String 清算日期 无 compInfoA1 String 签购单收单行 无 compInfoA2 String 签购单商户号 无 compInfoA3 String 签购单终端号 无 compInfoA4 String markup 无 compInfoA6 String 借贷记标识 无 compInfoA7 String 营销信息 无 compInfoA8 String 二维码信息 无 coupon String 支付宝/微信优惠金额 无 field55 String IC卡交易的TAG信息 无 insCode String 受理方标识码 无 localTransDate String 受卡方所在地日期 无 localTransTime String 受卡方所在地时间 无 merCode String 受卡方标识码（商户号） 无 merDiscount String 商家优惠金额 无 originTraceNum String 原交易凭证号 无 outOrderNum String 外部订单号 无 posInputStyle String 服务点输入方式码 无 processflag String 扫码支付09状态的交易是否成功 附件表1 refNum String 检索参考号 无 respCode String 应答码 \"00\"表示成功 revAuthCode String 授权标识应答码 无 revInsCode String 附加响应数据 无 revOrderNum String 自定义域，用于扫码支付业务。 无 scanCodeId String 扫码号 无 termCode String 终端号 无 traceNum String 受卡方系统跟踪号 合作方交易流水 transAmt String 交易金额 无 transCode String 交易类型码 无 transCurr String 交易货币代码 无 transDate String 原交易日期 无 transDatetime String 受卡方所在地日期＋受卡方所在地时 无 transRate String 持卡人扣帐汇率 无","text_tokens":["方","other","checkbalance","具体","便","rateinfo","bundle","坐标系","且","外部","讯联","定义","转","用于",",","gps","将","查看","附件","null","setreferencenumber","发起","gcj02","下面","银行卡","、","方法","需要","有点","类型","preauthcomplete","setbillingamt","第三方","settransrate","isopendcc","签购","getcardexpirationdate","需上","三位","二维码","常用","流水号","transcurr","5","记","消费","getpinbins","00","清算","跟踪","坐标","给","处理","支持","原预","super","才","详细","termcode","显示","了","是否","选","compinfoa7","billingamt","除","自","public","!","override","getapplicationcontext"," ","规定","扣款","revinscode","refnum","位置","09","业务","request","状态","外","上","new","交易类型","读取","选择","cardreaderhandler","三方","revauthcode","_","revordernum","只有",">","cardtype","包含",":","借贷","<","有效期","查询","true","参考","cardinfo","类中取","取消","commoncardhandleractivity","必选","银员","localtransdate","时","说明","设置","returnconsume","做","amount","原扣币","开启","到","消费类","所在","setrevauthcode","定义域","无需","单号","＋","setlatitude","序列号","transamt","传入","dcctoedc","（","控制","origintracenum","4","效期","无","protected","void","a","预","从","biilingamt","支付宝","如果","响应","持卡人","否则","settracenum","cardnum","使用","}","所在地","1","合作方","merdiscount","getamount","-","@","受卡方","。","符号","coupon","结果","return","revokeconsume","此","复杂","9","*","失败","setcardsequencenumber","billingcurr","maketext","见","国内","服务","内部","setbillingcurr","纬度","接口","文档","扫码","setcardnumb","if","msc","第三","号文","setorderid","respcode","scancode","getfield55","单收","输入","transdate","缓冲","basecardactivity","issuccess","标识","cashiername","送","setamount","compinfoa3","transrate","页面","营销","根据","savedinstancestate","注意","退货","订单号","nfc","下单","preauth","settransdatetime","收银员","高德","waitloadingshow","以上","读卡","referencenumber","扣","show","数据","3","请求","usd","附加","revokepreauth","能","刷卡","信用","orderid","\"","可以","调用","码","consume","序列","，","aftertranscode","posinputstyle","批次","字母","class","磁道","length","扣账","收银","流水","具备","getsequenceserialnum","取值","汇率","processflag","为","setfield55","智能","outordernum","settranscurr","7","卡号","compinfoa8","boolean","卡","initcardevent","表示","能力","提供","compinfoa6","85","localtranstime","二维","一个","当","系统","setpinemv","继承","应答","string","定位","以下","都","31.180606","均","setlongitude","点","域","由于","关于","各","/",".","交易","必须","可","金额","这里","及","onresult","组织","cashiernum","优惠","有效","需",")","授权","终端","代码","gettransrate","腾讯","parcelable","经度","表","检索","false","55","...","日期","卡人","银联","setcardexpirationdate","setcoordinates","getbatchnum","field55","中","param","例如","合作","和","二","compinfoa2","时间","该","authcode","setcardnum","scancodeid","cilsdk","unknow","里面","单行","ic卡","clearingdate","getcardnumber","cilrequest","你","sdk2.4","只","(","cardhandlererror","markup","单","帐","toast","billingcurrnum","基础","持卡","信用卡","cilresponse","waitloadingdismiss","支付","tracenum","transcode","mercode","compinfoa4","公司","dcc","batchnum","大概","121.600228","新增","setbatchnum","则","6","一般","获取","getbillingamt","货币","e","币种","段","所有","setlocation","gettrack2","个","原","如","transdatetime","cardbrand","余额","里","逻辑","字",";","bin","additionalresdata","=","sdk","填入","号","商户","tag","凭证","微信","这","inscode","exception","在","成功","oncreate","getrefnum","百度","type","后","国际","：","参数","流程","撤销","transaction","一些","信息","extends","getbillingcurr","订单","8","发送","外卡","demo","int","银行","还","）","返回","数字","即可","2","onerror","bd09","gettracenum","相关","受理","有","|","ic","卡预","edc","p","标识码","compinfoa1","wgs84","location","以及","{","的","datetime","版本","short","callback","cardno","接入","完成","进行","revokepreauthcomplete","setsecondtrack","originaltradedate","商家","这个","卡片","类","含义","备注","tradedate","方式","种类","getrevauthcode"],"title":"Card","title_tokens":["card"]},{"location":"documentation/intergration/","text":"为了方便快速接入，提供了demo供接入参考 demo下载 本 SDK 已使用 jcenter 托管，配置如下 gradle: implementation 'com.cardinfolink.smart.pos:PosSDK:2.5.2' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>PosSDK</artifactId> <version>2.5.2</version> <type>pom</type> </dependency> 如果想使用讯联集成的结算UI和逻辑，请配置 gradle: implementation 'com.cardinfolink.smart.pos:SDK-ZaiHui:1.1.1' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>SDK-ZaiHui</artifactId> <version>1.1.1</version> <type>pom</type> </dependency>","text_tokens":["demo","，","gradle","结算","2","方便","的","ui","供","zaihui","已","type","本","托管","下载","implementation",">","'","possdk","/",".","接入","如果","讯联","了","如下",":","快速","<","使用","groupid","为了","逻辑","集成","cardinfolink","pos","请","1","配置","参考","和","pom","-","想","maven","version","sdk","jcenter"," ","smart","com","or","1.1","dependency","提供","2.5","artifactid"],"title":"Intergration","title_tokens":["intergration"]},{"location":"documentation/otherSetting/","text":"其他设置 考虑到使用 SDK 的时候可能还会有其他需求,比如 获取 POS 机的 SN 号 、 设置密钥索引 等,在这里,我们也提供了一部分接口。 获取 SDK 版本 //版本名 String versionName = CILSDK.VERSION_NAME; //版本号 int versionCode = CILSDK.VERSION_CODE; 获取 SN 号 //SN号 String snCode = CILSDK.getDeviceSN(); 设置流水号 //serialNum范围：1~999999 boolean isSuccess = CILSDK.setSerialNum(int serialNum); 获取流水号 //序列号 int serialNum = CILSDK.getSerialNum(); 设置批次号 //batchNum范围：1~999999 boolean isSuccess = CILSDK.setBatchNum(int batchNum); 获取批次号 //批次号 int batchNum = CILSDK.getBatchNum(); 设置联迪密钥区 //1-15的设值范围 CILSDK.setTingA8KeyIndex(2); 设置密钥索引 //分别对应MAIN MAC PIN MES //1-255的设值范围 //可以使用下方提供数值,也可以根据自身程序设值 CILSDK.setTingKeyIndex(4,101,10,150); 以上两个方法请在连接刷卡器(CILSDK.connect)之前使用 工具类 CILPayUtil /** * 将respCode翻译成对应中文解释 */ CILPayUtil.translate(context, respCode)); /** * 将Trans类中的transCode翻译成打印所需的对象 */ CILPayUtil.getFormatTransCode(transCode); /** * 根据billingCurr判断交易是否为外卡类的DCC交易 */ CILPayUtil.isDCCPay(billingCurr); /** * 判断交易是否成功 */ CILPayUtil.isTransSuccess(trans); /** * 根据Trans类中的transCode判断交易是否属于扫码类交易 */ CILPayUtil.isQrPay(transCode); ReceiptFormatUtils /** * 根据Trans类中的TransCode翻译成对应的中文解释 */ ReceiptFormatUtils.getTransType(transCode); /** * 将明文的卡号修改为\"前六后四中间为四个*\"的样式 */ ReceiptFormatUtils.handleCardNum(cardNum); 许可证 Copyright (c) 2016 cardinfolink.com JAVADOC java document 详情见 javadoc","text_tokens":["工具","序列","刷卡器","一部分","批次","name","设置","类中","101","流水","trans","receiptformatutils","versioncode","为","到","对象","cilpayutil","明文","translate",";",",","connect","将","中间","version","=","settingkeyindex","解释","卡号","sdk","序列号","号","15","boolean","com","versionname","提供","、","在","serialnum","~","4","四","成功","方法","copyright","10","isqrpay","比如","设值","string","连接","document","样式","gettranstype","判断","翻译成","/",".","：","isdccpay","索引","交易","sncode","请","使用","sn","cardnum","1","这里","译成","-","流水号","翻译","main","255","。","详情","handlecardnum","java","mes","所","外卡","需求","密钥","*","需","int","对应","billingcurr","2016","可能",")","见","getserialnum","我们","2","许可证","自身","一部","四个","数值","名","接口","code","扫码","有","了","getbatchnum","javadoc","时候","区","是否","修改","pos","分别","两个","respcode","还会","c","mac","机","其他","等","istranssuccess"," ","issuccess","cilsdk","setserialnum","版本号","也","许可","联迪","(","getdevicesn","根据","的","settinga8keyindex","之前","getformattranscode","考虑","_","150","版本","下方","context","程序","前六后","属于","cardinfolink","transcode","以上","dcc","batchnum","部分","类","范围","中文","刷卡","setbatchnum","999999","获取","pin","\"","可以","打印"],"title":"otherSetting","title_tokens":["othersetting"]},{"location":"documentation/print/","text":"打印 本模块可用于根据交易信息打印所需的消费票据。接口不仅提供了一套固定格式的小票样式，而且还可以根据需要自定义打印样式。 主要功能包括小票打印、二维码打印、条形码打印以及图片打印。 特别注意: 中国人民银行和中国银联为了规范市场上的POS机终端，要求终端打印的签购单必须合乎规范，规范内容包括必须打印的字段与正确的字段内容。 签购单规范详情见 签购单规范 打印银行卡类交易、扫码类交易小票 /** trans 交易信息,Trans类型 * lineBreak 小票结尾需要走纸换行的行数，int类型 * formatTransCode @FormatTransCode String类型，小票的交易类型 * kind @ReceiptSubtitle int类型，小票的子标题，判断是商户联或者是客户联 * isForeignTrans 是否是外卡类交易 * bitmap logo图标，没有直接传null */ CILSDK.printKindsReceipts(trans,lineBreak,formatTransCode, kind, isForeignTrans, bitmap, new Callback<PrinterResult>(){ @Override public void onResult(PrinterResult response) { if (null ！= printerResult && !\"打印成功\".equals(printerResult.toString())) { //打印成功 } } @Override public void onError(Parcelable cilRequest, Exception e) { //打印失败 } }); 打印结算小票 /** * 打印结算小票 * * transSettles 结算信息List * transDatetime 结算时间 * lineBreak 打印结尾换行数 * formatTransCode 结算类型；TransConstants.TRANS_SETTLE_DETAILS：结算详情小票；TransConstants.TRANS_SETTLE_TOTAL：结算统计小票 * callback 回调 */ CILSDK.printSettleReceipts(transSettles, transDatetime,batchNum, lineBreak, formatTransCode, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 自定义打印 注意：使用自定义打印方法时，若打印内容超过2000个字符，请使用分段打印方式，否则可能出现DeviceRTException /** * 根据二进制数据打印(根据打印规范用户自定义打印小票样式) * * buffer 打印内容 * lineBreak 换行数 * callback 回调 */ CILSDK.printBufferReceipt(buffer, lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印二维码 /** * 打印二维码 * * qrCode 二维码内容 * position 打印位置 0:左对齐；1居中；2：右对齐 * width 二维码宽度 * callback 回调 * */ CILSDK.printQRCode(qrCode,position,width,lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印条形码 /** * 打印条形码 * * barCode 条形码数字 * position 条形码位置 0:左对齐；1居中；2：右对齐 * lineBreak 换行数 * callback 回调 */ CILSDK.printBarCode(String barCode, int position, int lineBreak, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印图片 /** * 打印图片 * * bitmap 图片Bitmap * lineBreak 换行数 * offset 偏移量 * callback 回调 * */ CILSDK.printImage(bitmap, lineBreak, offset, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } });","text_tokens":["，","结算","时","段","传","logo","自定","换行","；","printbarcode","包括","trans","本","市场","内容","对齐","右","transdatetime","结尾","buffer","定义","字","用于",";",",","transsettles","要求","正确","=","偏移","形码","null","devicertexception","barcode","规范市场","客户","formattranscode","商户","中国人民银行","进制","二进制","银行卡","提供","若","、","exception","二维","成功","方法","需要","类型","string","void","一套","样式","total","0","统计","details","判断","/",".","：","签购","交易","条形","必须","否则","请","使用","居中","可","联","}","kind","小票","tostring","1","onresult","二维码","出现","信息","@","自定义","而且","offset","。","合乎","response","position","消费","详情","宽度","外卡","所","transconstants","*","需","失败","int","图标","还","银行","可能",")","中国银联","见","终端","是否是","字符","数字","parcelable","2","行数","onerror","result","接口","扫码","printkindsreceipts","分段","银联","settle","与","if","没有","了","国人","是否","固定","pos","特别","和","&&","偏移量","模块","时间","qrcode","条形码","标题","public","!","机","printerresult","override","人民"," ","是","cilsdk","位置","功能","cilrequest","左","receiptsubtitle","equals","(","直接","上","图片","以及","单","根据","注意","交易类型","的","new","票据","{","！","linebreak","bitmap","_","printbufferreceipt","走纸","或者","callback",">","用户","超过","printimage",":","isforeigntrans","<","为了","子标题","回调","主要","规范","batchnum","width","不仅","类","个字符","printsettlereceipts","数据","list","格式","数","e","方式","printqrcode","中国","\"","2000","可以","打印"],"title":"Print","title_tokens":["print"]},{"location":"documentation/quik/","text":"快速接入 为了方便快速接入，提供了demo供接入参考 demo下载 本 SDK 已使用 jcenter 托管，配置如下 gradle: implementation 'com.cardinfolink.smart.pos:PosSDK:2.5.2' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>PosSDK</artifactId> <version>2.5.2</version> <type>pom</type> </dependency> 如果想使用讯联集成的结算UI和逻辑，请配置 gradle: implementation 'com.cardinfolink.smart.pos:SDK-ZaiHui:1.1.1' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>SDK-ZaiHui</artifactId> <version>1.1.1</version> <type>pom</type> </dependency> 激活POS机 完整的激活环节分为三步，分别是：激活，终端参数下载，终端密钥下载，三步都成功，表示激活成功，激活成功之后才能正常使用后面的交易流程。 graph LR 激活--success-->参数下载 参数下载--success-->密钥下载 激活 a、新激活流程（推荐） 根据用户反馈，为了简化激活流程，我们新增了激活码的方式激活，当你拿到 POS 机器之后，我们会为这个商户发放激活码，一个激活码只可以激活一台 POS 机。 建议先调用 根据激活码获取商户信息接口: （返回商户名商户号终端号等信息），确认信息无误后，在调用激活码激活接口激活。 ``` graph LR 获取商户信息--success-->激活 激活--success-->参数下载 参数下载--success-->密钥下载 > 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。 //authCode 激活码（建议用扫码的方式得到激活码，避免让用户手输） CILSDK.activeWithCode(authCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败，失败原因见 cilResponse.getMessage() } } @Override public void onError(Parcelable cilRequest, Exception e) { //激活出错 } }); * b、旧激活流程 第一次使用智能 POS 终端的时候,需要使用讯联下发的商户号（merCode） 和终端号（termCode）激活 graph LR 激活--success-->参数下载 参数下载--success-->密钥下载 > 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。推荐APP本身能够保持设备是否已经激活标志 //merCode 讯联下发的商户号 //termCode 讯联下发的终端号 CILSDK.active(merCode, termCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败 } } @Override public void onError(Parcelable p, Exception e) { //激活出错 } }); <span id=\"load_merInfo\" style=\"font-size:20px;color:red\" >注意:</span><br/> >根据激活码获取商户详情接口： CILSDK.getMerchantInfo(HashUtils.encryptActiveCode(authCode), true, new Callback () { @Override public void onResult(CILResponse cilResponse) { //success //you will get merName,merCode,termCode } @Override public void onError(Parcelable cilRequest, Exception e) { //failed } }); **终端参数下载** 激活成功之后,你的应用还需要下载一些交易时使用的参数,比如`交易地址和端口`、`交易超时时间`、`终端支持的功能`、`TPDU` 等, 在你拿到 POS 终端之前,这些参数都会在讯联后台已经配置好,全部参数见 `CILResponse.Info` 返回值。下载成功之后 SKD 会 以json字符串的形式保存这些参数到 `SharedPreference` (请不要擅自改动这些参数值,以免导致交易失败) 。当然,在 `onResult` 中也会返回,你也可以自己选择性保存一些参数。另外, SDK 保存在 SharedPreference 里的值会提供接口 `CILSDK.getSystemParams()` 获取。 > 注意：正常情况下，此方法只需执行成功一次，但是后台参数配置可能会有改动，APP本身需要调用预留功能调用此方法 //merCode 讯联下发的商户号 激活成功之后可以确定商户号 //termCode 讯联下发的终端号 激活成功之后可以确定终端号 CILSDK.downloadParams(merCode, termCode, new com.cardinfolink.pos.listener.Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) { //参数下载成功,具体返回的参数见 response.Info } else { //参数下载错误 } } @Override public void onError(Parcelable p, Exception e) { //下载出错 } }); **终端密钥下载** 终端密钥下载只需要成功执行一次就可以,成功下载的密钥会被转载到POS硬件模块里面,后面就不需要再次调用了,建议你的应用可以在成功下载密钥之后持久化一个标志位, 下次进入应用就不再去下载密钥了。整个过程可能会需要1~2分钟左右(依赖当前的网络状况),会经历以下步骤: > 请求讯联网关 RSA -> 装载 RSA -> 请求主密钥 -> 装载主密钥 -> 启用主密钥 -> 请求工作密钥(签到) -> 装载工作密钥 -> 下载 AID -> 装载 AID -> 下载 IC 公钥 -> 装载 IC 公钥。 建议APP本身存储设备是否已经初始化方法标志。 >注意：此方法一般只需要安装后成功调用一次即可。但银行交互密钥有可能会更新，APP本身需要调用预留功能调用此方法 CILSDK.downloadParamsWithProgress(new ProgressCallback<CILResponse>() { @Override public void onProgressUpdate(int progress) { //progress下载密钥的进度 } @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) //密钥下载成功。在这里可以持久化一个标志位 } @Override public void onError(Parcelable p, Exception e) { //下载密钥出错 } }); ### **签到** 签到其实也就是更新工作密钥的一个过程 (`下载工作密钥+装载工作密钥` ),讯联网关平台要求应用需要每天签到一次。 CILSDK.signIn(new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { //签到成功 } @Override public void onError(Parcelable cilRequest, Exception e) { //签到出错 } }); ### **银行卡交易** 由于银行卡交易逻辑有点复杂,讯联提供了一个 `BaseCardActivity` 基础类,你只需要继承这个类便可以做银行卡类的交易了。具体使用方法可以见 demo 里的 `CommonCardHandlerActivity` 类。下面给个大概说明: ```java public class CommonCardHandlerActivity extends BaseCardActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //... } /** * 必须传入金额 * * @return */ public String getAmount() { //在这里传入金额 } /** * 此方法为控制sdk内部是否开启DCC交易逻辑（sdk2.4.1版本及以上支持该方法） * *@return 需要进行DCC交易时，返回true，否则返回false */ public boolean isOpenDcc() { //如有DCC需求，因只有刷卡消费和刷卡预授权才支持DCC交易，此方法只需要在这两种交易类型返回true //如果接入方无需支持DCC，则此方法返回false即可 return false; } /** * 读卡的结果（sdk2.4.1版本及以上新增RateInfo参数，返回DCC读卡流程中进行汇率查询的结果） * * @param isSuccess 是否成功 * @param cardType 卡片种类(-1(unknow) 1(msc) 2(ic) 3(nfc) 4(scancode) 5(other)) * @param cardInfo 读取卡片信息 * @param rateInfo 汇率信息 */ public void cardReaderHandler(boolean isSuccess, @CardType.Type int cardType, CardInfo cardInfo, RateInfo rateInfo){ //读卡成功后才发起交易 if (!isSuccess || cardInfo == null) { Toast.makeText(getApplicationContext(), \"读卡失败\", Toast.LENGTH_SHORT).show(); initCardEvent(); return; } //1. 根据银联85号文规定，智能终端在消费和预授权完成交易需上送经度，纬度，坐标系信息到卡组织 CILRequest request = new CILRequest(); request.setLongitude(121.600228);//设置经度 request.setLatitude(31.180606);//设置纬度 request.setCoordinates(\"GCJ02\");//设置坐标系 //关于坐标系，国内一些常用第三方取值：百度（BD09），高德、腾讯（GCJ02），GPS（WGS84）。 //一般第三方定位SDK都能从定位后返回的位置信息类中取到，详细可查看各第三方接入文档。 //2.如果接入方需要进行DCC交易，在消费和预授权完成交易中需将汇率信息填入request中，否则无需处理 CILRequest request = new CILRequest(); ... if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//设置扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//设置扣账币种 request.setTransRate(rateInfo.getTransRate());//设置交易汇率 request.setBatchNum(rateInfo.getBatchNum());//设置汇率请求批次号 request.setTraceNum(rateInfo.getTraceNum());//设置汇率请求流水号 } //3. 在这里面发送银行卡相关的交易(如消费、消费撤销、退货、预授权、预授权撤销、预授权完成、预授权完成撤销、余额查询) //CILSDK.consume(request, cardType, new Callback<CILResponse>() //消费 } /** * 自定义读卡时的缓冲页面 */ public void waitLoadingShow(){ } /** * 取消读卡时的缓冲页面 */ public void waitLoadingDismiss(){ } /** * 读卡失败 */ public void cardHandlerError(Exception e){ } } 注意: 调用银行卡类交易接口时，需要传入CILRequest以及CardType，且所有接口中CILRequest均需要传入以下信息： CILRequest request = new CILRequest(); request.setAmount(amount);//消费金额 /** * 复写的刷卡回调方法中获取到的cardInfo信息 */ request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPinEmv(cardInfo.getPinBins());//卡bin request.setCardSequenceNumber(cardInfo.getSequenceSerialNum());//卡片序列号 request.setField55(cardInfo.getField55());//55域信息 request.setSecondTrack(cardInfo.getTrack2());//二磁道信息 request.setOrderId(orderId);//可选参数。（消费、退货、预授权、预授权完成、扫码下单、扫码退货） request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权完成） 1、消费 消费接口 request必须包含参数: //除了request必须包含的参数外，还需要以下参数 //复写的刷卡回调的方法中会返回汇率信息 if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//持卡人扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//持卡人扣账货币代码 request.setTransRate(rateInfo.getTransRate());//交易汇率 request.setBatchNum(rateInfo.getBatchNum());//汇率查询批次号 request.setTraceNum(rateInfo.getTraceNum());//汇率查询流水号 } //地理位置信息，需要调用方自行获取传入sdk request.setLongitude(location.getLongitude());//经度 request.setLatitude(location.getLatitude());//纬度 request.setCoordinates(location.getCoordinates());//坐标系 /** * 刷卡消费 * * @param request 请求参数 * @param cardType 卡片类型 CardType.MSC_CARD, CardType.IC_CARD, CardType.NFC_CARD... */ CILSDK.consume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 2、撤销 撤销接口 request必须包含参数: /** * 撤销接口除基础信息外， * 还需要原交易信息 */ request.setReferenceNumber(transaction.getRefNum());//原交易参考号 request.setRevAuthCode(transaction.getRevAuthCode());//原交易授权码 request.setBatchNum(transaction.getBatchNum());//原交易批次号 request.setTraceNum(transaction.getTraceNum());//原交易凭证号 CILSDK.revokeConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 3、退货 退货接口 request必须包含参数: /** * 退货接口除基础信息外 * 还需要原交易信息 */ request.setReferenceNumber(referenceNumber); request.setTransDatetime(tradeDate); CILSDK.returnConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 4、余额查询 余额查询接口 request必须包含参数: CILSDK.checkBalance(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 5、卡预授权 预授权接口 request必须包含参数: /** * 刷卡预授权 * * @param request 请求参数 * @param cardType 卡片类型 CardType.MSC_CARD, CardType.IC_CARD, CardType.NFC_CARD... */ CILSDK.preAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 6、卡预授权撤销 预授权撤销接口 request必须包含参数: /** * 预授权撤销接口除基础信息外 * 还需要原预授权交易信息（需要输入的信息） */ request.setAmount(amount);//交易金额 request.setRevAuthCode(authCode);//原预授权交易授权码/参考号 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.revokePreAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 7、卡预授权完成 预授权完成接口 request必须包含参数: 注意：预授权完成属于消费类型的交易，默认是做DCC的，在调用接口之前一定要将刷卡回调中的汇率信息设置给request，确保预授权完成的DCC交易能够顺利进行。 //除了request必须包含的参数外，还需要以下参数 //复写的刷卡回调的方法中会返回汇率信息 if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//持卡人扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//持卡人扣账货币代码 request.setTransRate(rateInfo.getTransRate());//交易汇率 request.setBatchNum(rateInfo.getBatchNum());//汇率查询批次号 request.setTraceNum(rateInfo.getTraceNum());//汇率查询流水号 } //地理位置信息，需要调用方自行获取传入sdk request.setLongitude(location.getLongitude());//经度 request.setLatitude(location.getLatitude());//纬度 request.setCoordinates(location.getCoordinates());//坐标系 request.setAmount(amount);//交易金额 request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.preAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 8、卡预授权完成撤销 预授权完成撤销接口 request必须包含参数: /** * 预授权完成撤销接口除基础信息外 * 还需要原预授权完成交易信息 */ request.setReferenceNumber(refNum);//原预授权完成交易参考号 request.setRevAuthCode(authCode);//原预授权完成交易授权码 request.setTraceNum(traceNum);//原预授权完成交易凭证号 request.setBatchNum(batchNum);//原预授权完成交易批次号 request.setTransDatetime(originalTradeDate);//原预授权完成交易日期 CILSDK.revokePreAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 9、DCC转EDC 当交易卡片为外卡时，消费类（消费、预授权完成）交易可选择进行DCC转EDC。 注意1：只有做了DCC的交易后才可能DCC转EDC成功，调用消费接口时如果持卡人的卡支持DCC，并且在刷卡页面复写的isOpenDcc方法中也返回true，sdk会优先执行DCC的逻辑，就是默认会走DCC的逻辑。 注意2：DCC转EDC无需刷卡，只需要使用消费成功的返回信息就可发起。 注意3：DCC转EDC成功后打印时，入参formatTransCode传PER,isForeignTrans传false CILRequest request = new CILRequest(); //以下参数取自原交易 request.setCardNum(cardNum);//卡号 request.setTransDatetime(datetime);//原交易时间 request.setAmount(amount);//原交易金额 request.setBillingAmt(biilingAmt);//原扣币金额 request.setReferenceNumber(refNum);//原交易参考号 request.setRevAuthCode(revAuthCode);//原交易授权码 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证号 request.setTransCurr(transCurr);//原交易币种 request.setBillingCurr(billingCurr);//原交易扣款币种 CILSDK.dccToEdc(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable p, Exception e) { ... } }); 预授权手输卡号 ``` //需要手输的卡信息有卡号和卡有效期两个字段 CILRequest request = new CILRequest(); request.setAmount(amount); request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); CILSDK.preAuth(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); ``` 预授权撤销手输卡号 CILRequest request = new CILRequest(); //卡信息两个字段通过手输代替刷卡 request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); //下面三个字段可通过外界手输录入 request.setAmount(amount); request.setTransDatetime(originalTradeDate);//原始交易日期 request.setRevAuthCode(authCode);//授权码 CILSDK.revokePreAuth(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 预授权完成手输卡号 注意1：这个地方一定要进行DCC汇率查询，预授权完成属于消费类接口，默认是做Dcc的，同样如果需要做DCC转EDC,在预授权交易成功页面调用Dcc转EDC接口即可。 注意2：汇率查询一般sdk在刷卡的流程中自动完成，但是手输类的交易不走sdk的刷卡流程，需要调用方自行调用汇率查询api进行汇率查询，流程如下： graph LR 输入金额/原交易日期/授权码-->手输卡号和卡有效期 手输卡号和卡有效期--success-->DCC汇率查询 DCC汇率查询--succ or fail-->预授权完成 //1.进行DCC汇率查询 RateQueryListener listener = new RateQueryListener() { @Override public void onResult(boolean isSupport, RateInfo rateInfo) { //发预授权完成交易 } }; sendQueryRate(cardInfo.getCardNumber(), listener);//调用父类BaseCardActivity //2.发预授权交易 CILRequest request = new CILRequest(); request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); //2.1 汇率 if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt()); request.setBillingCurr(rateInfo.getBillingCurr()); request.setTransRate(rateInfo.getTransRate()); request.setBatchNum(rateInfo.getBatchNum()); request.setTraceNum(rateInfo.getTraceNum()); } //2.2地理位置信息，需要调用者自己获取传入 if (mLocationManager != null) { request.setLongitude(location.getLongitude()); request.setLatitude(location.getLatitude()); request.setCoordinates(location.getCoordinates()); } //以下信息可通过外界输入 request.setAmount(amount); request.setTransDatetime(originalTradeDate);//原始交易日期 request.setRevAuthCode(authCode);//授权码 CILSDK.preAuthComplete(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 预授权完成撤销手输卡号 CILRequest request = new CILRequest(); //卡信息两个字段通过手输代替刷卡 request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); //下面三个字段可通过外界手输录入,也可通过本地数据库保存的交易信息查找 request.setAmount(amount); request.setReferenceNumber(refnum); request.setRevAuthCode(authcode;//授权码 request.setTraceNum(tracenum); request.setBatchNum(batchnum); request.setTransDatetime(originalTradeDate);//原始交易日期 CILSDK.revokePreAuthComplete(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 交易结果字段说明 字段 类型 含义 备注 备注 additionalResData String 受理方标识码 无 afterTransCode String 原交易类型 无 batchNum String 批次号 无 billingAmt String 持卡人扣帐金额 无 billingCurr String 持卡人扣帐货币代码符号，三位字母 例如USD billingCurrNum String 持卡人扣帐货币代码,三位数字 无 cardBrand String 国际信用卡公司代码 无 cardNo String 银行卡号 无 cardType String 刷卡方式 无 cashierName String 收银员 无 cashierNum String 收银员号 无 clearingDate String 清算日期 无 compInfoA1 String 签购单收单行 无 compInfoA2 String 签购单商户号 无 compInfoA3 String 签购单终端号 无 compInfoA4 String markup 无 compInfoA6 String 借贷记标识 无 compInfoA7 String 营销信息 无 compInfoA8 String 二维码信息 无 coupon String 支付宝/微信优惠金额 无 field55 String IC卡交易的TAG信息 无 insCode String 受理方标识码 无 localTransDate String 受卡方所在地日期 无 localTransTime String 受卡方所在地时间 无 merCode String 受卡方标识码（商户号） 无 merDiscount String 商家优惠金额 无 originTraceNum String 原交易凭证号 无 outOrderNum String 外部订单号 无 posInputStyle String 服务点输入方式码 无 processflag String 扫码支付09状态的交易是否成功 附件表1 refNum String 检索参考号 无 respCode String 应答码 \"00\"表示成功 revAuthCode String 授权标识应答码 无 revInsCode String 附加响应数据 无 revOrderNum String 自定义域，用于扫码支付业务。 无 scanCodeId String 扫码号 无 termCode String 终端号 无 traceNum String 受卡方系统跟踪号 合作方交易流水 transAmt String 交易金额 无 transCode String 交易类型码 无 transCurr String 交易货币代码 无 transDate String 原交易日期 无 transDatetime String 受卡方所在地日期＋受卡方所在地时 无 transRate String 持卡人扣帐汇率 无 扫码交易 扫码相关的交易则是不依赖 POS 机器的读卡模块的,但是你需要将 微信 或者 支付宝 的二维码读出来传给扫码消费接口,扫码可以使用第三方库,如 zxing 。 扫码消费 CILRequest request = new CILRequest(); request.setAmount(amount);//交易金额 request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果，字段说明见底部 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： // resultCode = response.getTrans().getRespCode(); // if (\"09\".equals(resultCode)) { // CILSDK.queryQr(); // `queryQr` 方法见下文 // } } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); 注意,如果应答码返回09或98，需要调用讯联扫码查询接口，查询该笔订单的实际状态。 扫码撤销 CILRequest request = new CILRequest(); request.setAmount(amount);//原交易金额 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证(流水)号 request.setReferenceNumber(refNum); //原交易参考号 CILSDK.revokeConsumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码退货 CILRequest request = new CILRequest(); request.setAmount(amount);//退款金额 request.setReferenceNumber(serialNum);//原交易参考号 request.setTransDatetime(tradeDate);//原交易时间 CILSDK.returnConsumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码查询 CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum());//批次号 request.setTraceNum(response.getTrans().getTraceNum());//凭证号 request.setPeriod(10000L);//10s request.setLimitTime(6);//6 次 request.setReferenceNumber(response.getTrans().getRefNum());//参考号 request.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 request.setScanCodeId(response.getTrans().getScanCodeId());//扫码号 request.setAmount(response.getTrans().getTransAmt());//交易金额 CILSDK.queryQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码消费查询,只查询一次，不含取消接口 CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum());//批次号 request.setTraceNum(response.getTrans().getTraceNum());//凭证号 request.setReferenceNumber(response.getTrans().getRefNum());//参考号 request.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 request.setScanCodeId(response.getTrans().getScanCodeId());//扫码号 CILSDK.queryQrJustOnce(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码取消 /** * 扫码取消 * 对于09状态的消费订单，最终需要取消、关单 * @param request * @param listener */ CILRequest cilRequest = new CILRequest(); cilRequest.setOriginalTradeDate(response.getTrans().getTransDate());//原交易日期 cilRequest.setAmount(response.getTrans().getTransAmt());//交易金额 cilRequest.setBatchNum(response.getTrans().getBatchNum());//批次号 cilRequest.setTraceNum(response.getTrans().getTraceNum());//凭证号 cilRequest.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 cilRequest.setReferenceNumber(response.getTrans().getRefNum());//参考号 CILSDK.voidQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权 CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.preAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { // 处理扫码预授权结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { //扫码预授权出错 } }); 扫码预授权撤销 CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 request.setBatchNum(curTrans.getBatchNum());//原预授权交易批次号 request.setTraceNum(curTrans.getTraceNum());//原预授权交易凭证（流水）号 CILSDK.revokePreAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权完成 CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 CILSDK.preAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权完成撤销 CILRequest request = new CILRequest(); request.setAmount(transaction.getTransAmt());//原预授权完成交易金额 request.setBatchNum(transaction.getBatchNum());//原预授权完成交易批次号 request.setTraceNum(transaction.getTraceNum());//原预授权完成交易凭证（流水）号 request.setReferenceNumber(transaction.getRefNum());//原预授权完成交易参考号 CILSDK.revokePreAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 单品券功能接入指引 注意：sdk v2.5.3及之后版本支持该功能 1. 扫码消费接口增加单品券核销功能，扫码消费接口增加入参两个参数，订单优惠标记（为配券时候的填的优惠标记）,商品列表； /** * 扫码消费 */ CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） request.setOrderPromotionMark(orderPromotionMark);//订单优惠标记（类型String可选参数） request.setGoodsList(goodsList);//商品列表（类型String可选参数）详见下新增字段说明 CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); 新增字段说明 字段 类型 含义 是否可选 备注1 备注2 orderPromotionMark String 订单优惠标记 Y ans32 来源于配券时选填字段 goodsList String 商品列表 Y 最多9个商品 按照以下样例格式传输 报文样例： \"orderPromotionMark\":\"1111\", \"[ { \"goodsName\":\"小面包\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"1111\" }, { \"goodsName\":\"棒棒糖\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"2222\" }, { \"goodsName\":\"彩虹糖\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"3333\" }, { \"goodsName\":\"矿泉水\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"4444\" } ]\" 响应报文新增一个CouponInfo的实例,内部包含属性字段有： 字段 类型 含义 是否可选 备注 couponId String 优惠券id Y couponName String 优惠券名称 Y channelContribution String 渠道出资 Y merchantContribution String 商家出资 Y otherContribution String 其它出资 Y discountType String 优惠类型 Y discountRange String 优惠范围 Y discountbatchaId String 优惠活动批次ID Y goodsList String 单品优惠商品列表 Y 单品优惠列表商品字段 字段 类型 含义 是否可选 备注 goodsBarCode String 商品条码号 Y goodsDiscount String 单品优惠金 Y CouponInfo响应报文样例： { \"MerchantContribution\":\"000000000100\", \"couponId\":\"9026256969\", \"couponName\":\"讯联满1.1减1 tag\", \"discountRange\":\"SINGLE\", \"discountType\":\"DISCOUNT\", \"discountbatchaId\":\"9803978\", \"goodsList\":\"[{\"goodsBarCode\":\"1111\",\"goodsDiscount\":\"000000000034\"}, {\"goodsBarCode\":\"2222\",\"goodsDiscount\":\"000000000034\"}, {\"goodsBarCode\":\"3333\",\"goodsDiscount\":\"000000000032\"}]\", \"otherContribution\":\"000000000000\" } 附：最多支持传入9个商品 账单查询 智能 POS SDK 分别提供了最多30天的 账单列表查询 和 账单统计接口 接口,接口会根据 type 值确定返回 银行卡账单 或 扫码账单 。 交易成功还是失败最终以返回账单中应答码为准，见 应答码表 。 交互设计建议：交易中，具体来说，调用CILSDK.consumeQr()或是CILSDK.consume()方法时，当因为网络中断进入onError callback时，建议在交互中加入 查询账单列表 的逻辑，这样交易失败后可方便收银员通过账单来确认这笔订单的实际状态。 注意：对于 09 （请求正在处理中）状态的交易账单数据，还需要看 处理标志位 才能判定此次交易成功与否，使用 getProcessFlag() 获取。 当 processFlag 为 '0' 时，此次交易成功；当 processFlag 为非'0' 时，此次交易失败，见 处理标志表 。 根据外部订单号获取该笔订单信息（同步） //outOrderNum为传入数据 CILSDK.getBillsAsync(outOrderNum, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }) 根据凭证号获取当前批次号下该笔订单详情(异步) /** * 依据凭证号，获取当前批次下的订单详情 回调在主线程 * 异步操作 * @param traceNum 凭证号 * @param listener */ CILSDK.getBillByTraceNum(traceNum, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 根据参考号获取当前批次下的订单详情（异步操作） /** * @param refNum 参考号 * @param callBackIsOnMainThread 是否在主线程中回调 */ CILSDK.getBillByRefNumAsync(refNum, callBackIsOnMainThread, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 根据批次号获取当前批次下的订单详情（异步操作） /** * @param refNum 批次号 * @param callBackIsOnMainThread 是否在主线程中回调 */ CILSDK.getBillByBatchNumAsync(batchNum, callBackIsOnMainThread, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 获取账单列表 1. 默认获取三十天的账单列表 /** * 获取账单列表 异步 * * @param int page 从0开始 * @param int size 每页返回的条数 * @param int type 账单类型(TransConstants.CARD_BILL, TransConstants.QR_BILL, TransConstants.ALL_BILL) * */ CILSDK.getBillsAsync(page, size, @BillType int type, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { if (null != response && 0 == response.getStatus()) { //账单获取成功 Trans[] trans = response.getTxn(); //账单数据,字段详情见 Trans } } @Override public void onError(Parcelable p, Exception ex) { //账单获取出错 } }); 2. 获取指定区间的账单列表 /** * 获取账单列表 异步 * * @param page * @param size * @param startTime 查询订单开始时间，格式：yyyyMMdd * @param endTime 查询订单结束时间，格式：yyyyMMdd * @param type * @param callBackIsOnMainThread * @param listener * @return */ CILSDK.getBillsAsync(page, size, startTime, endTime, type, true, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 获取今日交易统计 /** * 获取今日交易统计 异步 * @param type 账单类型 * <ul> * <li>TransConstants.ALL_BILL:所有账单</li> * <li>TransConstants.CARD_BILL:银行卡账单</li> * <li>TransConstants.QR_BILL:扫码账单</li> * </ul> * */ CILSDK.getBillStatAsync(@BillType int type, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (null != response && 0 == response.getStatus()) { //今日交易统计获取成功 CILResponse.Info data = response.getData(); String transCount = data.getTransCount();//今日银行卡正向交易数量 String transAmtSum = data.getTransAmtSum();//今日银行卡正向总交易金额 String backTransCount = data.getBackTransCount();//今日银行卡负向交易数量 String backTransAmtSum = data.getBackTransAmtSum();//今日银行卡负向总交易金额 String sctTransCount = data.getSctTransCount();//今日扫码正向交易笔数 String sctTransAmtSum = data.getSctTransAmtSum();//今日扫码正向交易金额 String sctBackTransCount = data.getSctBackTransCount();//今日扫码负向交易笔数 String sctBackTransAmtSum = data.getSctBackTransAmtSum();//今日扫码负向交易金额 String tipsTransCount = data.getTipsTransCount();//今日收取小费笔数 String tipsTransAmtSum = data.getTipsTransAmtSum();//今日收取小费金额 } } @Override public void onError(Parcelable p, Exception ex) { //今日交易统计获取出错 } }); SDK 的网络部分使用的是第三方库 okhttp ,以上账单接口分别还提供了相对应的同步接口 getBills 和 getBillStat 。 对于异步接口来说,都会返回一个 Call 对象,你可以在应用出错的时候调用 call.cancel() 取消这次请求,以免造成内存泄露。 小费 注意: 通过对一笔交易收取小费。 小费最多收取交易金额的20% 小费只能成功收取一次 消费撤销后不能再次收取 CILRequest request = new CILRequest(); request.setCardNum(cardNumber); request.setReferenceNumber(trans.getRefNum()); request.setBatchNum(trans.getBatchNum()); request.setTraceNum(trans.getTraceNum()); request.setTransDatetime(trans.getTransDatetime()); request.setRevAuthCode(trans.getRevAuthCode()); request.setAmount(amount);//小费金额 CILSDK.takeTip(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable parcelable, Exception e) { ... } }); 小费撤销 CILRequest request = new CILRequest(); request.setCardNum(cardNo); request.setAmount(trans.getTransAmt()); request.setReferenceNumber(trans.getRefNum()); request.setRevAuthCode(trans.getRevAuthCode()); request.setBatchNum(trans.getBatchNum()); request.setTraceNum(trans.getTraceNum()); request.setTransDatetime(trans.getTransDatetime()); CILSDK.revokeTip(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable parcelable, Exception e) { ... } }); 结算 结算需求主要用于每日交易结束时或收银员交接班时,对某段时间内的账款核对。商户每日交易结束后,收银员需要统计并核对所有的交易,核对交易统计准确后结算，打印出结算单。 结算会涉及到一个概念-- 批次号 ,我们在前面的交易都会传入一个批次号给 request ,调用结算之后,后续的交易需要将这个批次号加1,因为此批次已经打包结算掉了。 //batchNum 批次号 CILSDK.transSettleAsync(batchNum, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { //打印结算单 } @Override public void onError(Parcelable cilRequest, Exception e) { //结算出错 } }); 如果使用讯联样式结算UI、逻辑直接使用 注意,使用SettleDaoUtil工具类是必须先初始化，SettleDaoUtil.getInstance().init(); SettleDaoUtil.getInstance().gotoLiquidation(context) 打印 本模块可用于根据交易信息打印所需的消费票据。接口不仅提供了一套固定格式的小票样式，而且还可以根据需要自定义打印样式。 主要功能包括小票打印、二维码打印、条形码打印以及图片打印。 特别注意: 中国人民银行和中国银联为了规范市场上的POS机终端，要求终端打印的签购单必须合乎规范，规范内容包括必须打印的字段与正确的字段内容。 签购单规范详情见 签购单规范 打印银行卡类交易、扫码类交易小票 /** trans 交易信息,Trans类型 * lineBreak 小票结尾需要走纸换行的行数，int类型 * formatTransCode @FormatTransCode String类型，小票的交易类型 * kind @ReceiptSubtitle int类型，小票的子标题，判断是商户联或者是客户联 * isForeignTrans 是否是外卡类交易 * bitmap logo图标，没有直接传null */ CILSDK.printKindsReceipts(trans,lineBreak,formatTransCode, kind, isForeignTrans, bitmap, new Callback<PrinterResult>(){ @Override public void onResult(PrinterResult response) { if (null ！= printerResult && !\"打印成功\".equals(printerResult.toString())) { //打印成功 } } @Override public void onError(Parcelable cilRequest, Exception e) { //打印失败 } }); 打印结算小票 /** * 打印结算小票 * * transSettles 结算信息List * transDatetime 结算时间 * lineBreak 打印结尾换行数 * formatTransCode 结算类型；TransConstants.TRANS_SETTLE_DETAILS：结算详情小票；TransConstants.TRANS_SETTLE_TOTAL：结算统计小票 * callback 回调 */ CILSDK.printSettleReceipts(transSettles, transDatetime,batchNum, lineBreak, formatTransCode, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 自定义打印 注意：使用自定义打印方法时，若打印内容超过2000个字符，请使用分段打印方式，否则可能出现DeviceRTException /** * 根据二进制数据打印(根据打印规范用户自定义打印小票样式) * * buffer 打印内容 * lineBreak 换行数 * callback 回调 */ CILSDK.printBufferReceipt(buffer, lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印二维码 /** * 打印二维码 * * qrCode 二维码内容 * position 打印位置 0:左对齐；1居中；2：右对齐 * width 二维码宽度 * callback 回调 * */ CILSDK.printQRCode(qrCode,position,width,lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印条形码 /** * 打印条形码 * * barCode 条形码数字 * position 条形码位置 0:左对齐；1居中；2：右对齐 * lineBreak 换行数 * callback 回调 */ CILSDK.printBarCode(String barCode, int position, int lineBreak, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印图片 /** * 打印图片 * * bitmap 图片Bitmap * lineBreak 换行数 * offset 偏移量 * callback 回调 * */ CILSDK.printImage(bitmap, lineBreak, offset, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 其他设置 考虑到使用 SDK 的时候可能还会有其他需求,比如 获取 POS 机的 SN 号 、 设置密钥索引 等,在这里,我们也提供了一部分接口。 获取 SDK 版本 //版本名 String versionName = CILSDK.VERSION_NAME; //版本号 int versionCode = CILSDK.VERSION_CODE; 获取 SN 号 //SN号 String snCode = CILSDK.getDeviceSN(); 设置流水号 //serialNum范围：1~999999 boolean isSuccess = CILSDK.setSerialNum(int serialNum); 获取流水号 //序列号 int serialNum = CILSDK.getSerialNum(); 设置批次号 //batchNum范围：1~999999 boolean isSuccess = CILSDK.setBatchNum(int batchNum); 获取批次号 //批次号 int batchNum = CILSDK.getBatchNum(); 设置联迪密钥区 //1-15的设值范围 CILSDK.setTingA8KeyIndex(2); 设置密钥索引 //分别对应MAIN MAC PIN MES //1-255的设值范围 //可以使用下方提供数值,也可以根据自身程序设值 CILSDK.setTingKeyIndex(4,101,10,150); 以上两个方法请在连接刷卡器(CILSDK.connect)之前使用 工具类 CILPayUtil /** * 将respCode翻译成对应中文解释 */ CILPayUtil.translate(context, respCode)); /** * 将Trans类中的transCode翻译成打印所需的对象 */ CILPayUtil.getFormatTransCode(transCode); /** * 根据billingCurr判断交易是否为外卡类的DCC交易 */ CILPayUtil.isDCCPay(billingCurr); /** * 判断交易是否成功 */ CILPayUtil.isTransSuccess(trans); /** * 根据Trans类中的transCode判断交易是否属于扫码类交易 */ CILPayUtil.isQrPay(transCode); ReceiptFormatUtils /** * 根据Trans类中的TransCode翻译成对应的中文解释 */ ReceiptFormatUtils.getTransType(transCode); /** * 将明文的卡号修改为\"前六后四中间为四个*\"的样式 */ ReceiptFormatUtils.handleCardNum(cardNum); 许可证 Copyright (c) 2016 cardinfolink.com JAVADOC java document 详情见 javadoc","text_tokens":["方","设计","中需","按照","sharedpreference","返回值","other","checkbalance","logo","具体","该笔","自定","换行","便","包括","mlocationmanager","rateinfo","附","市场","对齐","bundle","配券","参数值","坐标系","9026256969","且","外部","讯联","快速","自动","price","这样","后面","联系","定义","data","棒棒糖","结尾","转","每天","2.1","用于","中断","阶段","connect",",","gps","getbillstat","将","查看","要求","发预","附件","gotoliquidation","version","值会","cancel","null","tpdu","+","公钥","setreferencenumber","id","发起","面包","com","负向","gcj02","中国人民银行","设备","报文","returnconsumeqr","客户","二进制","银行卡","merinfo","下面","、","getrespcode","激活码","serialnum","]","四","setorderpromotionmark","goodslist","方法","矿泉水","需要","值","无法","比如","有点","方便","类型","硬件","rsa","preauthcomplete","transamtsum","setbillingamt","一套","第三方","看","settransrate","推荐","isopendcc","另外","被","交接","原始","签购","如下","getcardexpirationdate","签到","填","条形","sncode","请","需上","字段","三位","居中","简化","顺利进行","小票","y","二维码","常用","账单","关","才能","流水号","transcurr","5","内存","工具","012","记","合乎","offset","255","消费","优惠券","getbillbytracenum","详情","getpinbins","20%","00","java","来源","已经","密钥","讯","全部","清算","跟踪","发放","持久","red","坐标","可能","onprogressupdate","000000000034","给","处理","中国银联","是否是","getserialnum","支持","矿泉","此次","初始化","行数","原预","super","才","详细","result","已","termcode","getmerchantinfo","succ","改动","code","1111","存储","分段","15","you","许可证","getbacktransamtsum","了","再次","是否","选","backtransamtsum","父类","确认","完整","但是","compinfoa7","默认","&&","这些","billingamt","qrcode","想","除","自","public","!","override","其他","getapplicationcontext"," ","规定","详见","源于","扣款","revinscode","是","b","listener","refnum","位置","09","业务","也","zxing","核销","request","artifactid","分为","状态","版本号","getbillbyrefnumasync","并","外","保持","上","读出","增加","gettxn","new","交易类型","读取","就","pin","选择","cardreaderhandler","三方","revauthcode","！","_","手输类","revordernum","或者","setlimittime","实例","setgoodslist","只有",">","printbufferreceipt","用户","主","打包","printimage","下方","cardtype","setscancodeid","revokeconsumeqr","包含","ex","yyyymmdd","程序",":","借贷","见下文","<","有效期","查询","活动","getscttranscount","集成","子标题","font","主要","规范","true","参考","具体来说","othercontribution","个字符","resultcode","经历","范围","来","cardinfo","出来","goodsdiscount","原因","类中取","主线","commoncardhandleractivity","取消","必选","银员","库","填字","span","每页","localtransdate","10s","时","bill","传","name","说明","；","来说","设置","多次","依赖","returnconsume","天","trans","下次","101","做","amount","receiptformatutils","小面包","原扣币","码表","程中","最多","getinstance","开启","到","并且","消费类","versioncode","success","所在","groupid","账款","收取","cilpayutil","setrevauthcode","两种","translate","定义域","无需","录入","本地","单号","pom","＋","transsettles","maven","setlatitude","形码","这笔","还是","序列号","transamt","传入","dcctoedc","建议","入参","（","控制","名称","最终","选择性","origintracenum","确定","4","效期","per","无","call","确保","10","实际","protected","--","void","000000000000","判定","连接","样式","a","gettransamtsum","gettranstype","预","0","implementation","从","biilingamt","样例","getbills","支付宝","如果","响应","持卡人","否则","settracenum","cardnum","使用","qr","}","所在地","30","十天","1","预留","合作方","应","对","merdiscount","getamount","-","相对","@","安装","自定义","翻译","金","受卡方","。","单品","符号","response","coupon","结果","1.1","return","revokeconsume","getbillsasync","此","handlecardnum","gettipstranscount","width","couponid","能够","transconstants","复杂","9","失败","*","setcardsequencenumber","条数","billingcurr","okhttp","对应","3333","maketext","见","merchantcontribution","国内","服务","调用者","[","内部","造成","某","可选","无误","setbillingcurr","progresscallback","纬度","接口","出错","加入","文档","扫码","执行","传输","setcardnumb","彩虹","工作","progress","与否","tipstransamtsum","printkindsreceipts","activewithcode","if","transcount","20px","这次","msc","li","endtime","没有","第三","98","新","修改","downloadparams","pos","号文","异步","用","setorderid","getsctbacktranscount","两个","respcode","涉及","scancode","特别","setoriginaltradedate","getfield55","之后","模块","输入","单收","transdate","preauthqr","泄露","single","还会","mac","棒棒","缓冲","机","等","其实","人民","basecardactivity","issuccess","标识","cashiername","送","dependency","setserialnum","功能","downloadparamswithprogress","sendqueryrate","setamount","compinfoa3","getsctbacktransamtsum","三步","transrate","左","receiptsubtitle","页面","equals","平台","营销","10000l","getdevicesn","javadoc","外界","能且","根据","注意","savedinstancestate","退货","gettransdate","订单号","之前","nfc","下单","preauth","考虑","settransdatetime","load","优先","一笔","'","今日","多","如有","isforeigntrans","属于","为了","收银员","回调","进入","will","高德","waitloadingshow","以上","getlongitude","discount","gettranscount","graph","读卡","referencenumber","扣","show","数据","查找","2016","3","请求","中文","usd","附加","cardnumber","revokepreauth","能","刷卡","正向","ratequerylistener","card","999999","但","一次","printqrcode","信用","2222","属性","会","orderid","\"","callbackisonmainthread","scttranscount","可以","调用","化","进度","下发","consume","序列","码","，","同样","指引","aftertranscode","分钟","getcoordinates","posinputstyle","批次","字母","装载","class","getprocessflag","磁道","final","length","准确","类中","扣账","收银","结束","流水","接班","地方","具备","机器","本","getsequenceserialnum","渠道","下载","内容","getbillstatasync","正在","取值","voidqr","向","后台","汇率","概念","processflag","为","右","billtype","setfield55","gettrans","对象","智能","outordernum","前面","sctbacktranscount","buffer","settranscurr","goodsbarcode","不再","先","更新","只能","中间","自行","9803978","7","减","偏移","卡号","本身","非","barcode","正常","规范市场","compinfoa8","转载","boolean","or","关单","除了","卡","initcardevent","表示","为准","能力","进制","versionname","提供","若","交接班","compinfoa6","以免","85","localtranstime","二维","一个","让","当","应用","copyright","isqrpay","系统","setpinemv","第一次","继承","应答","curtrans","设值","string","定位","都","以下","31.180606","均","getlatitude","hashutils","setposinputstyle","revokepreauthqr","setlongitude","仅","域","点","由于","关于","各","统计","total","翻译成","初始","或","/",".","isdccpay","索引","交易","拿到","好","当前","必须","同步","backtranscount","sn","位","步骤","激活","联","金额","可","tostring","糖","onresult","这里","及","第一","出资","discountrange","复写","failed","据库","端口","组织","反馈","issupport","cashiernum","优惠","有效","下","打印","v2.5","最","goodsname","mes","形式","需","数据库","图标","queryqr","fail","`",")","授权","掉","自己","getsystemparams","终端","代码","gettransrate","我们","腾讯","parcelable","经度","表","tipstranscount","超时","走","检索","debug","数值","名","false","托管","55","...","日期","卡人","银联","possdk","setcardexpirationdate","settle","mername","单品券","setcoordinates","getbatchnum","次","field55","时候","中","goodsid","json","每日","param","国人","区","例如","分别","合作","对于","和","二","compinfoa2","保存","时间","地理位置","该","优惠活动","authcode","gettransdatetime","setcardnum","scancodeid","cilsdk","unknow","4444","里面","单行","ic卡","许可","page","clearingdate","getcardnumber","cilrequest","getdata","你","gradle","sdk2.4","只","(","cardhandlererror","markup","出","笔数","错误","aid","单","当然","图片","zaihui","一台","票据","供","toast","帐","billingcurrnum","orderpromotionmark","走纸","150","基础","不","依据","超过","context","持卡","信用卡","cilresponse","固定","waitloadingdismiss","支付","starttime","cardinfolink","tracenum","transcode","mercode","compinfoa4","公司","dcc","batchnum","三十天","部分","不能","大概","121.600228","顺利","新增","api","格式","get","时选","负","数","启用","setbatchnum","smart","则","6","一般","getposinputstyle","获取","getbillingamt","货币","就是","中国","getscancodeid","2000","e","2.2","币种","状况","会为","结算","刷卡器","一部分","段","读出来","所有","setlocation","手输","避免","color","printbarcode","000000000032","整个","gettrack2","个","ul","情况","擅自","原","如","transdatetime","size","cardbrand","指定","余额","里","goodsnum","逻辑","内","字","明文","getscttransamtsum","通过",";","过程","含","bin","下文","additionalresdata","ans32","联满","正确","=","settingkeyindex","解释","devicertexception","sdk","000000000100","号","jcenter","getstatus","商户","填入","formattranscode","地理","tag","consumeqr","凭证","微信","偏移量","这","左右","inscode","exception","在","else","~","gettipstransamtsum","queryqrjustonce","成功","区间","oncreate","联网","getrefnum","以","init","百度","type","条码","document","商品","details","判断","后","字符串","国际","：","参数","客服","流程","撤销","kind","all","重复","transaction","一些","setperiod","出现","存储设备","信息","active","revoketip","译成","因为","taketip","而且","main","extends","getbillingcurr","取自","订单","旧","核对","position","要","列表","couponinfo","getbillbybatchnumasync","号加","来源于","得到","宽度","8","style","发送","外卡","getbacktranscount","所","需求","标记","getmessage","demo","app","还","银行","int","三十","泉水","）","操作","返回","字符","数字","即可","2","后续","自身","onerror","bd09","总","couponname","settledaoutil","退款","一部","去","环节","encryptactivecode","signin","四个","gettracenum","相关","程","一定","与","受理","有","|","ic","交互","卡预","edc","lr","c","小费","p","条形码","用者","标题","scttransamtsum","printerresult","或是","istranssuccess","channelcontribution","info","preauthcompleteqr","段时间","传给","标识码","compinfoa1","wgs84","location","discounttype","discountbatchaid","代替","直接","数量","联迪","以及","{","的","ui","datetime","###","sctbacktransamtsum","linebreak","settinga8keyindex","skd","bitmap","开始","getformattranscode","版本","callback","short","标志","cardno","接入","br","完成","gettransamt","网络","底部","进行","不要","revokepreauthcomplete","因","其它","前六后","setsecondtrack","originaltradedate","商家","这个","配置","导致","卡片","revokepreauthcompleteqr","若有","类","不仅","printsettlereceipts","list","地址","含义","备注","tradedate","方式","种类","transsettleasync","联扫码","2.5","三个","getrevauthcode"],"title":"1. SDK API","title_tokens":["sdk"," ","1",".","api"]},{"location":"documentation/quik/#_1","text":"为了方便快速接入，提供了demo供接入参考 demo下载 本 SDK 已使用 jcenter 托管，配置如下 gradle: implementation 'com.cardinfolink.smart.pos:PosSDK:2.5.2' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>PosSDK</artifactId> <version>2.5.2</version> <type>pom</type> </dependency> 如果想使用讯联集成的结算UI和逻辑，请配置 gradle: implementation 'com.cardinfolink.smart.pos:SDK-ZaiHui:1.1.1' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>SDK-ZaiHui</artifactId> <version>1.1.1</version> <type>pom</type> </dependency>","text_tokens":["demo","，","gradle","结算","2","方便","的","ui","供","zaihui","已","type","本","托管","下载","implementation",">","'","possdk","/",".","接入","如果","讯联","了","如下",":","快速","<","使用","groupid","为了","逻辑","集成","cardinfolink","pos","请","1","配置","参考","和","pom","-","想","maven","version","sdk","jcenter"," ","smart","com","or","1.1","dependency","提供","2.5","artifactid"],"title":"快速接入","title_tokens":["接入","快速"]},{"location":"documentation/quik/#pos","text":"完整的激活环节分为三步，分别是：激活，终端参数下载，终端密钥下载，三步都成功，表示激活成功，激活成功之后才能正常使用后面的交易流程。 graph LR 激活--success-->参数下载 参数下载--success-->密钥下载 激活 a、新激活流程（推荐） 根据用户反馈，为了简化激活流程，我们新增了激活码的方式激活，当你拿到 POS 机器之后，我们会为这个商户发放激活码，一个激活码只可以激活一台 POS 机。 建议先调用 根据激活码获取商户信息接口: （返回商户名商户号终端号等信息），确认信息无误后，在调用激活码激活接口激活。 ``` graph LR 获取商户信息--success-->激活 激活--success-->参数下载 参数下载--success-->密钥下载 > 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。 //authCode 激活码（建议用扫码的方式得到激活码，避免让用户手输） CILSDK.activeWithCode(authCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败，失败原因见 cilResponse.getMessage() } } @Override public void onError(Parcelable cilRequest, Exception e) { //激活出错 } }); * b、旧激活流程 第一次使用智能 POS 终端的时候,需要使用讯联下发的商户号（merCode） 和终端号（termCode）激活 graph LR 激活--success-->参数下载 参数下载--success-->密钥下载 > 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。推荐APP本身能够保持设备是否已经激活标志 //merCode 讯联下发的商户号 //termCode 讯联下发的终端号 CILSDK.active(merCode, termCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败 } } @Override public void onError(Parcelable p, Exception e) { //激活出错 } }); <span id=\"load_merInfo\" style=\"font-size:20px;color:red\" >注意:</span><br/> >根据激活码获取商户详情接口： CILSDK.getMerchantInfo(HashUtils.encryptActiveCode(authCode), true, new Callback () { @Override public void onResult(CILResponse cilResponse) { //success //you will get merName,merCode,termCode } @Override public void onError(Parcelable cilRequest, Exception e) { //failed } }); **终端参数下载** 激活成功之后,你的应用还需要下载一些交易时使用的参数,比如`交易地址和端口`、`交易超时时间`、`终端支持的功能`、`TPDU` 等, 在你拿到 POS 终端之前,这些参数都会在讯联后台已经配置好,全部参数见 `CILResponse.Info` 返回值。下载成功之后 SKD 会 以json字符串的形式保存这些参数到 `SharedPreference` (请不要擅自改动这些参数值,以免导致交易失败) 。当然,在 `onResult` 中也会返回,你也可以自己选择性保存一些参数。另外, SDK 保存在 SharedPreference 里的值会提供接口 `CILSDK.getSystemParams()` 获取。 > 注意：正常情况下，此方法只需执行成功一次，但是后台参数配置可能会有改动，APP本身需要调用预留功能调用此方法 //merCode 讯联下发的商户号 激活成功之后可以确定商户号 //termCode 讯联下发的终端号 激活成功之后可以确定终端号 CILSDK.downloadParams(merCode, termCode, new com.cardinfolink.pos.listener.Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) { //参数下载成功,具体返回的参数见 response.Info } else { //参数下载错误 } } @Override public void onError(Parcelable p, Exception e) { //下载出错 } }); **终端密钥下载** 终端密钥下载只需要成功执行一次就可以,成功下载的密钥会被转载到POS硬件模块里面,后面就不需要再次调用了,建议你的应用可以在成功下载密钥之后持久化一个标志位, 下次进入应用就不再去下载密钥了。整个过程可能会需要1~2分钟左右(依赖当前的网络状况),会经历以下步骤: > 请求讯联网关 RSA -> 装载 RSA -> 请求主密钥 -> 装载主密钥 -> 启用主密钥 -> 请求工作密钥(签到) -> 装载工作密钥 -> 下载 AID -> 装载 AID -> 下载 IC 公钥 -> 装载 IC 公钥。 建议APP本身存储设备是否已经初始化方法标志。 >注意：此方法一般只需要安装后成功调用一次即可。但银行交互密钥有可能会更新，APP本身需要调用预留功能调用此方法 CILSDK.downloadParamsWithProgress(new ProgressCallback<CILResponse>() { @Override public void onProgressUpdate(int progress) { //progress下载密钥的进度 } @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) //密钥下载成功。在这里可以持久化一个标志位 } @Override public void onError(Parcelable p, Exception e) { //下载密钥出错 } }); ### **签到** 签到其实也就是更新工作密钥的一个过程 (`下载工作密钥+装载工作密钥` ),讯联网关平台要求应用需要每天签到一次。 CILSDK.signIn(new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { //签到成功 } @Override public void onError(Parcelable cilRequest, Exception e) { //签到出错 } }); ### **银行卡交易** 由于银行卡交易逻辑有点复杂,讯联提供了一个 `BaseCardActivity` 基础类,你只需要继承这个类便可以做银行卡类的交易了。具体使用方法可以见 demo 里的 `CommonCardHandlerActivity` 类。下面给个大概说明: ```java public class CommonCardHandlerActivity extends BaseCardActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //... } /** * 必须传入金额 * * @return */ public String getAmount() { //在这里传入金额 } /** * 此方法为控制sdk内部是否开启DCC交易逻辑（sdk2.4.1版本及以上支持该方法） * *@return 需要进行DCC交易时，返回true，否则返回false */ public boolean isOpenDcc() { //如有DCC需求，因只有刷卡消费和刷卡预授权才支持DCC交易，此方法只需要在这两种交易类型返回true //如果接入方无需支持DCC，则此方法返回false即可 return false; } /** * 读卡的结果（sdk2.4.1版本及以上新增RateInfo参数，返回DCC读卡流程中进行汇率查询的结果） * * @param isSuccess 是否成功 * @param cardType 卡片种类(-1(unknow) 1(msc) 2(ic) 3(nfc) 4(scancode) 5(other)) * @param cardInfo 读取卡片信息 * @param rateInfo 汇率信息 */ public void cardReaderHandler(boolean isSuccess, @CardType.Type int cardType, CardInfo cardInfo, RateInfo rateInfo){ //读卡成功后才发起交易 if (!isSuccess || cardInfo == null) { Toast.makeText(getApplicationContext(), \"读卡失败\", Toast.LENGTH_SHORT).show(); initCardEvent(); return; } //1. 根据银联85号文规定，智能终端在消费和预授权完成交易需上送经度，纬度，坐标系信息到卡组织 CILRequest request = new CILRequest(); request.setLongitude(121.600228);//设置经度 request.setLatitude(31.180606);//设置纬度 request.setCoordinates(\"GCJ02\");//设置坐标系 //关于坐标系，国内一些常用第三方取值：百度（BD09），高德、腾讯（GCJ02），GPS（WGS84）。 //一般第三方定位SDK都能从定位后返回的位置信息类中取到，详细可查看各第三方接入文档。 //2.如果接入方需要进行DCC交易，在消费和预授权完成交易中需将汇率信息填入request中，否则无需处理 CILRequest request = new CILRequest(); ... if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//设置扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//设置扣账币种 request.setTransRate(rateInfo.getTransRate());//设置交易汇率 request.setBatchNum(rateInfo.getBatchNum());//设置汇率请求批次号 request.setTraceNum(rateInfo.getTraceNum());//设置汇率请求流水号 } //3. 在这里面发送银行卡相关的交易(如消费、消费撤销、退货、预授权、预授权撤销、预授权完成、预授权完成撤销、余额查询) //CILSDK.consume(request, cardType, new Callback<CILResponse>() //消费 } /** * 自定义读卡时的缓冲页面 */ public void waitLoadingShow(){ } /** * 取消读卡时的缓冲页面 */ public void waitLoadingDismiss(){ } /** * 读卡失败 */ public void cardHandlerError(Exception e){ } } 注意: 调用银行卡类交易接口时，需要传入CILRequest以及CardType，且所有接口中CILRequest均需要传入以下信息： CILRequest request = new CILRequest(); request.setAmount(amount);//消费金额 /** * 复写的刷卡回调方法中获取到的cardInfo信息 */ request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPinEmv(cardInfo.getPinBins());//卡bin request.setCardSequenceNumber(cardInfo.getSequenceSerialNum());//卡片序列号 request.setField55(cardInfo.getField55());//55域信息 request.setSecondTrack(cardInfo.getTrack2());//二磁道信息 request.setOrderId(orderId);//可选参数。（消费、退货、预授权、预授权完成、扫码下单、扫码退货） request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权完成） 1、消费 消费接口 request必须包含参数: //除了request必须包含的参数外，还需要以下参数 //复写的刷卡回调的方法中会返回汇率信息 if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//持卡人扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//持卡人扣账货币代码 request.setTransRate(rateInfo.getTransRate());//交易汇率 request.setBatchNum(rateInfo.getBatchNum());//汇率查询批次号 request.setTraceNum(rateInfo.getTraceNum());//汇率查询流水号 } //地理位置信息，需要调用方自行获取传入sdk request.setLongitude(location.getLongitude());//经度 request.setLatitude(location.getLatitude());//纬度 request.setCoordinates(location.getCoordinates());//坐标系 /** * 刷卡消费 * * @param request 请求参数 * @param cardType 卡片类型 CardType.MSC_CARD, CardType.IC_CARD, CardType.NFC_CARD... */ CILSDK.consume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 2、撤销 撤销接口 request必须包含参数: /** * 撤销接口除基础信息外， * 还需要原交易信息 */ request.setReferenceNumber(transaction.getRefNum());//原交易参考号 request.setRevAuthCode(transaction.getRevAuthCode());//原交易授权码 request.setBatchNum(transaction.getBatchNum());//原交易批次号 request.setTraceNum(transaction.getTraceNum());//原交易凭证号 CILSDK.revokeConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 3、退货 退货接口 request必须包含参数: /** * 退货接口除基础信息外 * 还需要原交易信息 */ request.setReferenceNumber(referenceNumber); request.setTransDatetime(tradeDate); CILSDK.returnConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 4、余额查询 余额查询接口 request必须包含参数: CILSDK.checkBalance(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 5、卡预授权 预授权接口 request必须包含参数: /** * 刷卡预授权 * * @param request 请求参数 * @param cardType 卡片类型 CardType.MSC_CARD, CardType.IC_CARD, CardType.NFC_CARD... */ CILSDK.preAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 6、卡预授权撤销 预授权撤销接口 request必须包含参数: /** * 预授权撤销接口除基础信息外 * 还需要原预授权交易信息（需要输入的信息） */ request.setAmount(amount);//交易金额 request.setRevAuthCode(authCode);//原预授权交易授权码/参考号 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.revokePreAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 7、卡预授权完成 预授权完成接口 request必须包含参数: 注意：预授权完成属于消费类型的交易，默认是做DCC的，在调用接口之前一定要将刷卡回调中的汇率信息设置给request，确保预授权完成的DCC交易能够顺利进行。 //除了request必须包含的参数外，还需要以下参数 //复写的刷卡回调的方法中会返回汇率信息 if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//持卡人扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//持卡人扣账货币代码 request.setTransRate(rateInfo.getTransRate());//交易汇率 request.setBatchNum(rateInfo.getBatchNum());//汇率查询批次号 request.setTraceNum(rateInfo.getTraceNum());//汇率查询流水号 } //地理位置信息，需要调用方自行获取传入sdk request.setLongitude(location.getLongitude());//经度 request.setLatitude(location.getLatitude());//纬度 request.setCoordinates(location.getCoordinates());//坐标系 request.setAmount(amount);//交易金额 request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.preAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 8、卡预授权完成撤销 预授权完成撤销接口 request必须包含参数: /** * 预授权完成撤销接口除基础信息外 * 还需要原预授权完成交易信息 */ request.setReferenceNumber(refNum);//原预授权完成交易参考号 request.setRevAuthCode(authCode);//原预授权完成交易授权码 request.setTraceNum(traceNum);//原预授权完成交易凭证号 request.setBatchNum(batchNum);//原预授权完成交易批次号 request.setTransDatetime(originalTradeDate);//原预授权完成交易日期 CILSDK.revokePreAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 9、DCC转EDC 当交易卡片为外卡时，消费类（消费、预授权完成）交易可选择进行DCC转EDC。 注意1：只有做了DCC的交易后才可能DCC转EDC成功，调用消费接口时如果持卡人的卡支持DCC，并且在刷卡页面复写的isOpenDcc方法中也返回true，sdk会优先执行DCC的逻辑，就是默认会走DCC的逻辑。 注意2：DCC转EDC无需刷卡，只需要使用消费成功的返回信息就可发起。 注意3：DCC转EDC成功后打印时，入参formatTransCode传PER,isForeignTrans传false CILRequest request = new CILRequest(); //以下参数取自原交易 request.setCardNum(cardNum);//卡号 request.setTransDatetime(datetime);//原交易时间 request.setAmount(amount);//原交易金额 request.setBillingAmt(biilingAmt);//原扣币金额 request.setReferenceNumber(refNum);//原交易参考号 request.setRevAuthCode(revAuthCode);//原交易授权码 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证号 request.setTransCurr(transCurr);//原交易币种 request.setBillingCurr(billingCurr);//原交易扣款币种 CILSDK.dccToEdc(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable p, Exception e) { ... } }); 预授权手输卡号 ``` //需要手输的卡信息有卡号和卡有效期两个字段 CILRequest request = new CILRequest(); request.setAmount(amount); request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); CILSDK.preAuth(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); ``` 预授权撤销手输卡号 CILRequest request = new CILRequest(); //卡信息两个字段通过手输代替刷卡 request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); //下面三个字段可通过外界手输录入 request.setAmount(amount); request.setTransDatetime(originalTradeDate);//原始交易日期 request.setRevAuthCode(authCode);//授权码 CILSDK.revokePreAuth(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 预授权完成手输卡号 注意1：这个地方一定要进行DCC汇率查询，预授权完成属于消费类接口，默认是做Dcc的，同样如果需要做DCC转EDC,在预授权交易成功页面调用Dcc转EDC接口即可。 注意2：汇率查询一般sdk在刷卡的流程中自动完成，但是手输类的交易不走sdk的刷卡流程，需要调用方自行调用汇率查询api进行汇率查询，流程如下： graph LR 输入金额/原交易日期/授权码-->手输卡号和卡有效期 手输卡号和卡有效期--success-->DCC汇率查询 DCC汇率查询--succ or fail-->预授权完成 //1.进行DCC汇率查询 RateQueryListener listener = new RateQueryListener() { @Override public void onResult(boolean isSupport, RateInfo rateInfo) { //发预授权完成交易 } }; sendQueryRate(cardInfo.getCardNumber(), listener);//调用父类BaseCardActivity //2.发预授权交易 CILRequest request = new CILRequest(); request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); //2.1 汇率 if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt()); request.setBillingCurr(rateInfo.getBillingCurr()); request.setTransRate(rateInfo.getTransRate()); request.setBatchNum(rateInfo.getBatchNum()); request.setTraceNum(rateInfo.getTraceNum()); } //2.2地理位置信息，需要调用者自己获取传入 if (mLocationManager != null) { request.setLongitude(location.getLongitude()); request.setLatitude(location.getLatitude()); request.setCoordinates(location.getCoordinates()); } //以下信息可通过外界输入 request.setAmount(amount); request.setTransDatetime(originalTradeDate);//原始交易日期 request.setRevAuthCode(authCode);//授权码 CILSDK.preAuthComplete(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 预授权完成撤销手输卡号 CILRequest request = new CILRequest(); //卡信息两个字段通过手输代替刷卡 request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPosInputStyle(\"012\"); //下面三个字段可通过外界手输录入,也可通过本地数据库保存的交易信息查找 request.setAmount(amount); request.setReferenceNumber(refnum); request.setRevAuthCode(authcode;//授权码 request.setTraceNum(tracenum); request.setBatchNum(batchnum); request.setTransDatetime(originalTradeDate);//原始交易日期 CILSDK.revokePreAuthComplete(request, CardType.MSC_CARD, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 交易结果字段说明 字段 类型 含义 备注 备注 additionalResData String 受理方标识码 无 afterTransCode String 原交易类型 无 batchNum String 批次号 无 billingAmt String 持卡人扣帐金额 无 billingCurr String 持卡人扣帐货币代码符号，三位字母 例如USD billingCurrNum String 持卡人扣帐货币代码,三位数字 无 cardBrand String 国际信用卡公司代码 无 cardNo String 银行卡号 无 cardType String 刷卡方式 无 cashierName String 收银员 无 cashierNum String 收银员号 无 clearingDate String 清算日期 无 compInfoA1 String 签购单收单行 无 compInfoA2 String 签购单商户号 无 compInfoA3 String 签购单终端号 无 compInfoA4 String markup 无 compInfoA6 String 借贷记标识 无 compInfoA7 String 营销信息 无 compInfoA8 String 二维码信息 无 coupon String 支付宝/微信优惠金额 无 field55 String IC卡交易的TAG信息 无 insCode String 受理方标识码 无 localTransDate String 受卡方所在地日期 无 localTransTime String 受卡方所在地时间 无 merCode String 受卡方标识码（商户号） 无 merDiscount String 商家优惠金额 无 originTraceNum String 原交易凭证号 无 outOrderNum String 外部订单号 无 posInputStyle String 服务点输入方式码 无 processflag String 扫码支付09状态的交易是否成功 附件表1 refNum String 检索参考号 无 respCode String 应答码 \"00\"表示成功 revAuthCode String 授权标识应答码 无 revInsCode String 附加响应数据 无 revOrderNum String 自定义域，用于扫码支付业务。 无 scanCodeId String 扫码号 无 termCode String 终端号 无 traceNum String 受卡方系统跟踪号 合作方交易流水 transAmt String 交易金额 无 transCode String 交易类型码 无 transCurr String 交易货币代码 无 transDate String 原交易日期 无 transDatetime String 受卡方所在地日期＋受卡方所在地时 无 transRate String 持卡人扣帐汇率 无","text_tokens":["方","中需","sharedpreference","返回值","other","checkbalance","具体","自定","便","mlocationmanager","rateinfo","bundle","参数值","坐标系","且","外部","讯联","自动","后面","联系","定义","转","每天","2.1","用于","阶段",",","gps","将","查看","要求","发预","附件","值会","null","tpdu","+","公钥","setreferencenumber","id","发起","com","gcj02","设备","银行卡","merinfo","下面","、","激活码","方法","需要","无法","比如","有点","类型","硬件","rsa","preauthcomplete","setbillingamt","第三方","settransrate","推荐","isopendcc","另外","被","原始","签购","如下","getcardexpirationdate","签到","请","需上","字段","三位","简化","顺利进行","二维码","常用","关","才能","流水号","transcurr","5","012","记","消费","详情","getpinbins","00","java","已经","密钥","讯","全部","清算","跟踪","发放","持久","red","坐标","可能","onprogressupdate","给","处理","支持","初始化","原预","super","才","详细","termcode","getmerchantinfo","succ","改动","存储","you","了","再次","是否","选","父类","确认","完整","但是","compinfoa7","默认","这些","billingamt","除","自","public","!","override","getapplicationcontext"," ","规定","扣款","revinscode","是","b","listener","refnum","位置","09","业务","也","request","状态","分为","外","保持","上","new","交易类型","读取","就","选择","cardreaderhandler","三方","revauthcode","_","手输类","revordernum","只有",">","用户","主","cardtype","包含",":","借贷","<","有效期","查询","font","true","参考","经历","cardinfo","原因","类中取","commoncardhandleractivity","取消","必选","银员","span","localtransdate","时","传","说明","设置","多次","依赖","returnconsume","下次","做","amount","原扣币","开启","到","并且","消费类","success","所在","setrevauthcode","两种","定义域","无需","录入","本地","单号","＋","setlatitude","序列号","transamt","传入","dcctoedc","建议","入参","（","控制","选择性","origintracenum","确定","4","效期","per","无","确保","protected","--","void","a","预","0","从","biilingamt","支付宝","如果","响应","持卡人","否则","settracenum","cardnum","使用","}","所在地","1","预留","合作方","merdiscount","getamount","-","@","安装","自定义","受卡方","。","符号","response","coupon","结果","return","revokeconsume","此","能够","复杂","9","失败","*","setcardsequencenumber","billingcurr","maketext","见","国内","服务","调用者","内部","无误","setbillingcurr","progresscallback","纬度","接口","出错","文档","扫码","执行","setcardnumb","工作","progress","activewithcode","if","20px","msc","第三","新","downloadparams","pos","号文","用","setorderid","两个","respcode","scancode","getfield55","之后","模块","输入","单收","transdate","缓冲","机","等","其实","basecardactivity","issuccess","标识","cashiername","送","功能","downloadparamswithprogress","sendqueryrate","setamount","compinfoa3","三步","transrate","页面","平台","营销","外界","能且","根据","注意","savedinstancestate","退货","订单号","之前","nfc","下单","preauth","settransdatetime","load","优先","如有","isforeigntrans","属于","为了","收银员","回调","进入","will","高德","waitloadingshow","以上","getlongitude","graph","读卡","referencenumber","扣","show","数据","查找","3","请求","usd","附加","revokepreauth","能","刷卡","ratequerylistener","card","但","一次","信用","会","orderid","\"","可以","调用","化","进度","下发","consume","序列","码","，","同样","aftertranscode","分钟","getcoordinates","posinputstyle","批次","字母","装载","class","磁道","length","扣账","收银","流水","地方","具备","机器","getsequenceserialnum","下载","取值","后台","汇率","processflag","为","setfield55","智能","outordernum","settranscurr","不再","先","更新","自行","7","卡号","本身","正常","compinfoa8","转载","boolean","or","除了","卡","initcardevent","表示","能力","提供","compinfoa6","以免","85","localtranstime","二维","一个","让","当","应用","系统","setpinemv","第一次","继承","应答","string","定位","都","以下","31.180606","均","getlatitude","hashutils","setposinputstyle","setlongitude","仅","域","点","由于","关于","各","初始","/",".","交易","拿到","好","当前","必须","位","步骤","激活","联","金额","可","onresult","这里","及","第一","复写","failed","据库","端口","组织","反馈","issupport","cashiernum","优惠","有效","下","打印","形式","需","数据库","fail","`",")","授权","自己","终端","getsystemparams","代码","gettransrate","我们","腾讯","parcelable","经度","表","超时","走","检索","debug","数值","名","false","55","...","日期","卡人","银联","setcardexpirationdate","mername","setcoordinates","getbatchnum","field55","时候","中","json","param","例如","分别","合作","和","二","compinfoa2","保存","时间","地理位置","该","authcode","setcardnum","scancodeid","cilsdk","unknow","里面","单行","ic卡","clearingdate","getcardnumber","cilrequest","你","sdk2.4","只","(","cardhandlererror","markup","aid","错误","单","当然","一台","帐","toast","billingcurrnum","基础","不","持卡","信用卡","cilresponse","waitloadingdismiss","支付","cardinfolink","tracenum","transcode","mercode","compinfoa4","公司","dcc","batchnum","大概","121.600228","顺利","新增","api","get","启用","setbatchnum","则","6","一般","获取","getbillingamt","货币","就是","e","2.2","币种","状况","会为","段","所有","setlocation","手输","避免","color","整个","gettrack2","个","情况","擅自","原","如","transdatetime","size","cardbrand","余额","里","逻辑","字","通过",";","过程","bin","additionalresdata","=","sdk","号","getstatus","填入","商户","formattranscode","tag","地理","凭证","微信","这","左右","inscode","exception","在","else","~","成功","oncreate","联网","getrefnum","以","百度","type","后","字符串","国际","：","参数","客服","流程","撤销","重复","transaction","一些","存储设备","信息","active","extends","getbillingcurr","取自","订单","旧","要","得到","8","style","发送","外卡","需求","getmessage","app","int","还","银行","demo","）","操作","返回","字符","数字","即可","2","onerror","bd09","环节","encryptactivecode","去","signin","gettracenum","相关","一定","受理","有","|","ic","交互","卡预","edc","lr","p","用者","info","标识码","compinfoa1","wgs84","location","代替","以及","{","的","datetime","###","skd","版本","callback","short","标志","cardno","接入","br","完成","网络","进行","不要","revokepreauthcomplete","因","setsecondtrack","originaltradedate","商家","这个","配置","导致","卡片","若有","类","地址","含义","备注","tradedate","方式","种类","三个","getrevauthcode"],"title":"激活POS机","title_tokens":["机","pos","激活"]},{"location":"documentation/quik/#_2","text":"扫码相关的交易则是不依赖 POS 机器的读卡模块的,但是你需要将 微信 或者 支付宝 的二维码读出来传给扫码消费接口,扫码可以使用第三方库,如 zxing 。 扫码消费 CILRequest request = new CILRequest(); request.setAmount(amount);//交易金额 request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果，字段说明见底部 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： // resultCode = response.getTrans().getRespCode(); // if (\"09\".equals(resultCode)) { // CILSDK.queryQr(); // `queryQr` 方法见下文 // } } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); 注意,如果应答码返回09或98，需要调用讯联扫码查询接口，查询该笔订单的实际状态。 扫码撤销 CILRequest request = new CILRequest(); request.setAmount(amount);//原交易金额 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证(流水)号 request.setReferenceNumber(refNum); //原交易参考号 CILSDK.revokeConsumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码退货 CILRequest request = new CILRequest(); request.setAmount(amount);//退款金额 request.setReferenceNumber(serialNum);//原交易参考号 request.setTransDatetime(tradeDate);//原交易时间 CILSDK.returnConsumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码查询 CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum());//批次号 request.setTraceNum(response.getTrans().getTraceNum());//凭证号 request.setPeriod(10000L);//10s request.setLimitTime(6);//6 次 request.setReferenceNumber(response.getTrans().getRefNum());//参考号 request.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 request.setScanCodeId(response.getTrans().getScanCodeId());//扫码号 request.setAmount(response.getTrans().getTransAmt());//交易金额 CILSDK.queryQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码消费查询,只查询一次，不含取消接口 CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum());//批次号 request.setTraceNum(response.getTrans().getTraceNum());//凭证号 request.setReferenceNumber(response.getTrans().getRefNum());//参考号 request.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 request.setScanCodeId(response.getTrans().getScanCodeId());//扫码号 CILSDK.queryQrJustOnce(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码取消 /** * 扫码取消 * 对于09状态的消费订单，最终需要取消、关单 * @param request * @param listener */ CILRequest cilRequest = new CILRequest(); cilRequest.setOriginalTradeDate(response.getTrans().getTransDate());//原交易日期 cilRequest.setAmount(response.getTrans().getTransAmt());//交易金额 cilRequest.setBatchNum(response.getTrans().getBatchNum());//批次号 cilRequest.setTraceNum(response.getTrans().getTraceNum());//凭证号 cilRequest.setPosInputStyle(response.getTrans().getPosInputStyle());//pos输入服务方式码 cilRequest.setReferenceNumber(response.getTrans().getRefNum());//参考号 CILSDK.voidQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权 CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.preAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { // 处理扫码预授权结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { //扫码预授权出错 } }); 扫码预授权撤销 CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 request.setBatchNum(curTrans.getBatchNum());//原预授权交易批次号 request.setTraceNum(curTrans.getTraceNum());//原预授权交易凭证（流水）号 CILSDK.revokePreAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权完成 CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 CILSDK.preAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 扫码预授权完成撤销 CILRequest request = new CILRequest(); request.setAmount(transaction.getTransAmt());//原预授权完成交易金额 request.setBatchNum(transaction.getBatchNum());//原预授权完成交易批次号 request.setTraceNum(transaction.getTraceNum());//原预授权完成交易凭证（流水）号 request.setReferenceNumber(transaction.getRefNum());//原预授权完成交易参考号 CILSDK.revokePreAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 单品券功能接入指引 注意：sdk v2.5.3及之后版本支持该功能 1. 扫码消费接口增加单品券核销功能，扫码消费接口增加入参两个参数，订单优惠标记（为配券时候的填的优惠标记）,商品列表； /** * 扫码消费 */ CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） request.setOrderPromotionMark(orderPromotionMark);//订单优惠标记（类型String可选参数） request.setGoodsList(goodsList);//商品列表（类型String可选参数）详见下新增字段说明 CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); 新增字段说明 字段 类型 含义 是否可选 备注1 备注2 orderPromotionMark String 订单优惠标记 Y ans32 来源于配券时选填字段 goodsList String 商品列表 Y 最多9个商品 按照以下样例格式传输 报文样例： \"orderPromotionMark\":\"1111\", \"[ { \"goodsName\":\"小面包\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"1111\" }, { \"goodsName\":\"棒棒糖\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"2222\" }, { \"goodsName\":\"彩虹糖\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"3333\" }, { \"goodsName\":\"矿泉水\", \"price\":\"1\", \"goodsNum\":\"1\", \"goodsId\":\"4444\" } ]\" 响应报文新增一个CouponInfo的实例,内部包含属性字段有： 字段 类型 含义 是否可选 备注 couponId String 优惠券id Y couponName String 优惠券名称 Y channelContribution String 渠道出资 Y merchantContribution String 商家出资 Y otherContribution String 其它出资 Y discountType String 优惠类型 Y discountRange String 优惠范围 Y discountbatchaId String 优惠活动批次ID Y goodsList String 单品优惠商品列表 Y 单品优惠列表商品字段 字段 类型 含义 是否可选 备注 goodsBarCode String 商品条码号 Y goodsDiscount String 单品优惠金 Y CouponInfo响应报文样例： { \"MerchantContribution\":\"000000000100\", \"couponId\":\"9026256969\", \"couponName\":\"讯联满1.1减1 tag\", \"discountRange\":\"SINGLE\", \"discountType\":\"DISCOUNT\", \"discountbatchaId\":\"9803978\", \"goodsList\":\"[{\"goodsBarCode\":\"1111\",\"goodsDiscount\":\"000000000034\"}, {\"goodsBarCode\":\"2222\",\"goodsDiscount\":\"000000000034\"}, {\"goodsBarCode\":\"3333\",\"goodsDiscount\":\"000000000032\"}]\", \"otherContribution\":\"000000000000\" } 附：最多支持传入9个商品","text_tokens":["按照","该笔","附","配券","9026256969","外部","price","棒棒糖",",","将","面包","setreferencenumber","id","报文","returnconsumeqr","、","getrespcode","serialnum","]","setorderpromotionmark","goodslist","方法","矿泉水","需要","类型","第三方","如下","填","字段","y","二维码","消费","优惠券","来源","讯","othercontribution","000000000034","处理","支持","矿泉","原预","result","code","1111","是否","选","但是","public","override"," ","详见","源于","是","listener","refnum","zxing","09","核销","request","状态","读出","增加","new","三方","revauthcode","或者","setlimittime","实例","setgoodslist",">","setscancodeid","revokeconsumeqr","包含","见下文",":","活动","<","查询","参考","resultcode","范围","出来","goodsdiscount","取消","填字","库","10s","说明","；","依赖","amount","小面包","最多","单号","transamt","传入","入参","（","名称","最终","实际","void","000000000000","预","样例","支付宝","如果","响应","settracenum","使用","}","1","@","金","。","单品","response","结果","1.1","couponid","9","*","3333","见","merchantcontribution","服务","[","内部","可选","接口","出错","扫码","传输","彩虹","if","第三","98","pos","setorderid","两个","setoriginaltradedate","之后","模块","输入","preauthqr","transdate","single","棒棒","功能","setamount","equals","10000l","注意","退货","gettransdate","订单号","settransdatetime","多","discount","读卡","3","一次","2222","属性","orderid","\"","码","调用","条码","可以","指引","，","批次","流水","机器","渠道","voidqr","为","gettrans","goodsbarcode","9803978","减","关单","二维","一个","curtrans","应答","string","revokepreauthqr","以下","setposinputstyle","或","/",".","交易","可","金额","糖","onresult","及","出资","discountrange","优惠","下","v2.5","goodsname","queryqr","`",")","授权","parcelable","...","日期","单品券","getbatchnum","次","goodsid","时候","param","对于","时间","该","优惠活动","cilsdk","4444","cilrequest","你","(","只","orderpromotionmark","不","cilresponse","支付","tracenum","batchnum","新增","格式","时选","setbatchnum","则","6","getposinputstyle","获取","getscancodeid","e","读出来","段","000000000032","个","原","如","goodsnum","字",";","含","下文","联满","ans32","=","sdk","000000000100","号","consumeqr","tag","微信","凭证","exception","queryqrjustonce","getrefnum","商品","：","参数","撤销","transaction","setperiod","订单","列表","couponinfo","来源于","标记","泉水","）","返回","2","onerror","couponname","退款","相关","gettracenum","有","channelcontribution","preauthcompleteqr","传给","discounttype","discountbatchaid","{","的","版本","callback","完成","接入","gettransamt","底部","其它","商家","revokepreauthcompleteqr","含义","备注","tradedate","方式","联扫码","最"],"title":"扫码交易","title_tokens":["交易","扫码"]},{"location":"documentation/quik/#_3","text":"智能 POS SDK 分别提供了最多30天的 账单列表查询 和 账单统计接口 接口,接口会根据 type 值确定返回 银行卡账单 或 扫码账单 。 交易成功还是失败最终以返回账单中应答码为准，见 应答码表 。 交互设计建议：交易中，具体来说，调用CILSDK.consumeQr()或是CILSDK.consume()方法时，当因为网络中断进入onError callback时，建议在交互中加入 查询账单列表 的逻辑，这样交易失败后可方便收银员通过账单来确认这笔订单的实际状态。 注意：对于 09 （请求正在处理中）状态的交易账单数据，还需要看 处理标志位 才能判定此次交易成功与否，使用 getProcessFlag() 获取。 当 processFlag 为 '0' 时，此次交易成功；当 processFlag 为非'0' 时，此次交易失败，见 处理标志表 。 根据外部订单号获取该笔订单信息（同步） //outOrderNum为传入数据 CILSDK.getBillsAsync(outOrderNum, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }) 根据凭证号获取当前批次号下该笔订单详情(异步) /** * 依据凭证号，获取当前批次下的订单详情 回调在主线程 * 异步操作 * @param traceNum 凭证号 * @param listener */ CILSDK.getBillByTraceNum(traceNum, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 根据参考号获取当前批次下的订单详情（异步操作） /** * @param refNum 参考号 * @param callBackIsOnMainThread 是否在主线程中回调 */ CILSDK.getBillByRefNumAsync(refNum, callBackIsOnMainThread, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 根据批次号获取当前批次下的订单详情（异步操作） /** * @param refNum 批次号 * @param callBackIsOnMainThread 是否在主线程中回调 */ CILSDK.getBillByBatchNumAsync(batchNum, callBackIsOnMainThread, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 获取账单列表 1. 默认获取三十天的账单列表 /** * 获取账单列表 异步 * * @param int page 从0开始 * @param int size 每页返回的条数 * @param int type 账单类型(TransConstants.CARD_BILL, TransConstants.QR_BILL, TransConstants.ALL_BILL) * */ CILSDK.getBillsAsync(page, size, @BillType int type, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { if (null != response && 0 == response.getStatus()) { //账单获取成功 Trans[] trans = response.getTxn(); //账单数据,字段详情见 Trans } } @Override public void onError(Parcelable p, Exception ex) { //账单获取出错 } }); 2. 获取指定区间的账单列表 /** * 获取账单列表 异步 * * @param page * @param size * @param startTime 查询订单开始时间，格式：yyyyMMdd * @param endTime 查询订单结束时间，格式：yyyyMMdd * @param type * @param callBackIsOnMainThread * @param listener * @return */ CILSDK.getBillsAsync(page, size, startTime, endTime, type, true, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 获取今日交易统计 /** * 获取今日交易统计 异步 * @param type 账单类型 * <ul> * <li>TransConstants.ALL_BILL:所有账单</li> * <li>TransConstants.CARD_BILL:银行卡账单</li> * <li>TransConstants.QR_BILL:扫码账单</li> * </ul> * */ CILSDK.getBillStatAsync(@BillType int type, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (null != response && 0 == response.getStatus()) { //今日交易统计获取成功 CILResponse.Info data = response.getData(); String transCount = data.getTransCount();//今日银行卡正向交易数量 String transAmtSum = data.getTransAmtSum();//今日银行卡正向总交易金额 String backTransCount = data.getBackTransCount();//今日银行卡负向交易数量 String backTransAmtSum = data.getBackTransAmtSum();//今日银行卡负向总交易金额 String sctTransCount = data.getSctTransCount();//今日扫码正向交易笔数 String sctTransAmtSum = data.getSctTransAmtSum();//今日扫码正向交易金额 String sctBackTransCount = data.getSctBackTransCount();//今日扫码负向交易笔数 String sctBackTransAmtSum = data.getSctBackTransAmtSum();//今日扫码负向交易金额 String tipsTransCount = data.getTipsTransCount();//今日收取小费笔数 String tipsTransAmtSum = data.getTipsTransAmtSum();//今日收取小费金额 } } @Override public void onError(Parcelable p, Exception ex) { //今日交易统计获取出错 } }); SDK 的网络部分使用的是第三方库 okhttp ,以上账单接口分别还提供了相对应的同步接口 getBills 和 getBillStat 。 对于异步接口来说,都会返回一个 Call 对象,你可以在应用出错的时候调用 call.cancel() 取消这次请求,以免造成内存泄露。","text_tokens":["设计","consume","每页","，","时","段","批次","bill","所有","getprocessflag","具体","该笔","；","来说","final","收银","天","结束","trans","getbillstatasync","ul","正在","程中","码表","向","取消","processflag","为","外部","billtype","size","对象","指定","data","智能","outordernum","逻辑","这样","字","sctbacktranscount","收取","getscttransamtsum","中断","通过",";",",","getbillstat","单号","=","cancel","非","null","这笔","sdk","还是","号","getstatus","传入","consumeqr","为准","负向","凭证","建议","（","银行卡","提供","以免","最终","exception","在","确定","]","gettipstransamtsum","call","成功","方法","区间","一个","当","需要","应用","值","实际","方便","应答","判定","void","与否","类型","以","string","都","type","transamtsum","getsctbacktranscount","gettransamtsum","第三方","看","0","从","统计","getbills","后","或","：",".","/","交易","当前","同步","使用","backtranscount","位","qr","可","}","十天","30","金额","all","1","onresult","应","信息","可以","账单","因为","相对","才能","@","内存","订单","。","response","列表","getbillbybatchnumasync","getbillbytracenum","getbillsasync","return","下","详情","callbackisonmainthread","gettipstranscount","最","getbacktranscount","okhttp","transconstants","三十天","失败","*","三十","int","银行","还","条数",")","见","处理","）","操作","返回","此次","[","表","parcelable","2","tipstranscount","造成","onerror","总","接口","加入","出错","扫码","...","程","tipstransamtsum","if","transcount","了","getbacktransamtsum","这次","li","中","endtime","第三","时候","param","是否","backtransamtsum","pos","交互","分别","确认","对于","和","&&","默认","时间","小费","泄露","p","public","!","override","scttransamtsum","或是"," ","是","listener","cilsdk","refnum","09","info","状态","getsctbacktransamtsum","page","getdata","cilrequest","getbillbyrefnumasync","你","(","数量","笔数","gettxn","new","根据","注意","{","的","sctbacktransamtsum","三方","订单号","开始","_","依据","callback",">","'","标志","今日","多","异步","cilresponse","ex","yyyymmdd","网络","scttranscount",":","getscttranscount","<","查询","starttime","收银员","tracenum","回调","进入","true","以上","参考","batchnum","具体来说","gettranscount","部分","数据","请求","格式","来","负","正向","e","card","获取","主线","会","银员","库","码","调用"],"title":"账单查询","title_tokens":["账单","查询"]},{"location":"documentation/quik/#_4","text":"注意: 通过对一笔交易收取小费。 小费最多收取交易金额的20% 小费只能成功收取一次 消费撤销后不能再次收取 CILRequest request = new CILRequest(); request.setCardNum(cardNumber); request.setReferenceNumber(trans.getRefNum()); request.setBatchNum(trans.getBatchNum()); request.setTraceNum(trans.getTraceNum()); request.setTransDatetime(trans.getTransDatetime()); request.setRevAuthCode(trans.getRevAuthCode()); request.setAmount(amount);//小费金额 CILSDK.takeTip(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable parcelable, Exception e) { ... } }); 小费撤销 CILRequest request = new CILRequest(); request.setCardNum(cardNo); request.setAmount(trans.getTransAmt()); request.setReferenceNumber(trans.getRefNum()); request.setRevAuthCode(trans.getRevAuthCode()); request.setBatchNum(trans.getBatchNum()); request.setTraceNum(trans.getTraceNum()); request.setTransDatetime(trans.getTransDatetime()); CILSDK.revokeTip(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable parcelable, Exception e) { ... } });","text_tokens":["exception","cilrequest","成功","(",")","new","注意","parcelable","{","的","getrefnum","void","onerror","trans","settransdatetime","amount","gettracenum","一笔","callback",">","...","后","多","/",".","cardno","cilresponse","交易","getbatchnum","gettransamt",":","settracenum","<","再次","收取","setrevauthcode","}","金额","撤销","通过",";",",","onresult","对","不能","只能","revoketip","小费","taketip","@","=","public","override","cardnumber","。","setreferencenumber"," ","setbatchnum","e","gettransdatetime","消费","setcardnum","一次","cilsdk","20%","request","getrevauthcode","setamount","最"],"title":"小费","title_tokens":["小费"]},{"location":"documentation/quik/#_5","text":"结算需求主要用于每日交易结束时或收银员交接班时,对某段时间内的账款核对。商户每日交易结束后,收银员需要统计并核对所有的交易,核对交易统计准确后结算，打印出结算单。 结算会涉及到一个概念-- 批次号 ,我们在前面的交易都会传入一个批次号给 request ,调用结算之后,后续的交易需要将这个批次号加1,因为此批次已经打包结算掉了。 //batchNum 批次号 CILSDK.transSettleAsync(batchNum, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { //打印结算单 } @Override public void onError(Parcelable cilRequest, Exception e) { //结算出错 } }); 如果使用讯联样式结算UI、逻辑直接使用 注意,使用SettleDaoUtil工具类是必须先初始化，SettleDaoUtil.getInstance().init(); SettleDaoUtil.getInstance().gotoLiquidation(context)","text_tokens":["工具","，","结算","时","批次","所有","final","接班","收银","结束","概念","getinstance","到","讯联","内","账款","前面","逻辑","用于","先",";",",","将","gotoliquidation","号","传入","商户","交接班","、","exception","在","一个","需要","--","void","都","init","样式","准确","统计","交接","或","后","初始","/",".","如果","交易","必须","使用","}","1","onresult","对","因为","@","。","核对","response","号加","此","打印","已经","需求",")","掉","给","我们","parcelable","初始化","某","后续","onerror","settledaoutil","出错","了","每日","涉及","之后","时间","public","override"," ","是","cilsdk","段时间","request","cilrequest","并","(","直接","出","单","new","注意","{","的","ui","callback",">","打包","context","cilresponse","<","收银员","主要","这个","batchnum","类","e","transsettleasync","会","银员","调用"],"title":"结算","title_tokens":["结算"]},{"location":"documentation/quik/#_6","text":"本模块可用于根据交易信息打印所需的消费票据。接口不仅提供了一套固定格式的小票样式，而且还可以根据需要自定义打印样式。 主要功能包括小票打印、二维码打印、条形码打印以及图片打印。 特别注意: 中国人民银行和中国银联为了规范市场上的POS机终端，要求终端打印的签购单必须合乎规范，规范内容包括必须打印的字段与正确的字段内容。 签购单规范详情见 签购单规范 打印银行卡类交易、扫码类交易小票 /** trans 交易信息,Trans类型 * lineBreak 小票结尾需要走纸换行的行数，int类型 * formatTransCode @FormatTransCode String类型，小票的交易类型 * kind @ReceiptSubtitle int类型，小票的子标题，判断是商户联或者是客户联 * isForeignTrans 是否是外卡类交易 * bitmap logo图标，没有直接传null */ CILSDK.printKindsReceipts(trans,lineBreak,formatTransCode, kind, isForeignTrans, bitmap, new Callback<PrinterResult>(){ @Override public void onResult(PrinterResult response) { if (null ！= printerResult && !\"打印成功\".equals(printerResult.toString())) { //打印成功 } } @Override public void onError(Parcelable cilRequest, Exception e) { //打印失败 } }); 打印结算小票 /** * 打印结算小票 * * transSettles 结算信息List * transDatetime 结算时间 * lineBreak 打印结尾换行数 * formatTransCode 结算类型；TransConstants.TRANS_SETTLE_DETAILS：结算详情小票；TransConstants.TRANS_SETTLE_TOTAL：结算统计小票 * callback 回调 */ CILSDK.printSettleReceipts(transSettles, transDatetime,batchNum, lineBreak, formatTransCode, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 自定义打印 注意：使用自定义打印方法时，若打印内容超过2000个字符，请使用分段打印方式，否则可能出现DeviceRTException /** * 根据二进制数据打印(根据打印规范用户自定义打印小票样式) * * buffer 打印内容 * lineBreak 换行数 * callback 回调 */ CILSDK.printBufferReceipt(buffer, lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印二维码 /** * 打印二维码 * * qrCode 二维码内容 * position 打印位置 0:左对齐；1居中；2：右对齐 * width 二维码宽度 * callback 回调 * */ CILSDK.printQRCode(qrCode,position,width,lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印条形码 /** * 打印条形码 * * barCode 条形码数字 * position 条形码位置 0:左对齐；1居中；2：右对齐 * lineBreak 换行数 * callback 回调 */ CILSDK.printBarCode(String barCode, int position, int lineBreak, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印图片 /** * 打印图片 * * bitmap 图片Bitmap * lineBreak 换行数 * offset 偏移量 * callback 回调 * */ CILSDK.printImage(bitmap, lineBreak, offset, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } });","text_tokens":["，","结算","时","段","传","logo","自定","换行","；","printbarcode","包括","trans","本","市场","内容","对齐","右","transdatetime","结尾","buffer","定义","字","用于",";",",","transsettles","要求","正确","=","偏移","形码","null","devicertexception","barcode","规范市场","客户","formattranscode","商户","中国人民银行","进制","二进制","银行卡","提供","若","、","exception","二维","成功","方法","需要","类型","string","void","一套","样式","total","0","统计","details","判断","/",".","：","签购","交易","条形","必须","否则","请","使用","居中","可","联","}","kind","小票","tostring","1","onresult","二维码","出现","信息","@","自定义","而且","offset","。","合乎","response","position","消费","详情","宽度","外卡","所","transconstants","*","需","失败","int","图标","还","银行","可能",")","中国银联","见","终端","是否是","字符","数字","parcelable","2","行数","onerror","result","接口","扫码","printkindsreceipts","分段","银联","settle","与","if","没有","了","国人","是否","固定","pos","特别","和","&&","偏移量","模块","时间","qrcode","条形码","标题","public","!","机","printerresult","override","人民"," ","是","cilsdk","位置","功能","cilrequest","左","receiptsubtitle","equals","(","直接","上","图片","以及","单","根据","注意","交易类型","的","new","票据","{","！","linebreak","bitmap","_","printbufferreceipt","走纸","或者","callback",">","用户","超过","printimage",":","isforeigntrans","<","为了","子标题","回调","主要","规范","batchnum","width","不仅","类","个字符","printsettlereceipts","数据","list","格式","数","e","方式","printqrcode","中国","\"","2000","可以","打印"],"title":"打印","title_tokens":["打印"]},{"location":"documentation/quik/#_7","text":"考虑到使用 SDK 的时候可能还会有其他需求,比如 获取 POS 机的 SN 号 、 设置密钥索引 等,在这里,我们也提供了一部分接口。 获取 SDK 版本 //版本名 String versionName = CILSDK.VERSION_NAME; //版本号 int versionCode = CILSDK.VERSION_CODE; 获取 SN 号 //SN号 String snCode = CILSDK.getDeviceSN(); 设置流水号 //serialNum范围：1~999999 boolean isSuccess = CILSDK.setSerialNum(int serialNum); 获取流水号 //序列号 int serialNum = CILSDK.getSerialNum(); 设置批次号 //batchNum范围：1~999999 boolean isSuccess = CILSDK.setBatchNum(int batchNum); 获取批次号 //批次号 int batchNum = CILSDK.getBatchNum(); 设置联迪密钥区 //1-15的设值范围 CILSDK.setTingA8KeyIndex(2); 设置密钥索引 //分别对应MAIN MAC PIN MES //1-255的设值范围 //可以使用下方提供数值,也可以根据自身程序设值 CILSDK.setTingKeyIndex(4,101,10,150); 以上两个方法请在连接刷卡器(CILSDK.connect)之前使用 工具类 CILPayUtil /** * 将respCode翻译成对应中文解释 */ CILPayUtil.translate(context, respCode)); /** * 将Trans类中的transCode翻译成打印所需的对象 */ CILPayUtil.getFormatTransCode(transCode); /** * 根据billingCurr判断交易是否为外卡类的DCC交易 */ CILPayUtil.isDCCPay(billingCurr); /** * 判断交易是否成功 */ CILPayUtil.isTransSuccess(trans); /** * 根据Trans类中的transCode判断交易是否属于扫码类交易 */ CILPayUtil.isQrPay(transCode); ReceiptFormatUtils /** * 根据Trans类中的TransCode翻译成对应的中文解释 */ ReceiptFormatUtils.getTransType(transCode); /** * 将明文的卡号修改为\"前六后四中间为四个*\"的样式 */ ReceiptFormatUtils.handleCardNum(cardNum); 许可证 Copyright (c) 2016 cardinfolink.com JAVADOC java document 详情见 javadoc","text_tokens":["工具","序列","刷卡器","一部分","批次","name","设置","类中","101","流水","trans","receiptformatutils","versioncode","为","到","对象","cilpayutil","明文","translate",";",",","connect","将","中间","version","=","settingkeyindex","解释","卡号","sdk","序列号","号","15","boolean","com","versionname","提供","、","在","serialnum","~","4","四","成功","方法","copyright","10","isqrpay","比如","设值","string","连接","document","样式","gettranstype","判断","翻译成","/",".","：","isdccpay","索引","交易","sncode","请","使用","sn","cardnum","1","这里","译成","-","流水号","翻译","main","255","。","详情","handlecardnum","java","mes","所","外卡","需求","密钥","*","需","int","对应","billingcurr","2016","可能",")","见","getserialnum","我们","2","许可证","自身","一部","四个","数值","名","接口","code","扫码","有","了","getbatchnum","javadoc","时候","区","是否","修改","pos","分别","两个","respcode","还会","c","mac","机","其他","等","istranssuccess"," ","issuccess","cilsdk","setserialnum","版本号","也","许可","联迪","(","getdevicesn","根据","的","settinga8keyindex","之前","getformattranscode","考虑","_","150","版本","下方","context","程序","前六后","属于","cardinfolink","transcode","以上","dcc","batchnum","部分","类","范围","中文","刷卡","setbatchnum","999999","获取","pin","\"","可以","打印"],"title":"其他设置","title_tokens":["其他","设置"]},{"location":"documentation/sdkapi/","text":"快速体验 讯联智能 POS SDK 为开发者准备了一个简单的 demo 程序,可以快速体验 SDK 接入流程。可以在这里 下载demo 。 下载 POS-demo 之后将整个目录导入到您的 Android Studio 之中。 快速集成 为了方便 SDK 的集成使用，本 SDK 已使用 jcenter 托管，配置如下 gradle: implementation 'com.cardinfolink.smart.pos:PosSDK:2.5.2' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>PosSDK</artifactId> <version>2.5.2</version> <type>pom</type> </dependency> 如果想使用讯联集成的结算UI和逻辑，请配置 gradle: implementation 'com.cardinfolink.smart.pos:SDK-ZaiHui:1.1.1' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>SDK-ZaiHui</artifactId> <version>1.1.1</version> <type>pom</type> </dependency> 读卡、输入密码的颜色取自colorPrimary。如果需要自定义样式，请参考 Demo ，下载源码修改 注意：1.1.1版本直接指定了PosSDK的版本号，不再使用默认最新版的PosSDK，如非必要，不要再配置PosSDK的版本 连接POS机 使用 N900 智能 POS 机器, 我们的应用首先需要连接 POS 机硬件, 使用 SDK 提供的 connect 方法连接。 建议在 Application 的 onCreate 方法中进行连接。 @Override public void onCreate() { super.onCreate(); ... CILSDK.setDebug(true);//发版时请改为 false CILSDK.connect(this); ... } 如果还适配了联迪A8设备的，联迪设备login需要传入activity的context, 建议在 主activity onCreate中 再调用 CILSDK.connect(this); 如果没有与app生命周期一致的activity,建议在每个可能调用设备刷卡、加密、打印的activity中再调用 CILSDK.connect(this)， 保证使用过程中设备连接不断开；另外推荐在ActivityLifecycleCallbacks中处理设备连接。 激活POS机 a、新激活接口（推荐） 根据用户反馈，为了简化激活流程，我们采取激活码的方式激活，当你拿到 POS 机器之后，我们会为这个商户发放激活码，一个激活码可以激活一台 POS 机。 成功激活后，接口会返回商户号，终端号等信息，后续参数下载需要用到。 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。 //authCode 激活码（建议用扫码的方式得到激活码，避免让用户手输） CILSDK.activeWithCode(authCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败，失败原因见 cilResponse.getMessage() } } @Override public void onError(Parcelable cilRequest, Exception e) { //激活出错 } }); b、旧激活接口 第一次使用智能 POS 终端的时候,需要使用讯联下发的商户号 merCode 和终端号 termCode 激活, 激活成功之后才能正常使用后面的交易流程。 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。推荐APP本身能够保持设备是否已经激活标志 //merCode 讯联下发的商户号 //termCode 讯联下发的终端号 CILSDK.active(merCode, termCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败 } } @Override public void onError(Parcelable p, Exception e) { //激活出错 } }); 终端参数下载 激活成功之后,你的应用还需要下载一些交易时使用的参数,比如 交易地址和端口 、 交易超时时间 、 终端支持的功能 、 TPDU 等, 在你拿到 POS 终端之前,这些参数都会在讯联后台已经配置好,全部参数见 CILResponse.Info 返回值。下载成功之后 SKD 会 以json字符串的形式保存这些参数到 SharedPreference (请不要擅自改动这些参数值,以免导致交易失败) 。当然,在 onResult 中也会返回,你也可以自己选择性保存一些参数。另外, SDK 保存在 SharedPreference 里的值会提供接口 CILSDK.getSystemParams() 获取。 注意：正常情况下，此方法只需执行成功一次，但是后台参数配置可能会有改动，APP本身需要调用预留功能调用此方法 //merCode 讯联下发的商户号 激活成功之后可以确定商户号 //termCode 讯联下发的终端号 激活成功之后可以确定终端号 CILSDK.downloadParams(merCode, termCode, new com.cardinfolink.pos.listener.Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) { //参数下载成功,具体返回的参数见 response.Info } else { //参数下载错误 } } @Override public void onError(Parcelable p, Exception e) { //下载出错 } }); 终端密钥下载 终端密钥下载只需要成功执行一次就可以,成功下载的密钥会被转载到POS硬件模块里面,后面就不需要再次调用了,建议你的应用可以在成功下载密钥之后持久化一个标志位, 下次进入应用就不再去下载密钥了。整个过程可能会需要1~2分钟左右(依赖当前的网络状况),会经历以下步骤: 请求讯联网关 RSA -> 装载 RSA -> 请求主密钥 -> 装载主密钥 -> 启用主密钥 -> 请求工作密钥(签到) -> 装载工作密钥 -> 下载 AID -> 装载 AID -> 下载 IC 公钥 -> 装载 IC 公钥。 建议APP本身存储设备是否已经初始化方法标志。 注意：此方法一般只需要安装后成功调用一次即可。但银行交互密钥有可能会更新，APP本身需要调用预留功能调用此方法 CILSDK.downloadParamsWithProgress(new ProgressCallback<CILResponse>() { @Override public void onProgressUpdate(int progress) { //progress下载密钥的进度 } @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) //密钥下载成功。在这里可以持久化一个标志位 } @Override public void onError(Parcelable p, Exception e) { //下载密钥出错 } }); 签到 签到其实也就是更新工作密钥的一个过程 ( 下载工作密钥+装载工作密钥 ),讯联网关平台要求应用需要每天签到一次。 CILSDK.signIn(new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { //签到成功 } @Override public void onError(Parcelable cilRequest, Exception e) { //签到出错 } }); 发起交易 SDK 将交易分为 银行卡交易 (刷卡、插卡和挥卡)和 扫码交易 (支付宝和微信)两种。银行卡相关交易需要POS机硬件模块读卡器,扫码相关交易则不需要。 a、银行卡交易 由于银行卡交易逻辑有点复杂,讯联提供了一个 BaseCardActivity 基础类,你只需要继承这个类便可以做银行卡类的交易了。具体使用方法可以见 demo 里的 CommonCardHandlerActivity 类。下面给个大概说明: public class CommonCardHandlerActivity extends BaseCardActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //... } /** * 必须传入金额 * * @return */ public String getAmount() { //在这里传入金额 } /** * 此方法为控制sdk内部是否开启DCC交易逻辑（sdk2.4.1版本及以上支持该方法） * *@return 需要进行DCC交易时，返回true，否则返回false */ public boolean isOpenDcc() { //只有刷卡消费和刷卡预授权才支持DCC交易 //如果接入方无需支持DCC，则此方法返回false即可 return false; } /** * 读卡的结果（sdk2.4.1版本及以上新增RateInfo参数，返回DCC读卡流程中进行汇率查询的结果） * * @param isSuccess 是否成功 * @param cardType 卡片种类(-1(unknow) 1(msc) 2(ic) 3(nfc) 4(scancode) 5(other)) * @param cardInfo 读取卡片信息 * @param rateInfo 汇率信息 */ public void cardReaderHandler(boolean isSuccess, @CardType.Type int cardType, CardInfo cardInfo, RateInfo rateInfo){ //读卡成功后才发起交易 if (!isSuccess || cardInfo == null) { Toast.makeText(getApplicationContext(), \"读卡失败\", Toast.LENGTH_SHORT).show(); initCardEvent(); return; } //1. 根据银联85号文规定，智能终端需上送经度，纬度，坐标系信息到卡组织 CILRequest request = new CILRequest(); request.setLongitude(121.600228);//设置经度 request.setLatitude(31.180606);//设置纬度 request.setCoordinates(\"GCJ02\");//设置坐标系 //关于坐标系，国内一些常用第三方取值：百度（BD09），高德、腾讯（GCJ02），GPS（WGS84）。 //一般第三方定位SDK都能从定位后返回的位置信息类中取到，详细可查看各第三方接入文档。 //2.如果接入方需要进行DCC交易，需将汇率信息填入request中，否则无需处理 CILRequest request = new CILRequest(); ... if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//设置扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//设置扣账币种 request.setTransRate(rateInfo.getTransRate());//设置交易汇率 request.setBatchNum(rateInfo.getBatchNum());//设置汇率请求批次号 request.setTraceNum(rateInfo.getTraceNum());//设置汇率请求流水号 } //3. 在这里面发送银行卡相关的交易(如消费、消费撤销、退货、预授权、预授权撤销、预授权完成、预授权完成撤销、余额查询) //CILSDK.consume(request, cardType, new Callback<CILResponse>() //消费 } /** * 显示读卡时的缓冲页面 */ public void waitLoadingShow(){ } /** * 取消读卡时的缓冲页面 */ public void waitLoadingDismiss(){ } /** * 读卡失败 */ public void cardHandlerError(Exception e){ } } 注意: 调用银行卡类交易接口时，需要传入CILRequest以及CardType，且所有接口中CILRequest均需要传入以下信息： /** * @param: request:请求信息 * @param: cardType:卡片类型 */ request.setAmount(amount);//消费金额 /** * 刷卡获取的cardInfo信息 */ request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPinEmv(cardInfo.getPinBins());//卡bin request.setCardSequenceNumber(cardInfo.getSequenceSerialNum());//卡片序列号 request.setField55(cardInfo.getField55());//55域信息 request.setSecondTrack(cardInfo.getTrack2());//二磁道信息 request.setOrderId(orderId);//可选参数。（消费、退货、预授权、预授权完成、扫码下单、扫码退货） request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权） 1、消费 消费接口 request必须包含参数: CILSDK.consume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 2、撤销 撤销接口 request必须包含参数: /** * 撤销接口除基础信息外， * 还需要原交易信息 */ request.setReferenceNumber(transaction.getRefNum());//原交易参考号 request.setRevAuthCode(transaction.getRevAuthCode());//原交易授权码 request.setBatchNum(transaction.getBatchNum());//原交易批次号 request.setTraceNum(transaction.getTraceNum());//原交易凭证号 CILSDK.revokeConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 3、退货 退货接口 request必须包含参数: /** * 退货接口除基础信息外 * 还需要原交易信息 */ request.setReferenceNumber(referenceNumber); request.setTransDatetime(tradeDate); CILSDK.returnConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 4、余额查询 余额查询接口 request必须包含参数: CILSDK.checkBalance(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 5、卡预授权 预授权接口 request必须包含参数: request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权） CILSDK.preAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 6、卡预授权撤销 预授权撤销接口 request必须包含参数: /** * 预授权撤销接口除基础信息外 * 还需要原预授权交易信息 */ request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.revokePreAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 7、卡预授权完成 预授权完成接口 request必须包含参数: /** * 预授权完成接口除基础信息外 * 还需要原预授权交易信息 */ request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.preAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 8、卡预授权完成撤销 预授权完成撤销接口 request必须包含参数: /** * 预授权完成撤销接口除基础信息外 * 还需要原预授权完成交易信息 */ request.setReferenceNumber(refNum);//原预授权完成交易参考号 request.setRevAuthCode(authCode);//原预授权完成交易授权码 request.setTraceNum(traceNum);//原预授权完成交易凭证号 request.setBatchNum(batchNum);//原预授权完成交易批次号 request.setTransDatetime(originalTradeDate);//原预授权完成交易日期 CILSDK.revokePreAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 9、DCC转EDC 当交易卡片为外卡时，消费类（消费、预授权完成）交易可选择进行DCC转EDC。 CILRequest request = new CILRequest(); request.setCardNum(cardNum);//卡号 request.setTransDatetime(datetime);//原交易时间 request.setAmount(amount);//原交易金额 request.setBillingAmt(biilingAmt);//原扣币金额 request.setReferenceNumber(refNum);//原交易参考号 request.setRevAuthCode(revAuthCode);//原交易授权码 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证号 request.setTransCurr(transCurr);//原交易币种 request.setBillingCurr(billingCurr);//原交易扣款币种 CILSDK.dccToEdc(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable p, Exception e) { ... } }); 交易结果字段说明 字段 类型 含义 备注 备注 additionalResData String 受理方标识码 无 afterTransCode String 原交易类型 无 batchNum String 批次号 无 billingAmt String 持卡人扣帐金额 无 billingCurr String 持卡人扣帐货币代码符号，三位字母 例如USD billingCurrNum String 持卡人扣帐货币代码,三位数字 无 cardBrand String 国际信用卡公司代码 无 cardNo String 银行卡号 无 cardType String 刷卡方式 无 cashierName String 收银员 无 cashierNum String 收银员号 无 clearingDate String 清算日期 无 compInfoA1 String 签购单收单行 无 compInfoA2 String 签购单商户号 无 compInfoA3 String 签购单终端号 无 compInfoA4 String markup 无 compInfoA6 String 借贷记标识 无 compInfoA7 String 营销信息 无 compInfoA8 String 二维码信息 无 coupon String 支付宝/微信优惠金额 无 field55 String IC卡交易的TAG信息 无 insCode String 受理方标识码 无 localTransDate String 受卡方所在地日期 无 localTransTime String 受卡方所在地时间 无 merCode String 受卡方标识码（商户号） 无 merDiscount String 商家优惠金额 无 originTraceNum String 原交易凭证号 无 outOrderNum String 外部订单号 无 posInputStyle String 服务点输入方式码 无 processflag String 扫码支付09状态的交易是否成功 附件表1 refNum String 检索参考号 无 respCode String 应答码 \"00\"表示成功 revAuthCode String 授权标识应答码 无 revInsCode String 附加响应数据 无 revOrderNum String 自定义域，用于扫码支付业务。 无 scanCodeId String 扫码号 无 termCode String 终端号 无 traceNum String 受卡方系统跟踪号 合作方交易流水 transAmt String 交易金额 无 transCode String 交易类型码 无 transCurr String 交易货币代码 无 transDate String 原交易日期 无 transDatetime String 受卡方所在地日期＋受卡方所在地时 无 transRate String 持卡人扣帐汇率 无 10、CFCardSDK工具类 如果不需要自定义刷卡类、密码键盘样式。银行卡交易可直接使用CFCardSDK方法，在调用的Activity中onActivityResult中接收交易结果 /** * 银行卡消费 * * @param context context对象 * @param amount 消费金额 */ CFCardSDK.consumeOfBank(context, amount); /** * 银行卡撤销 * * @param context context对象 * @param trans 原交易信息 */ CFCardSDK.cancelOfBank(context, trans); /** * 银行卡退货 * * @param context context对象 * @param refNum 参考号 * @param tradeDate 交易时间 * @param tradeAmount 交易金额 */ CFCardSDK.refundOfBank(context,refNum,tradeDate,tradeAmount); /** * 银行卡余额查询 * * @param context context对象 */ CFCardSDK.balanceOfBank(context); /** * 预授权 * * @param context context对象 * @param amount 预授权金额 */ CFCardSDK.preAuth(context,amount); /** * 预授权撤销 * * @param context context对象 * @param amount 预授权金额 * @param tradeDate 预授权时间 * @param revAuthCode 授权码 */ CFCardSDK.preAuthCancel(context,amount,tradeDate,revAuthCode) ; /** * 预授权完成 * * @param context context对象 * @param amount 预授权金额 * @param tradeDate 预授权时间 * @param revAuthCode 授权码 */ CFCardSDK.preAuthComp(context, amount,tradeDate,revAuthCode) /** * 预授权完成撤销 * * @param context context对象 * @param trans 原预授权完成交易 */ CFCardSDK.preAuthCompCancel(context,trans) ; /** * dcc转edc * * @param context context对象 * @param trans 原交易 */ CFCardSDK.dcc2edc(context,trans); onActivityResult(int requestCode, int resultCode, Intent data) 信息含义与Extra信息获取方式 返回信息包括 resultCode 取值范围 Constants.RESULT_OK : 0x555;//交易有结果返回，但不代表本笔交易成功 Constants.RESULT_ERROR : 0x666;//交易出现异常 交易类型： int transType = intent.getIntExtra(Constants.TRANS_TYPE, Constants.UNKNOWN); transType 取值范围： Constants.BANK_CONSUME : 0x001; // 消费 Constants.QR_CONSUME : 0x002; // 扫码 Constants.DCC_TO_EDC : 0x003; // dcc转edc Constants.QR_CANCEL : 0x004; // 扫码撤销 Constants.BANK_CANCEL : 0x005; // 撤销 Constants.BANK_REFUND : 0x006; // 退货 Constants.BANK_BALANCE : 0x007; // 余额查询 Constants.BANK_AUTH : 0x008; // 预授权 Constants.BANK_AUTH_CANCEL : 0x009; // 预授权撤销 Constants.BANK_AUTH_COMP : 0x010; // 预授权完成 Constants.BANK_AUTH_COMP_CANCEL : 0x011; // 预授权完成取消 Constants.FROM_BANK_REFUND_ACTIVITY : 0x012; // 银行卡退货 Constants.FROM_QR_REFUND_ACTIVITY : 0x013; // 扫码退货 Constants.FROM_TIP_TAKE_ACTIVITY : 0x014; // 收取小费 Constants.FROM_TIP_REVOKE_ACTIVITY : 0x015; // 小费撤销 交易结果 当resultCode == Constants.RESULT_OK时，会有结果返回 Trans trans = data.getParcelableExtra(Constants.CONSUME_RESULT); Intent中Extra信息的Key由com.cardinfolink.sdk.constant.Constants获取 b、扫码交易 扫码相关的交易则是不依赖 POS 机器的读卡模块的,但是你需要将 微信 或者 支付宝 的二维码读出来传给扫码消费接口,扫码可以使用第三方库,如 zxing 。 /** * 扫码消费 */ CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); /** * 扫码撤销 */ request.setAmount(amount);//原交易金额 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证(流水)号 request.setReferenceNumber(refNum); //原交易参考号 CILSDK.revokeConsumeQr(request, new Callback<CILResponse>()）{ ... } /** * 扫码退货 */ request.setAmount(amount);//退款金额 request.setReferenceNumber(serialNum);//原交易参考号 request.setTransDatetime(tradeDate);//原交易时间 CILSDK.returnConsumeQr(request, new Callback<CILResponse>()） /** * 扫码查询 */ request.setBatchNum(response.getTrans().getBatchNum()); request.setTraceNum(response.getTrans().getTraceNum()); request.setPeriod(10000L);//10s request.setLimitTime(6);//6 次 request.setReferenceNumber(response.getTrans().getRefNum()); request.setPosInputStyle(response.getTrans().getPosInputStyle()); request.setScanCodeId(response.getTrans().getScanCodeId()); request.setAmount(response.getTrans().getTransAmt()); CILSDK.queryQr(request, new Callback<CILResponse>() { ... } /** * 扫码消费查询,只查询一次，不含取消接口 * * @param request * @param listener */ CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum()); request.setTraceNum(response.getTrans().getTraceNum()); request.setReferenceNumber(response.getTrans().getRefNum()); request.setPosInputStyle(response.getTrans().getPosInputStyle()); request.setScanCodeId(response.getTrans().getScanCodeId()); public static void queryQrJustOnce(CILRequest request, Callback<CILResponse> listener) { ... } /** * 扫码取消 * 对于09状态的消费订单，最终需要取消、关单 * @param request * @param listener */ CILRequest cilRequest = new CILRequest(); cilRequest.setOriginalTradeDate(response.getTrans().getTransDate()); cilRequest.setAmount(response.getTrans().getTransAmt()); cilRequest.setBatchNum(response.getTrans().getBatchNum()); cilRequest.setTraceNum(response.getTrans().getTraceNum()); cilRequest.setPosInputStyle(response.getTrans().getPosInputStyle()); cilRequest.setReferenceNumber(response.getTrans().getRefNum()); public static void voidQr(CILRequest request, Callback<CILResponse> listener) { ... } /** * 扫码预授权 */ CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.preAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { // 处理扫码预授权结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { //扫码预授权出错 } }); /** * 扫码预授权撤销 */ CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 request.setBatchNum(curTrans.getBatchNum());//原预授权交易批次号 request.setTraceNum(curTrans.getTraceNum());//原预授权交易凭证（流水）号 CILSDK.revokePreAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); /** * 扫码预授权完成 */ CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 CILSDK.preAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); /** * 扫码预授权完成撤销 */ CILRequest request = new CILRequest(); request.setAmount(transaction.getTransAmt());//原预授权完成交易金额 request.setBatchNum(transaction.getBatchNum());//原预授权完成交易批次号 request.setTraceNum(transaction.getTraceNum());//原预授权完成交易凭证（流水）号 request.setReferenceNumber(transaction.getRefNum());//原预授权完成交易参考号 CILSDK.revokePreAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); 账单查询 智能 POS SDK 分别提供了近7天的 账单列表查询 和 账单统计接口 接口,接口会根据 type 值确定返回 银行卡账单 或 扫码账单 。 交易成功还是失败最终以返回账单中应答码为准，见 应答码表 。 交互设计建议：交易中，具体来说，调用CILSDK.consumeQr()或是CILSDK.consume()方法时，当因为网络中断进入onError callback时，建议在交互中加入 查询账单列表 的逻辑，这样交易失败后可方便收银员通过账单来确认这笔订单的实际状态。 注意：对于 09 （请求正在处理中）状态的交易账单数据，还需要看 处理标志位 才能判定此次交易成功与否，使用 getProcessFlag() 获取。 当 processFlag 为 '0' 时，此次交易成功；当 processFlag 为非'0' 时，此次交易失败，见 处理标志表 。 /** * 获取账单列表 异步 * * @param page 从0开始 * @param size 每页返回的条数 * @param type 账单类型 * <ul> * <li>TransConstants.CARD_BILL:银行卡账单</li> * <li>TransConstants.QR_BILL:扫码账单</li> * </ul> * */ CILSDK.getBillsAsync(page, size,@BillType int txnType, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { if (null != response && 0 == response.getStatus()) { //账单获取成功 Trans[] trans = response.getTxn(); //账单数据,字段详情见 Trans } } @Override public void onError(Parcelable p, Exception ex) { //账单获取出错 } }); /** * 获取账单统计信息 异步 * @param type 账单类型 * <ul> * <li>TransConstants.ALL_BILL:所有账单</li> * <li>TransConstants.CARD_BILL:银行卡账单</li> * <li>TransConstants.QR_BILL:扫码账单</li> * </ul> * */ CILSDK.getBillStatAsync(@BillType int txnType, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (null != response && 0 == response.getStatus()) { //账单获取成功 } } @Override public void onError(Parcelable p, Exception ex) { //账单获取出错 } }); /** * 依据凭证号，获取当前批次下的订单详情 * 异步操作 * * @param traceNum 凭证号 * @param listener * @return * @throws Exception */ CILSDK.getBillByTraceNumAsync(String traceNum, new Callback<CILResponse>(){ ... }); SDK 的网络部分使用的是第三方库 okhttp ,以上账单接口分别还提供了相对应的同步接口 getBills 和 getBillStat 。 对于异步接口来说,都会返回一个 Call 对象,你可以在应用出错的时候调用 call.cancel() 取消这次请求,以免造成内存泄露。 结算 结算需求主要用于每日交易结束时或收银员交接班时,对某段时间内的账款核对。商户每日交易结束后,收银员需要统计并核对所有的交易,核对交易统计准确后结算，打印出结算单。 结算会涉及到一个概念-- 批次号 ,我们在前面的交易都会传入一个批次号给 request ,调用结算之后,后续的交易需要将这个批次号加1,因为此批次已经打包结算掉了。 //batchNum 批次号 CILSDK.transSettleAsync(batchNum, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { //打印结算单 } @Override public void onError(Parcelable cilRequest, Exception e) { //结算出错 } }); 如果使用讯联样式结算UI、逻辑直接使用 注意,使用SettleDaoUtil工具类是必须先初始化，SettleDaoUtil.getInstance().init(); SettleDaoUtil.getInstance().gotoLiquidation(context) 打印 本模块可用于根据交易信息打印所需的消费票据。接口不仅提供了一套固定格式的小票样式，而且还可以根据需要自定义打印样式。 主要功能包括小票打印、二维码打印、条形码打印以及图片打印。 特别注意: 中国人民银行和中国银联为了规范市场上的POS机终端，要求终端打印的签购单必须合乎规范，规范内容包括必须打印的字段与正确的字段内容。 签购单规范详情见 签购单规范 打印银行卡类交易、扫码类交易小票 /** trans 交易信息 * lineBreak 小票结尾需要走纸换行的行数 * formatTransCode @FormatTransCode String类型，小票的交易类型 * kind @ReceiptSubtitle int类型，小票的子标题，判断是商户联或者是客户联 * isForeignTrans 是否是外卡类交易 */ CILSDK.printKindsReceipts(trans,lineBreak,formatTransCode, kind, isForeignTrans, new Callback<PrinterResult>(){ @Override public void onResult(PrinterResult response) { if (null ！= printerResult && !\"打印成功\".equals(printerResult.toString())) { //打印成功 } } @Override public void onError(Parcelable cilRequest, Exception e) { //打印失败 } }); 打印结算小票 /** * 打印结算小票 * * transSettles 结算信息List * transDatetime 结算时间 * lineBreak 打印结尾换行数 * formatTransCode 结算类型；TransConstants.TRANS_SETTLE_DETAILS：结算详情小票；TransConstants.TRANS_SETTLE_TOTAL：结算统计小票 * callback 回调 */ CILSDK.printSettleReceipts(transSettles, transDatetime,batchNum, lineBreak, formatTransCode, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 自定义打印 注意：使用自定义打印方法时，若打印内容超过2000个字符，请使用分段打印方式，否则可能出现DeviceRTException /** * 根据二进制数据打印(根据打印规范用户自定义打印小票样式) * * buffer 打印内容 * lineBreak 换行数 * callback 回调 */ CILSDK.printBufferReceipt(buffer, lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印二维码 /** * 打印二维码 * * qrCode 二维码内容 * position 打印位置 0:左对齐；1居中；2：右对齐 * width 二维码宽度 * callback 回调 * */ CILSDK.printQRCode(qrCode,position,width,lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印条形码 /** * 打印条形码 * * barCode 条形码数字 * position 条形码位置 0:左对齐；1居中；2：右对齐 * lineBreak 换行数 * callback 回调 */ CILSDK.printBarCode(String barCode, int position, int lineBreak, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印图片 /** * 打印图片 * * bitmap 图片Bitmap * lineBreak 换行数 * offset 偏移量 * callback 回调 * */ CILSDK.printImage(bitmap, lineBreak, offset, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 其他设置 考虑到使用 SDK 的时候可能还会有其他需求,比如 获取 POS 机的 SN 号 、 设置密钥索引 等,在这里,我们也提供了一部分接口。 获取 SDK 版本 //版本名 String versionName = CILSDK.VERSION_NAME; //版本号 int versionCode = CILSDK.VERSION_CODE; 获取 SN 号 //SN号 String snCode = CILSDK.getDeviceSN(); 设置流水号 //serialNum范围：1~999999 boolean isSuccess = CILSDK.setSerialNum(int serialNum); 获取流水号 //序列号 int serialNum = CILSDK.getSerialNum(); 设置批次号 //batchNum范围：1~999999 boolean isSuccess = CILSDK.setBatchNum(int batchNum); 获取批次号 //批次号 int batchNum = CILSDK.getBatchNum(); 设置联迪密钥区 //1-15的设值范围 CILSDK.setTingA8KeyIndex(2); 设置密钥索引 //分别对应MAIN MAC PIN MES //1-255的设值范围 //可以使用下方提供数值,也可以根据自身程序设值 CILSDK.setTingKeyIndex(4,101,10,150); 以上两个方法请在连接刷卡器(CILSDK.connect)之前使用 工具类 CILPayUtil /** * 将respCode翻译成对应中文解释 */ CILPayUtil.translate(context, respCode)); /** * 将Trans类中的transCode翻译成打印所需的对象 */ CILPayUtil.getFormatTransCode(transCode); /** * 根据billingCurr判断交易是否为外卡类的DCC交易 */ CILPayUtil.isDCCPay(billingCurr); /** * 判断交易是否成功 */ CILPayUtil.isTransSuccess(trans); /** * 根据Trans类中的transCode判断交易是否属于扫码类交易 */ CILPayUtil.isQrPay(transCode); ReceiptFormatUtils /** * 根据Trans类中的TransCode翻译成对应的中文解释 */ ReceiptFormatUtils.getTransType(transCode); /** * 将明文的卡号修改为\"前六后四中间为四个*\"的样式 */ ReceiptFormatUtils.handleCardNum(cardNum); 许可证 Copyright (c) 2016 cardinfolink.com JAVADOC java document 详情见 javadoc","text_tokens":["方","设计","sharedpreference","返回值","other","checkbalance","适配","具体","studio","自定","换行","便","包括","rateinfo","市场","对齐","bundle","参数值","坐标系","且","外部","讯联","快速","data","结尾","这样","定义","联系","后面","转","每天","中断","用于","阶段","connect",",","gps","getbillstat","将","再","读卡器","要求","查看","附件","gotoliquidation","version","值会","cancel","static","null","tpdu","+","公钥","setreferencenumber","constants","发起","com","gcj02","中国人民银行","设备","returnconsumeqr","二进制","银行卡","下面","、","getrespcode","激活码","serialnum","]","四","0x002","方法","需要","值","无法","比如","有点","方便","0x012","类型","硬件","preauthcompcancel","rsa","preauthcomplete","txntype","setbillingamt","一套","最新版","第三方","看","由","settransrate","推荐","isopendcc","另外","被","交接","onactivityresult","签购","如下","getcardexpirationdate","签到","条形","sncode","请","需上","居中","三位","简化","小票","refund","二维码","常用","账单","关","setdebug","才能","流水号","transcurr","5","内存","offset","记","合乎","255","消费","详情","getpinbins","00","java","已经","密钥","讯","全部","清算","跟踪","发放","持久","坐标","可能","onprogressupdate","给","处理","中国银联","是否是","getserialnum","支持","此次","许可证","初始化","行数","原预","super","才","详细","result","已","termcode","balanceofbank","出现异常","改动","code","存储","分段","15","显示","了","再次","是否","选","take","cfcardsdk","但是","compinfoa7","确认","&&","默认","这些","billingamt","qrcode","本笔","想","除","自","public","!","override","其他","getapplicationcontext"," ","规定","tip","扣款","revinscode","是","b","listener","refnum","位置","版本号","09","也","业务","zxing","request","artifactid","分为","状态","并","外","保持","上","读出","异常","gettxn","new","交易类型","读取","不断","就","选择","cardreaderhandler","三方","revauthcode","balance","！","_","之中","printbufferreceipt","连接不断","revordernum","或者","setlimittime","只有",">","主","用户","consumeofbank","打包","printimage","下方","cardtype","程序","setscancodeid","包含","revokeconsumeqr","ex",":","借贷","见下文","<","有效期","查询","集成","子标题","主要","规范","true","参考","具体来说","个字符","resultcode","经历","范围","来","代表","cardinfo","出来","原因","类中取","近","commoncardhandleractivity","取消","必选","银员","0x008","库","每页","localtransdate","10s","时","bill","发版时","键盘","name","说明","；","来说","设置","多次","依赖","returnconsume","0x666","trans","下次","天","101","做","amount","receiptformatutils","android","原扣币","码表","unknown","getinstance","versioncode","开启","到","消费类","所在","账款","groupid","收取","cilpayutil","setrevauthcode","两种","translate","定义域","无需","单号","pom","＋","0x007","transsettles","maven","最新","setlatitude","形码","这笔","还是","序列号","transamt","传入","0x001","dcctoedc","建议","（","控制","getrevauthcode","最终","选择性","origintracenum","确定","4","效期","无","call","10","保证","实际","protected","判定","void","--","连接","样式","a","gettranstype","预","0","implementation","从","biilingamt","getbills","支付宝","如果","响应","持卡人","否则","settracenum","cardnum","使用","生命周期","qr","0x005","}","所在地","1","源码","预留","合作方","tradeamount","应","对","merdiscount","getamount","-","相对","@","自定义","安装","翻译","受卡方","。","符号","response","coupon","结果","1.1","return","revokeconsume","getbillsasync","此","from","handlecardnum","能够","transconstants","复杂","9","失败","采取","*","setcardsequencenumber","billingcurr","条数","对应","maketext","见","国内","服务","[","内部","造成","某","setbillingcurr","application","progresscallback","纬度","接口","出错","加入","文档","扫码","执行","printkindsreceipts","setcardnumb","工作","progress","activewithcode","if","没有","这次","msc","li","第三","新","修改","downloadparams","pos","号文","固定","用","setorderid","respcode","涉及","两个","scancode","特别","setoriginaltradedate","getfield55","之后","输入","模块","单收","transdate","preauthqr","泄露","还会","mac","缓冲","ok","机","等","其实","人民","basecardactivity","issuccess","标识","cashiername","送","每个","dependency","setserialnum","功能","downloadparamswithprogress","setamount","compinfoa3","transrate","左","receiptsubtitle","页面","intent","getparcelableextra","equals","平台","营销","10000l","getdevicesn","能且","注意","根据","savedinstancestate","退货","gettransdate","订单号","之前","nfc","下单","preauth","考虑","settransdatetime","'","isforeigntrans","属于","为了","收银员","回调","进入","auth","高德","waitloadingshow","以上","width","读卡","referencenumber","扣","requestcode","show","数据","3","请求","中文","usd","附加","revokepreauth","能","刷卡","card","999999","但","一次","printqrcode","信用","0x010","会","orderid","简单","\"","可以","调用","一致","化","下发","进度","consume","序列","，","码","工具","aftertranscode","分钟","posinputstyle","批次","字母","装载","class","getprocessflag","磁道","final","length","准确","类中","扣账","收银","结束","流水","接班","具备","机器","本","getsequenceserialnum","内容","下载","getbillstatasync","正在","取值","voidqr","概念","后台","汇率","processflag","为","导入","billtype","右","setfield55","对象","gettrans","智能","outordernum","0x015","前面","buffer","settranscurr","不再","this","先","更新","中间","7","偏移","卡号","本身","非","barcode","正常","规范市场","compinfoa8","转载","boolean","or","关单","为准","卡","initcardevent","表示","进制","能力","versionname","提供","若","交接班","compinfoa6","以免","extra","getintextra","85","localtranstime","二维","开发","一个","让","当","应用","copyright","isqrpay","系统","setpinemv","第一次","继承","应答","curtrans","设值","新版","string","都","以下","31.180606","定位","均","revokepreauthqr","setposinputstyle","与否","setlongitude","仅","域","点","由于","关于","各","统计","total","cancelofbank","初始","或","翻译成","/","导入到",".","isdccpay","索引","拿到","交易","好","当前","必须","同步","sn","位","步骤","激活","联","金额","可","comp","tostring","这里","onresult","及","第一","0x006","a8","error","端口","组织","反馈","cashiernum","优惠","有效","下","mes","形式","需","queryqr","2016","`",")","授权","掉","自己","终端","getsystemparams","代码","gettransrate","我们","腾讯","parcelable","经度","表","超时","检索","debug","数值","名","false","托管","55","...","日期","卡人","银联","possdk","setcardexpirationdate","settle","setcoordinates","getbatchnum","次","field55","时候","中","每日","json","区","param","国人","javadoc","例如","对于","合作","分别","和","二","compinfoa2","okhttp","保存","时间","目录","该","authcode","setcardnum","scancodeid","cilsdk","unknow","0x004","里面","单行","ic卡","许可","page","clearingdate","activitylifecyclecallbacks","getcardnumber","cilrequest","你","gradle","sdk2.4","(","只","cardhandlererror","markup","出","错误","aid","单","当然","图片","zaihui","一台","constant","帐","toast","billingcurrnum","to","票据","走纸","150","基础","不","依据","超过","context","插卡","n900","cilresponse","必要","持卡","信用卡","dcc2edc","waitloadingdismiss","支付","cardinfolink","tracenum","transcode","mercode","体验","compinfoa4","公司","dcc","batchnum","部分","大概","121.600228","新增","格式","数","首先","启用","setbatchnum","smart","0x009","则","6","一般","getposinputstyle","获取","getbillingamt","货币","就是","中国","getscancodeid","2000","e","colorprimary","币种","状况","会为","结算","刷卡器","一部分","段","读出来","所有","setlocation","手输","避免","printbarcode","改为","整个","gettrack2","个","ul","情况","擅自","原","如","throws","transdatetime","cardbrand","size","指定","余额","里","内","逻辑","字","明文","通过",";","过程","含","bin","周期","下文","additionalresdata","正确","=","login","settingkeyindex","devicertexception","解释","sdk","客户","号","jcenter","getstatus","商户","填入","tag","consumeqr","formattranscode","微信","凭证","偏移量","这","左右","inscode","preauthcomp","用到","在","else","exception","~","queryqrjustonce","接收","成功","挥卡","preauthcancel","oncreate","refundofbank","联网","getrefnum","以","0x003","百度","type","init","document","details","判断","后","字符串","国际","开","：","参数","0x011","客服","流程","撤销","kind","revoke","all","重复","transaction","一些","setperiod","出现","存储设备","信息","active","译成","因为","而且","main","extends","getbillingcurr","取自","开发者","订单","bank","旧","transtype","核对","列表","号加","position","得到","宽度","8","发送","准备","外卡","所","需求","getmessage","demo","app","还","银行","int","生命","）","操作","返回","字符","数字","即可","2","后续","自身","onerror","bd09","settledaoutil","一部","退款","四个","去","signin","相关","gettracenum","与","受理","有","0x555","|","ic","加密","交互","卡预","edc","c","小费","p","条形码","标题","printerresult","或是","istranssuccess","info","preauthcompleteqr","段时间","传给","标识码","activity","compinfoa1","wgs84","联迪","location","直接","以及","getbillbytracenumasync","{","的","ui","密码","datetime","settinga8keyindex","linebreak","skd","bitmap","开始","getformattranscode","版本","callback","short","标志","非必要","cardno","接入","完成","异步","gettransamt","网络","前六后","进行","不要","revokepreauthcomplete","setsecondtrack","key","originaltradedate","0x014","商家","这个","配置","导致","卡片","0x013","revokepreauthcompleteqr","若有","类","不仅","printsettlereceipts","list","地址","含义","备注","颜色","tradedate","方式","种类","您","transsettleasync","pin","2.5","打印"],"title":"Sdkapi","title_tokens":["sdkapi"]},{"location":"documentation/sdkapi/#_1","text":"讯联智能 POS SDK 为开发者准备了一个简单的 demo 程序,可以快速体验 SDK 接入流程。可以在这里 下载demo 。 下载 POS-demo 之后将整个目录导入到您的 Android Studio 之中。","text_tokens":["在","demo","开发","一个","studio","的","整个","之中","下载","android","导入到","接入","程序","为","讯联","了","导入","快速","智能","pos","流程","体验","这里",",","之后","将","目录","-","sdk","开发者","。"," ","您","简单","准备","可以"],"title":"快速体验","title_tokens":["体验","快速"]},{"location":"documentation/sdkapi/#_2","text":"为了方便 SDK 的集成使用，本 SDK 已使用 jcenter 托管，配置如下 gradle: implementation 'com.cardinfolink.smart.pos:PosSDK:2.5.2' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>PosSDK</artifactId> <version>2.5.2</version> <type>pom</type> </dependency> 如果想使用讯联集成的结算UI和逻辑，请配置 gradle: implementation 'com.cardinfolink.smart.pos:SDK-ZaiHui:1.1.1' or maven: <dependency> <groupId>com.cardinfolink.smart.pos</groupId> <artifactId>SDK-ZaiHui</artifactId> <version>1.1.1</version> <type>pom</type> </dependency> 读卡、输入密码的颜色取自colorPrimary。如果需要自定义样式，请参考 Demo ，下载源码修改 注意：1.1.1版本直接指定了PosSDK的版本号，不再使用默认最新版的PosSDK，如非必要，不要再配置PosSDK的版本","text_tokens":["colorprimary","，","结算","自定","本","下载","如","讯联","指定","groupid","逻辑","定义","不再","再","pom","maven","version","最新","sdk","jcenter","com","or","、","需要","方便","新版","样式","type","最新版","implementation","/",".","如果","：","如下","请","使用","1","源码","-","自定义","取自","。","1.1","demo","2","已","托管","possdk","了","修改","pos","和","默认","输入","想"," ","dependency","版本号","artifactid","gradle","直接","注意","的","ui","zaihui","密码","版本",">","'","非必要","必要",":","不要","<","为了","集成","cardinfolink","配置","参考","读卡","颜色","smart","2.5"],"title":"快速集成","title_tokens":["集成","快速"]},{"location":"documentation/sdkapi/#pos","text":"使用 N900 智能 POS 机器, 我们的应用首先需要连接 POS 机硬件, 使用 SDK 提供的 connect 方法连接。 建议在 Application 的 onCreate 方法中进行连接。 @Override public void onCreate() { super.onCreate(); ... CILSDK.setDebug(true);//发版时请改为 false CILSDK.connect(this); ... } 如果还适配了联迪A8设备的，联迪设备login需要传入activity的context, 建议在 主activity onCreate中 再调用 CILSDK.connect(this); 如果没有与app生命周期一致的activity,建议在每个可能调用设备刷卡、加密、打印的activity中再调用 CILSDK.connect(this)， 保证使用过程中设备连接不断开；另外推荐在ActivityLifecycleCallbacks中处理设备连接。","text_tokens":["一致","，","适配","发版时","；","改为","机器","智能","this","connect",",",";","过程","周期","再","login","sdk","传入","建议","设备","提供","、","在","方法","应用","需要","保证","oncreate","void","硬件","连接","推荐","另外","开","/",".","如果","请","使用","生命周期","}","setdebug","@","a8","。","打印","app","还","可能",")","生命","处理","我们","super","application","false","...","与","没有","了","中","加密","pos","public","机","override"," ","每个","cilsdk","activity","activitylifecyclecallbacks","联迪","(","{","的","不断","连接不断","主","context","n900","进行","true","首先","刷卡","调用"],"title":"连接POS机","title_tokens":["机","连接","pos"]},{"location":"documentation/sdkapi/#pos_1","text":"a、新激活接口（推荐） 根据用户反馈，为了简化激活流程，我们采取激活码的方式激活，当你拿到 POS 机器之后，我们会为这个商户发放激活码，一个激活码可以激活一台 POS 机。 成功激活后，接口会返回商户号，终端号等信息，后续参数下载需要用到。 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。 //authCode 激活码（建议用扫码的方式得到激活码，避免让用户手输） CILSDK.activeWithCode(authCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败，失败原因见 cilResponse.getMessage() } } @Override public void onError(Parcelable cilRequest, Exception e) { //激活出错 } }); b、旧激活接口 第一次使用智能 POS 终端的时候,需要使用讯联下发的商户号 merCode 和终端号 termCode 激活, 激活成功之后才能正常使用后面的交易流程。 注意:一台终端能且仅能成功激活一次,无法重复进行激活操作。若有多次激活的需求(如debug阶段),请联系讯联客服。推荐APP本身能够保持设备是否已经激活标志 //merCode 讯联下发的商户号 //termCode 讯联下发的终端号 CILSDK.active(merCode, termCode, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { if (cilResponse.getStatus() == 0) { //激活成功 } else { //激活失败 } } @Override public void onError(Parcelable p, Exception e) { //激活出错 } });","text_tokens":["下发","，","会为","手输","避免","多次","机器","下载","如","讯联","智能","联系","后面","阶段",";",",","=","本身","正常","号","getstatus","商户","建议","设备","（","、","用到","激活码","else","exception","成功","一个","让","当","需要","无法","第一次","void","a","仅","0","推荐","后","/",".","拿到","交易","参数","请","客服","使用","激活","流程","}","简化","重复","onresult","第一","信息","active","@","才能","反馈","。","旧","得到","能够","已经","需求","失败","采取","getmessage","app","发放",")","见","）","终端","操作","返回","我们","parcelable","后续","onerror","debug","termcode","接口","出错","扫码","activewithcode","if","时候","新","是否","pos","用","和","之后","p","public","机","等","override"," ","authcode","b","cilsdk","cilrequest","你","(","保持","能且","new","根据","注意","{","的","一台","callback",">","用户","标志","cilresponse","进行",":","<","为了","mercode","这个","若有","能","方式","一次","原因","会","可以","e"],"title":"激活POS机","title_tokens":["机","pos","激活"]},{"location":"documentation/sdkapi/#_3","text":"激活成功之后,你的应用还需要下载一些交易时使用的参数,比如 交易地址和端口 、 交易超时时间 、 终端支持的功能 、 TPDU 等, 在你拿到 POS 终端之前,这些参数都会在讯联后台已经配置好,全部参数见 CILResponse.Info 返回值。下载成功之后 SKD 会 以json字符串的形式保存这些参数到 SharedPreference (请不要擅自改动这些参数值,以免导致交易失败) 。当然,在 onResult 中也会返回,你也可以自己选择性保存一些参数。另外, SDK 保存在 SharedPreference 里的值会提供接口 CILSDK.getSystemParams() 获取。 注意：正常情况下，此方法只需执行成功一次，但是后台参数配置可能会有改动，APP本身需要调用预留功能调用此方法 //merCode 讯联下发的商户号 激活成功之后可以确定商户号 //termCode 讯联下发的终端号 激活成功之后可以确定终端号 CILSDK.downloadParams(merCode, termCode, new com.cardinfolink.pos.listener.Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) { //参数下载成功,具体返回的参数见 response.Info } else { //参数下载错误 } } @Override public void onError(Parcelable p, Exception e) { //下载出错 } });","text_tokens":["下发","，","sharedpreference","返回值","时","具体","下载","参数值","情况","擅自","后台","到","讯联","里",";",",","=","值会","本身","tpdu","sdk","正常","号","getstatus","商户","com","提供","、","以免","exception","在","选择性","确定","else","成功","方法","应用","需要","比如","void","都","以","0","字符串","另外","：",".","/","交易","拿到","好","参数","请","使用","激活","联","}","onresult","预留","一些","@","端口","。","response","下","此","已经","形式","讯","全部","失败","需","app","还","可能",")","见","自己","终端","getsystemparams","返回","字符","支持","parcelable","超时","onerror","termcode","数值","接口","出错","改动","执行","有","if","中","json","downloadparams","pos","但是","和","之后","这些","保存","时间","p","public","override","等"," ","listener","cilsdk","info","也","功能","你","(","只","错误","new","当然","注意","{","的","选择","之前","skd","callback",">","cilresponse","不要","<","cardinfolink","mercode","配置","导致","地址","e","一次","获取","会","可以","调用"],"title":"终端参数下载","title_tokens":["下载","参数","终端"]},{"location":"documentation/sdkapi/#_4","text":"终端密钥下载只需要成功执行一次就可以,成功下载的密钥会被转载到POS硬件模块里面,后面就不需要再次调用了,建议你的应用可以在成功下载密钥之后持久化一个标志位, 下次进入应用就不再去下载密钥了。整个过程可能会需要1~2分钟左右(依赖当前的网络状况),会经历以下步骤: 请求讯联网关 RSA -> 装载 RSA -> 请求主密钥 -> 装载主密钥 -> 启用主密钥 -> 请求工作密钥(签到) -> 装载工作密钥 -> 下载 AID -> 装载 AID -> 下载 IC 公钥 -> 装载 IC 公钥。 建议APP本身存储设备是否已经初始化方法标志。 注意：此方法一般只需要安装后成功调用一次即可。但银行交互密钥有可能会更新，APP本身需要调用预留功能调用此方法 CILSDK.downloadParamsWithProgress(new ProgressCallback<CILResponse>() { @Override public void onProgressUpdate(int progress) { //progress下载密钥的进度 } @Override public void onResult(CILResponse response) { if (0 == response.getStatus()) //密钥下载成功。在这里可以持久化一个标志位 } @Override public void onError(Parcelable p, Exception e) { //下载密钥出错 } });","text_tokens":["化","，","状况","分钟","装载","依赖","整个","下次","下载","到","后面","不再","过程",",","更新",";","=","本身","公钥","getstatus","转载","建议","设备","左右","exception","在","~","成功","一个","方法","需要","应用","联网","void","硬件","以下","rsa","0","被","初始","后","：",".","/","当前","签到","位","步骤","}","1","预留","onresult","这里","存储设备","关","-","安装","@","。","response","此","已经","密钥","讯","app","int","持久","银行","可能",")","onprogressupdate","终端","即可","2","初始化","parcelable","进度","onerror","去","progresscallback","出错","执行","存储","工作","progress","有","if","了","ic","再次","是否","pos","交互","之后","模块","p","public","override"," ","cilsdk","功能","downloadparamswithprogress","里面","你","只","(","aid","new","注意","{","的","就","不",">","标志","主","cilresponse","网络",":","<","进入","经历","请求","启用","e","但","一次","一般","会","可以","调用"],"title":"终端密钥下载","title_tokens":["密钥","下载","终端"]},{"location":"documentation/sdkapi/#_5","text":"签到其实也就是更新工作密钥的一个过程 ( 下载工作密钥+装载工作密钥 ),讯联网关平台要求应用需要每天签到一次。 CILSDK.signIn(new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { //签到成功 } @Override public void onError(Parcelable cilRequest, Exception e) { //签到出错 } });","text_tokens":["密钥","讯","cilrequest","exception","成功","一个","(",")","平台","应用","需要","装载","new","联网","{","的","parcelable","void","onerror","signin","出错","下载","callback",">","工作","/",".","cilresponse","签到","<","}","每天","过程","更新",",","onresult",";","关","要求","@","public","override","其实","+","。"," ","一次","cilsdk","就是","也","e"],"title":"签到","title_tokens":["签到"]},{"location":"documentation/sdkapi/#_6","text":"SDK 将交易分为 银行卡交易 (刷卡、插卡和挥卡)和 扫码交易 (支付宝和微信)两种。银行卡相关交易需要POS机硬件模块读卡器,扫码相关交易则不需要。","text_tokens":["银行","(",")","需要","挥卡","硬件","扫码","相关","不","支付宝","插卡","交易","支付","pos","两种","和",",","模块","将","读卡","读卡器","机","sdk","。","刷卡"," ","则","微信","银行卡","、","分为"],"title":"发起交易","title_tokens":["发起","交易"]},{"location":"documentation/sdkapi/#a","text":"由于银行卡交易逻辑有点复杂,讯联提供了一个 BaseCardActivity 基础类,你只需要继承这个类便可以做银行卡类的交易了。具体使用方法可以见 demo 里的 CommonCardHandlerActivity 类。下面给个大概说明: public class CommonCardHandlerActivity extends BaseCardActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //... } /** * 必须传入金额 * * @return */ public String getAmount() { //在这里传入金额 } /** * 此方法为控制sdk内部是否开启DCC交易逻辑（sdk2.4.1版本及以上支持该方法） * *@return 需要进行DCC交易时，返回true，否则返回false */ public boolean isOpenDcc() { //只有刷卡消费和刷卡预授权才支持DCC交易 //如果接入方无需支持DCC，则此方法返回false即可 return false; } /** * 读卡的结果（sdk2.4.1版本及以上新增RateInfo参数，返回DCC读卡流程中进行汇率查询的结果） * * @param isSuccess 是否成功 * @param cardType 卡片种类(-1(unknow) 1(msc) 2(ic) 3(nfc) 4(scancode) 5(other)) * @param cardInfo 读取卡片信息 * @param rateInfo 汇率信息 */ public void cardReaderHandler(boolean isSuccess, @CardType.Type int cardType, CardInfo cardInfo, RateInfo rateInfo){ //读卡成功后才发起交易 if (!isSuccess || cardInfo == null) { Toast.makeText(getApplicationContext(), \"读卡失败\", Toast.LENGTH_SHORT).show(); initCardEvent(); return; } //1. 根据银联85号文规定，智能终端需上送经度，纬度，坐标系信息到卡组织 CILRequest request = new CILRequest(); request.setLongitude(121.600228);//设置经度 request.setLatitude(31.180606);//设置纬度 request.setCoordinates(\"GCJ02\");//设置坐标系 //关于坐标系，国内一些常用第三方取值：百度（BD09），高德、腾讯（GCJ02），GPS（WGS84）。 //一般第三方定位SDK都能从定位后返回的位置信息类中取到，详细可查看各第三方接入文档。 //2.如果接入方需要进行DCC交易，需将汇率信息填入request中，否则无需处理 CILRequest request = new CILRequest(); ... if (rateInfo != null) { request.setBillingAmt(rateInfo.getBillingAmt());//设置扣账金额 request.setBillingCurr(rateInfo.getBillingCurr());//设置扣账币种 request.setTransRate(rateInfo.getTransRate());//设置交易汇率 request.setBatchNum(rateInfo.getBatchNum());//设置汇率请求批次号 request.setTraceNum(rateInfo.getTraceNum());//设置汇率请求流水号 } //3. 在这里面发送银行卡相关的交易(如消费、消费撤销、退货、预授权、预授权撤销、预授权完成、预授权完成撤销、余额查询) //CILSDK.consume(request, cardType, new Callback<CILResponse>() //消费 } /** * 显示读卡时的缓冲页面 */ public void waitLoadingShow(){ } /** * 取消读卡时的缓冲页面 */ public void waitLoadingDismiss(){ } /** * 读卡失败 */ public void cardHandlerError(Exception e){ } } 注意: 调用银行卡类交易接口时，需要传入CILRequest以及CardType，且所有接口中CILRequest均需要传入以下信息： /** * @param: request:请求信息 * @param: cardType:卡片类型 */ request.setAmount(amount);//消费金额 /** * 刷卡获取的cardInfo信息 */ request.setCardNumb(cardInfo.getCardNumber());//卡号 request.setCardExpirationDate(cardInfo.getCardExpirationDate());//卡片有效期 request.setPinEmv(cardInfo.getPinBins());//卡bin request.setCardSequenceNumber(cardInfo.getSequenceSerialNum());//卡片序列号 request.setField55(cardInfo.getField55());//55域信息 request.setSecondTrack(cardInfo.getTrack2());//二磁道信息 request.setOrderId(orderId);//可选参数。（消费、退货、预授权、预授权完成、扫码下单、扫码退货） request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权）","text_tokens":["方","consume","序列","，","other","币种","时","批次","所有","class","具体","磁道","说明","setlocation","length","便","设置","扣账","流水","gettrack2","具备","做","rateinfo","个","amount","getsequenceserialnum","bundle","坐标系","取值","取消","汇率","为","开启","讯联","到","如","且","setfield55","余额","里","智能","逻辑","用于",";",",","gps","无需","处理","bin","将","查看","=","setlatitude","卡号","null","sdk","序列号","填入","号","传入","发起","boolean","gcj02","卡","initcardevent","这","能力","（","下面","银行卡","提供","、","控制","以下","exception","在","85","4","效期","成功","一个","方法","需要","oncreate","setpinemv","protected","有点","继承","void","string","定位","都","调用","31.180606","type","百度","setbillingamt","均","第三方","预","setlongitude","域","从","由于","关于","各","settransrate","isopendcc","后","/",".","如果","：","交易","getcardexpirationdate","参数","必须","否则","settracenum","使用","需上","可","}","流程","金额","撤销","类型","1","这里","及","一些","信息","常用","getamount","-","@","流水号","extends","5","getbillingcurr","组织","。","结果","消费","return","有效","此","getpinbins","发送","复杂","*","\"","失败","demo","int","银行","坐标","需","setcardsequencenumber",")","授权","见","给","）","maketext","终端","返回","国内","支持","内部","即可","2","经度","腾讯","super","才","详细","bd09","setbillingcurr","纬度","false","接口","文档","...","gettracenum","相关","setcardnumb","银联","显示","setcardexpirationdate","55","扫码","setcoordinates","if","有","了","getbatchnum","msc","中","ic","|","第三","param","gettransrate","是否","选","号文","setorderid","和","scancode","二","getfield55","public","该","!","override","缓冲","getapplicationcontext","basecardactivity"," ","issuccess","规定","送","cilsdk","unknow","位置","里面","request","setamount","getcardnumber","cilrequest","你","wgs84","sdk2.4","页面","location","只","(","cardhandlererror","上","以及","new","根据","savedinstancestate","{","的","读取","退货","注意","cardreaderhandler","toast","三方","nfc","_","下单","基础","版本","只有","short","callback",">","接入","cardtype","完成","cilresponse","进行",":","<","waitloadingdismiss","查询","有效期","setsecondtrack","高德","这个","true","以上","dcc","卡片","waitloadingshow","类","读卡","大概","show","121.600228","新增","3","请求","能","刷卡","cardinfo","setbatchnum","种类","则","一般","获取","getbillingamt","类中取","orderid","commoncardhandleractivity","必选","可以","e"],"title":"a、银行卡交易","title_tokens":["a","银行","银行卡","交易","、"]},{"location":"documentation/sdkapi/#1","text":"消费接口 request必须包含参数: CILSDK.consume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","cilrequest","consume","(",")","new","parcelable","{","void","onerror","接口","...","callback",">",".","cardtype","cilresponse","包含","参数","必须",":","<","}","onresult",",",";","@","public","override"," ","消费","cilsdk","request","e"],"title":"1、消费","title_tokens":["、","1","消费"]},{"location":"documentation/sdkapi/#2","text":"撤销接口 request必须包含参数: /** * 撤销接口除基础信息外， * 还需要原交易信息 */ request.setReferenceNumber(transaction.getRefNum());//原交易参考号 request.setRevAuthCode(transaction.getRevAuthCode());//原交易授权码 request.setBatchNum(transaction.getBatchNum());//原交易批次号 request.setTraceNum(transaction.getTraceNum());//原交易凭证号 CILSDK.revokeConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","*","cilrequest","，","还","外","(",")","授权","需要","批次","new","parcelable","{","getrefnum","void","onerror","接口","基础","gettracenum","callback",">","...","原","/",".","cardtype","cilresponse","交易","包含","getbatchnum","参数","必须",":","settracenum","<","setrevauthcode","}","撤销",";","transaction","参考",",","onresult","信息","除","@","public","override","setreferencenumber","号"," ","setbatchnum","e","凭证","revokeconsume","cilsdk","request","码","getrevauthcode"],"title":"2、撤销","title_tokens":["撤销","、","2"]},{"location":"documentation/sdkapi/#3","text":"退货接口 request必须包含参数: /** * 退货接口除基础信息外 * 还需要原交易信息 */ request.setReferenceNumber(referenceNumber); request.setTransDatetime(tradeDate); CILSDK.returnConsume(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","*","cilrequest","还","外","(",")","需要","new","parcelable","{","退货","void","onerror","returnconsume","settransdatetime","接口","基础","callback",">","...","原","/",".","cardtype","cilresponse","交易","包含","参数","必须",":","<","}",";",",","onresult","referencenumber","信息","除","@","public","override","setreferencenumber"," ","tradedate","cilsdk","request","e"],"title":"3、退货","title_tokens":["退货","、","3"]},{"location":"documentation/sdkapi/#4","text":"余额查询接口 request必须包含参数: CILSDK.checkBalance(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","cilrequest","checkbalance","(",")","new","parcelable","{","void","onerror","接口","...","callback",">",".","cardtype","cilresponse","包含","参数",":","必须","余额","<","查询","}","onresult",",",";","@","public","override"," ","cilsdk","request","e"],"title":"4、余额查询","title_tokens":["查询","、","4","余额"]},{"location":"documentation/sdkapi/#5","text":"预授权接口 request必须包含参数: request.setLocation(location)//有终端具备获取位置信息能力时必选上送（ 用于消费 预授权） CILSDK.preAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","cilrequest","location","授权","(",")","时","终端","上","）","setlocation","new","parcelable","{","void","onerror","具备","preauth","预","接口","...","callback",">","/",".","cardtype","cilresponse","有","包含","参数","必须",":","<","}","用于","onresult",",",";","信息","@","public","override"," ","送","消费","cilsdk","获取","位置","能力","（","request","必选","e"],"title":"5、卡预授权","title_tokens":["卡预","5","授权","、"]},{"location":"documentation/sdkapi/#6","text":"预授权撤销接口 request必须包含参数: /** * 预授权撤销接口除基础信息外 * 还需要原预授权交易信息 */ request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.revokePreAuth(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","*","cilrequest","还","外","授权","(",")","需要","new","parcelable","{","原预","void","onerror","预","接口","settransdatetime","基础","callback","日期",">","...","/",".","cardtype","cilresponse","包含","交易","参数","必须",":","<","originaltradedate","setrevauthcode","}","撤销",";",",","onresult","信息","除","@","public","override","revokepreauth"," ","authcode","cilsdk","request","码","e"],"title":"6、卡预授权撤销","title_tokens":["卡预","撤销","授权","6","、"]},{"location":"documentation/sdkapi/#7","text":"预授权完成接口 request必须包含参数: /** * 预授权完成接口除基础信息外 * 还需要原预授权交易信息 */ request.setRevAuthCode(authCode);//原预授权交易授权码 request.setTransDatetime(originalTradeDate);//原预授权交易日期 CILSDK.preAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","*","cilrequest","还","外","授权","(",")","需要","new","parcelable","{","原预","void","onerror","preauthcomplete","预","接口","settransdatetime","基础","callback","日期",">","...","/",".","完成","cardtype","cilresponse","包含","交易","参数","必须",":","<","originaltradedate","setrevauthcode","}",";",",","onresult","信息","除","@","public","override"," ","authcode","cilsdk","request","码","e"],"title":"7、卡预授权完成","title_tokens":["卡预","授权","完成","、","7"]},{"location":"documentation/sdkapi/#8","text":"预授权完成撤销接口 request必须包含参数: /** * 预授权完成撤销接口除基础信息外 * 还需要原预授权完成交易信息 */ request.setReferenceNumber(refNum);//原预授权完成交易参考号 request.setRevAuthCode(authCode);//原预授权完成交易授权码 request.setTraceNum(traceNum);//原预授权完成交易凭证号 request.setBatchNum(batchNum);//原预授权完成交易批次号 request.setTransDatetime(originalTradeDate);//原预授权完成交易日期 CILSDK.revokePreAuthComplete(request, cardType, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["exception","*","cilrequest","还","外","授权","(",")","需要","批次","new","parcelable","{","原预","void","onerror","预","接口","settransdatetime","基础","callback","日期",">","...","/",".","完成","cardtype","cilresponse","包含","交易","参数","必须",":","settracenum","revokepreauthcomplete","<","originaltradedate","setrevauthcode","tracenum","}","撤销",";","参考","batchnum",",","onresult","信息","除","@","public","override","setreferencenumber","号"," ","authcode","setbatchnum","凭证","refnum","cilsdk","request","码","e"],"title":"8、卡预授权完成撤销","title_tokens":["卡预","撤销","授权","完成","8","、"]},{"location":"documentation/sdkapi/#9dccedc","text":"当交易卡片为外卡时，消费类（消费、预授权完成）交易可选择进行DCC转EDC。 CILRequest request = new CILRequest(); request.setCardNum(cardNum);//卡号 request.setTransDatetime(datetime);//原交易时间 request.setAmount(amount);//原交易金额 request.setBillingAmt(biilingAmt);//原扣币金额 request.setReferenceNumber(refNum);//原交易参考号 request.setRevAuthCode(revAuthCode);//原交易授权码 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证号 request.setTransCurr(transCurr);//原交易币种 request.setBillingCurr(billingCurr);//原交易扣款币种 CILSDK.dccToEdc(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable p, Exception e) { ... } });","text_tokens":["，","币种","时","批次","amount","原","原扣币","为","消费类","setrevauthcode","settranscurr","转",";",",","=","卡号","setreferencenumber","号","dcctoedc","凭证","（","、","exception","当","void","setbillingamt","预","biilingamt","/",".","交易","settracenum","cardnum","可","}","金额","onresult","@","transcurr","。","消费","外卡","billingcurr","授权",")","）","parcelable","onerror","setbillingcurr","...","edc","时间","p","public","override"," ","扣款","setcardnum","refnum","cilsdk","request","setamount","cilrequest","(","new","datetime","{","选择","revauthcode","settransdatetime","callback",">","完成","cilresponse","进行","<","tracenum","卡片","dcc","参考","batchnum","setbatchnum","码","e"],"title":"9、DCC转EDC","title_tokens":["9","转","edc","dcc","、"]},{"location":"documentation/sdkapi/#_7","text":"字段 类型 含义 备注 备注 additionalResData String 受理方标识码 无 afterTransCode String 原交易类型 无 batchNum String 批次号 无 billingAmt String 持卡人扣帐金额 无 billingCurr String 持卡人扣帐货币代码符号，三位字母 例如USD billingCurrNum String 持卡人扣帐货币代码,三位数字 无 cardBrand String 国际信用卡公司代码 无 cardNo String 银行卡号 无 cardType String 刷卡方式 无 cashierName String 收银员 无 cashierNum String 收银员号 无 clearingDate String 清算日期 无 compInfoA1 String 签购单收单行 无 compInfoA2 String 签购单商户号 无 compInfoA3 String 签购单终端号 无 compInfoA4 String markup 无 compInfoA6 String 借贷记标识 无 compInfoA7 String 营销信息 无 compInfoA8 String 二维码信息 无 coupon String 支付宝/微信优惠金额 无 field55 String IC卡交易的TAG信息 无 insCode String 受理方标识码 无 localTransDate String 受卡方所在地日期 无 localTransTime String 受卡方所在地时间 无 merCode String 受卡方标识码（商户号） 无 merDiscount String 商家优惠金额 无 originTraceNum String 原交易凭证号 无 outOrderNum String 外部订单号 无 posInputStyle String 服务点输入方式码 无 processflag String 扫码支付09状态的交易是否成功 附件表1 refNum String 检索参考号 无 respCode String 应答码 \"00\"表示成功 revAuthCode String 授权标识应答码 无 revInsCode String 附加响应数据 无 revOrderNum String 自定义域，用于扫码支付业务。 无 scanCodeId String 扫码号 无 termCode String 终端号 无 traceNum String 受卡方系统跟踪号 合作方交易流水 transAmt String 交易金额 无 transCode String 交易类型码 无 transCurr String 交易货币代码 无 transDate String 原交易日期 无 transDatetime String 受卡方所在地日期＋受卡方所在地时 无 transRate String 持卡人扣帐汇率 无","text_tokens":["方","localtransdate","，","aftertranscode","时","posinputstyle","段","批次","字母","收银","流水","原","汇率","processflag","外部","transdatetime","cardbrand","所在","outordernum","定义","字","定义域","用于",",","additionalresdata","单号","＋","附件","transamt","号","compinfoa8","商户","tag","微信","凭证","表示","（","银行卡","inscode","compinfoa6","origintracenum","localtranstime","无","二维","成功","系统","应答","类型","string","点","支付宝","国际","/","响应","签购","交易","持卡人","三位","所在地","金额","1","合作方","二维码","信息","merdiscount","transcurr","订单","记","cashiernum","受卡方","。","符号","优惠","coupon","00","清算","\"","跟踪","billingcurr","银行","授权","）","终端","代码","服务","数字","表","检索","termcode","扫码","日期","卡人","受理","field55","是否","例如","respcode","合作","compinfoa7","compinfoa2","单收","输入","时间","transdate","billingamt","自"," ","标识","cashiername","scancodeid","revinscode","refnum","09","业务","单行","标识码","compinfoa3","ic卡","clearingdate","状态","compinfoa1","transrate","markup","营销","单","交易类型","的","帐","revauthcode","billingcurrnum","订单号","revordernum","持卡","信用卡","cardno","cardtype","借贷","支付","收银员","tracenum","transcode","商家","mercode","compinfoa4","公司","参考","batchnum","扣","数据","usd","附加","含义","备注","刷卡","方式","信用","货币","银员","码"],"title":"交易结果字段说明","title_tokens":["字","结果","段","说明","交易"]},{"location":"documentation/sdkapi/#10cfcardsdk","text":"如果不需要自定义刷卡类、密码键盘样式。银行卡交易可直接使用CFCardSDK方法，在调用的Activity中onActivityResult中接收交易结果 /** * 银行卡消费 * * @param context context对象 * @param amount 消费金额 */ CFCardSDK.consumeOfBank(context, amount); /** * 银行卡撤销 * * @param context context对象 * @param trans 原交易信息 */ CFCardSDK.cancelOfBank(context, trans); /** * 银行卡退货 * * @param context context对象 * @param refNum 参考号 * @param tradeDate 交易时间 * @param tradeAmount 交易金额 */ CFCardSDK.refundOfBank(context,refNum,tradeDate,tradeAmount); /** * 银行卡余额查询 * * @param context context对象 */ CFCardSDK.balanceOfBank(context); /** * 预授权 * * @param context context对象 * @param amount 预授权金额 */ CFCardSDK.preAuth(context,amount); /** * 预授权撤销 * * @param context context对象 * @param amount 预授权金额 * @param tradeDate 预授权时间 * @param revAuthCode 授权码 */ CFCardSDK.preAuthCancel(context,amount,tradeDate,revAuthCode) ; /** * 预授权完成 * * @param context context对象 * @param amount 预授权金额 * @param tradeDate 预授权时间 * @param revAuthCode 授权码 */ CFCardSDK.preAuthComp(context, amount,tradeDate,revAuthCode) /** * 预授权完成撤销 * * @param context context对象 * @param trans 原预授权完成交易 */ CFCardSDK.preAuthCompCancel(context,trans) ; /** * dcc转edc * * @param context context对象 * @param trans 原交易 */ CFCardSDK.dcc2edc(context,trans); onActivityResult(int requestCode, int resultCode, Intent data) 信息含义与Extra信息获取方式 返回信息包括 resultCode 取值范围 Constants.RESULT_OK : 0x555;//交易有结果返回，但不代表本笔交易成功 Constants.RESULT_ERROR : 0x666;//交易出现异常 交易类型： int transType = intent.getIntExtra(Constants.TRANS_TYPE, Constants.UNKNOWN); transType 取值范围： Constants.BANK_CONSUME : 0x001; // 消费 Constants.QR_CONSUME : 0x002; // 扫码 Constants.DCC_TO_EDC : 0x003; // dcc转edc Constants.QR_CANCEL : 0x004; // 扫码撤销 Constants.BANK_CANCEL : 0x005; // 撤销 Constants.BANK_REFUND : 0x006; // 退货 Constants.BANK_BALANCE : 0x007; // 余额查询 Constants.BANK_AUTH : 0x008; // 预授权 Constants.BANK_AUTH_CANCEL : 0x009; // 预授权撤销 Constants.BANK_AUTH_COMP : 0x010; // 预授权完成 Constants.BANK_AUTH_COMP_CANCEL : 0x011; // 预授权完成取消 Constants.FROM_BANK_REFUND_ACTIVITY : 0x012; // 银行卡退货 Constants.FROM_QR_REFUND_ACTIVITY : 0x013; // 扫码退货 Constants.FROM_TIP_TAKE_ACTIVITY : 0x014; // 收取小费 Constants.FROM_TIP_REVOKE_ACTIVITY : 0x015; // 小费撤销 交易结果 当resultCode == Constants.RESULT_OK时，会有结果返回 Trans trans = data.getParcelableExtra(Constants.CONSUME_RESULT); Intent中Extra信息的Key由com.cardinfolink.sdk.constant.Constants获取","text_tokens":["consume","，","时","键盘","自定","包括","0x666","trans","amount","取值","原","unknown","对象","余额","data","0x015","定义","收取","0x008","转",";",",","0x007","=","cancel","constants","sdk","号","0x001","com","银行卡","、","preauthcomp","extra","getintextra","在","0x002","接收","成功","方法","当","需要","preauthcancel","refundofbank","0x012","类型","preauthcompcancel","0x003","样式","type","预","由","cancelofbank","onactivityresult","/","如果",".","：","交易","0x011","使用","qr","0x005","可","comp","金额","撤销","revoke","refund","0x006","tradeamount","出现","信息","@","自定义","error","。","bank","transtype","结果","消费","from","*","int","银行",")","授权","返回","原预","result","balanceofbank","出现异常","扫码","与","有","0x555","中","param","take","cfcardsdk","edc","时间","小费","本笔","ok"," ","tip","refnum","0x004","activity","intent","getparcelableextra","(","直接","异常","交易类型","密码","的","退货","balance","revauthcode","constant","to","_","preauth","不","consumeofbank","context","完成","dcc2edc",":","查询","key","cardinfolink","auth","0x014","0x013","参考","dcc","类","resultcode","requestcode","范围","含义","代表","刷卡","0x009","tradedate","方式","但","获取","0x010","会","取消","码","调用"],"title":"10、CFCardSDK工具类","title_tokens":["工具","cfcardsdk","10","类","、"]},{"location":"documentation/sdkapi/#b","text":"扫码相关的交易则是不依赖 POS 机器的读卡模块的,但是你需要将 微信 或者 支付宝 的二维码读出来传给扫码消费接口,扫码可以使用第三方库,如 zxing 。 /** * 扫码消费 */ CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.consumeQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { // 处理扫码消费结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { // 扫码消费出错 } }); /** * 扫码撤销 */ request.setAmount(amount);//原交易金额 request.setBatchNum(batchNum);//原交易批次号 request.setTraceNum(traceNum);//原交易凭证(流水)号 request.setReferenceNumber(refNum); //原交易参考号 CILSDK.revokeConsumeQr(request, new Callback<CILResponse>()）{ ... } /** * 扫码退货 */ request.setAmount(amount);//退款金额 request.setReferenceNumber(serialNum);//原交易参考号 request.setTransDatetime(tradeDate);//原交易时间 CILSDK.returnConsumeQr(request, new Callback<CILResponse>()） /** * 扫码查询 */ request.setBatchNum(response.getTrans().getBatchNum()); request.setTraceNum(response.getTrans().getTraceNum()); request.setPeriod(10000L);//10s request.setLimitTime(6);//6 次 request.setReferenceNumber(response.getTrans().getRefNum()); request.setPosInputStyle(response.getTrans().getPosInputStyle()); request.setScanCodeId(response.getTrans().getScanCodeId()); request.setAmount(response.getTrans().getTransAmt()); CILSDK.queryQr(request, new Callback<CILResponse>() { ... } /** * 扫码消费查询,只查询一次，不含取消接口 * * @param request * @param listener */ CILRequest request = new CILRequest(); request.setBatchNum(response.getTrans().getBatchNum()); request.setTraceNum(response.getTrans().getTraceNum()); request.setReferenceNumber(response.getTrans().getRefNum()); request.setPosInputStyle(response.getTrans().getPosInputStyle()); request.setScanCodeId(response.getTrans().getScanCodeId()); public static void queryQrJustOnce(CILRequest request, Callback<CILResponse> listener) { ... } /** * 扫码取消 * 对于09状态的消费订单，最终需要取消、关单 * @param request * @param listener */ CILRequest cilRequest = new CILRequest(); cilRequest.setOriginalTradeDate(response.getTrans().getTransDate()); cilRequest.setAmount(response.getTrans().getTransAmt()); cilRequest.setBatchNum(response.getTrans().getBatchNum()); cilRequest.setTraceNum(response.getTrans().getTraceNum()); cilRequest.setPosInputStyle(response.getTrans().getPosInputStyle()); cilRequest.setReferenceNumber(response.getTrans().getRefNum()); public static void voidQr(CILRequest request, Callback<CILResponse> listener) { ... } /** * 扫码预授权 */ CILRequest request = new CILRequest(); request.setAmount(amount); request.setScanCodeId(result);//二维码code request.setOrderId(orderId);//外部订单号（可选参数） CILSDK.preAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { // 处理扫码预授权结果 // 如果结果返回`09`，需要查询该订单获取最终结果，如下： /** * resultCode = response.getTrans().getRespCode(); * if (\"09\".equals(resultCode) ) { * CILSDK.queryQr(); // `queryQr` 方法见下文 * } */ } @Override public void onError(Parcelable cilRequest, Exception e) { //扫码预授权出错 } }); /** * 扫码预授权撤销 */ CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 request.setBatchNum(curTrans.getBatchNum());//原预授权交易批次号 request.setTraceNum(curTrans.getTraceNum());//原预授权交易凭证（流水）号 CILSDK.revokePreAuthQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); /** * 扫码预授权完成 */ CILRequest request = new CILRequest(); request.setAmount(transAmt);//原预授权交易金额 request.setReferenceNumber(revAuthCode);//原预授权交易参考号 request.setTransDatetime(transDate);//原预授权交易时间 CILSDK.preAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } }); /** * 扫码预授权完成撤销 */ CILRequest request = new CILRequest(); request.setAmount(transaction.getTransAmt());//原预授权完成交易金额 request.setBatchNum(transaction.getBatchNum());//原预授权完成交易批次号 request.setTraceNum(transaction.getTraceNum());//原预授权完成交易凭证（流水）号 request.setReferenceNumber(transaction.getRefNum());//原预授权完成交易参考号 CILSDK.revokePreAuthCompleteQr(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable cilRequest, Exception e) { ... } });","text_tokens":["，","10s","读出来","批次","getscancodeid","依赖","流水","机器","amount","voidqr","原","取消","如","外部","gettrans",";",",","含","将","下文","单号","=","static","transamt","号","setreferencenumber","consumeqr","关单","微信","凭证","returnconsumeqr","（","、","getrespcode","最终","exception","serialnum","queryqrjustonce","二维","方法","需要","curtrans","void","getrefnum","revokepreauthqr","setposinputstyle","第三方","预","支付宝","/",".","如果","：","交易","如下","参数","settracenum","使用","可","}","撤销","金额","onresult","transaction","二维码","setperiod","@","订单","。","response","结果","消费","*","queryqr","`",")","授权","）","处理","返回","parcelable","原预","result","onerror","退款","接口","出错","code","相关","扫码","...","gettracenum","if","getbatchnum","次","第三","param","选","pos","setorderid","对于","但是","setoriginaltradedate","模块","时间","preauthqr","transdate","public","该","override"," ","是","listener","cilsdk","zxing","09","refnum","preauthcompleteqr","传给","request","状态","setamount","cilrequest","你","equals","(","只","10000l","读出","new","{","的","退货","三方","gettransdate","订单号","revauthcode","或者","settransdatetime","setlimittime","不","callback",">","完成","setscancodeid","cilresponse","revokeconsumeqr","gettransamt","见下文","<","支付","查询","tracenum","revokepreauthcompleteqr","参考","batchnum","读卡","resultcode","出来","setbatchnum","tradedate","则","6","一次","getposinputstyle","获取","orderid","\"","库","可以","e"],"title":"b、扫码交易","title_tokens":["b","、","扫码","交易"]},{"location":"documentation/sdkapi/#_8","text":"智能 POS SDK 分别提供了近7天的 账单列表查询 和 账单统计接口 接口,接口会根据 type 值确定返回 银行卡账单 或 扫码账单 。 交易成功还是失败最终以返回账单中应答码为准，见 应答码表 。 交互设计建议：交易中，具体来说，调用CILSDK.consumeQr()或是CILSDK.consume()方法时，当因为网络中断进入onError callback时，建议在交互中加入 查询账单列表 的逻辑，这样交易失败后可方便收银员通过账单来确认这笔订单的实际状态。 注意：对于 09 （请求正在处理中）状态的交易账单数据，还需要看 处理标志位 才能判定此次交易成功与否，使用 getProcessFlag() 获取。 当 processFlag 为 '0' 时，此次交易成功；当 processFlag 为非'0' 时，此次交易失败，见 处理标志表 。 /** * 获取账单列表 异步 * * @param page 从0开始 * @param size 每页返回的条数 * @param type 账单类型 * <ul> * <li>TransConstants.CARD_BILL:银行卡账单</li> * <li>TransConstants.QR_BILL:扫码账单</li> * </ul> * */ CILSDK.getBillsAsync(page, size,@BillType int txnType, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { if (null != response && 0 == response.getStatus()) { //账单获取成功 Trans[] trans = response.getTxn(); //账单数据,字段详情见 Trans } } @Override public void onError(Parcelable p, Exception ex) { //账单获取出错 } }); /** * 获取账单统计信息 异步 * @param type 账单类型 * <ul> * <li>TransConstants.ALL_BILL:所有账单</li> * <li>TransConstants.CARD_BILL:银行卡账单</li> * <li>TransConstants.QR_BILL:扫码账单</li> * </ul> * */ CILSDK.getBillStatAsync(@BillType int txnType, new Callback<CILResponse>() { @Override public void onResult(CILResponse response) { if (null != response && 0 == response.getStatus()) { //账单获取成功 } } @Override public void onError(Parcelable p, Exception ex) { //账单获取出错 } }); /** * 依据凭证号，获取当前批次下的订单详情 * 异步操作 * * @param traceNum 凭证号 * @param listener * @return * @throws Exception */ CILSDK.getBillByTraceNumAsync(String traceNum, new Callback<CILResponse>(){ ... }); SDK 的网络部分使用的是第三方库 okhttp ,以上账单接口分别还提供了相对应的同步接口 getBills 和 getBillStat 。 对于异步接口来说,都会返回一个 Call 对象,你可以在应用出错的时候调用 call.cancel() 取消这次请求,以免造成内存泄露。","text_tokens":["设计","consume","每页","，","时","段","批次","bill","所有","getprocessflag","具体","；","来说","final","收银","天","trans","getbillstatasync","ul","正在","取消","码表","processflag","为","billtype","size","对象","智能","逻辑","这样","字","中断","通过",";",",","getbillstat","7","=","cancel","非","null","这笔","sdk","还是","号","getstatus","consumeqr","为准","凭证","建议","（","银行卡","提供","以免","最终","exception","在","确定","]","call","成功","方法","一个","当","需要","应用","值","实际","方便","应答","判定","类型","与否","void","以","string","txntype","type","都","getbillbytracenumasync","第三方","看","0","从","统计","getbills","后","或","：",".","/","交易","当前","同步","使用","位","qr","可","}","all","onresult","应","信息","可以","账单","因为","相对","才能","@","内存","订单","。","response","列表","return","getbillsasync","详情","下","okhttp","transconstants","失败","*","条数","int","银行","还",")","见","处理","）","操作","返回","此次","[","表","parcelable","造成","onerror","接口","加入","出错","扫码","...","if","这次","了","li","中","时候","第三","param","pos","交互","分别","确认","对于","和","&&","泄露","p","public","!","override","或是"," ","throws","是","listener","cilsdk","09","状态","page","你","(","gettxn","new","根据","注意","{","的","三方","开始","_","依据","callback",">","'","标志","异步","cilresponse","ex","网络",":","<","查询","收银员","tracenum","进入","以上","具体来说","部分","数据","请求","来","card","获取","近","会","银员","库","码","调用"],"title":"账单查询","title_tokens":["账单","查询"]},{"location":"documentation/sdkapi/#_9","text":"结算需求主要用于每日交易结束时或收银员交接班时,对某段时间内的账款核对。商户每日交易结束后,收银员需要统计并核对所有的交易,核对交易统计准确后结算，打印出结算单。 结算会涉及到一个概念-- 批次号 ,我们在前面的交易都会传入一个批次号给 request ,调用结算之后,后续的交易需要将这个批次号加1,因为此批次已经打包结算掉了。 //batchNum 批次号 CILSDK.transSettleAsync(batchNum, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { //打印结算单 } @Override public void onError(Parcelable cilRequest, Exception e) { //结算出错 } }); 如果使用讯联样式结算UI、逻辑直接使用 注意,使用SettleDaoUtil工具类是必须先初始化，SettleDaoUtil.getInstance().init(); SettleDaoUtil.getInstance().gotoLiquidation(context)","text_tokens":["工具","，","结算","时","批次","所有","final","接班","收银","结束","概念","getinstance","到","讯联","内","账款","前面","逻辑","用于","先",";",",","将","gotoliquidation","号","传入","商户","交接班","、","exception","在","一个","需要","--","void","都","init","样式","准确","统计","交接","或","后","初始","/",".","如果","交易","必须","使用","}","1","onresult","对","因为","@","。","核对","response","号加","此","打印","已经","需求",")","掉","给","我们","parcelable","初始化","某","后续","onerror","settledaoutil","出错","了","每日","涉及","之后","时间","public","override"," ","是","cilsdk","段时间","request","cilrequest","并","(","直接","出","单","new","注意","{","的","ui","callback",">","打包","context","cilresponse","<","收银员","主要","这个","batchnum","类","e","transsettleasync","会","银员","调用"],"title":"结算","title_tokens":["结算"]},{"location":"documentation/sdkapi/#_10","text":"本模块可用于根据交易信息打印所需的消费票据。接口不仅提供了一套固定格式的小票样式，而且还可以根据需要自定义打印样式。 主要功能包括小票打印、二维码打印、条形码打印以及图片打印。 特别注意: 中国人民银行和中国银联为了规范市场上的POS机终端，要求终端打印的签购单必须合乎规范，规范内容包括必须打印的字段与正确的字段内容。 签购单规范详情见 签购单规范 打印银行卡类交易、扫码类交易小票 /** trans 交易信息 * lineBreak 小票结尾需要走纸换行的行数 * formatTransCode @FormatTransCode String类型，小票的交易类型 * kind @ReceiptSubtitle int类型，小票的子标题，判断是商户联或者是客户联 * isForeignTrans 是否是外卡类交易 */ CILSDK.printKindsReceipts(trans,lineBreak,formatTransCode, kind, isForeignTrans, new Callback<PrinterResult>(){ @Override public void onResult(PrinterResult response) { if (null ！= printerResult && !\"打印成功\".equals(printerResult.toString())) { //打印成功 } } @Override public void onError(Parcelable cilRequest, Exception e) { //打印失败 } }); 打印结算小票 /** * 打印结算小票 * * transSettles 结算信息List * transDatetime 结算时间 * lineBreak 打印结尾换行数 * formatTransCode 结算类型；TransConstants.TRANS_SETTLE_DETAILS：结算详情小票；TransConstants.TRANS_SETTLE_TOTAL：结算统计小票 * callback 回调 */ CILSDK.printSettleReceipts(transSettles, transDatetime,batchNum, lineBreak, formatTransCode, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 自定义打印 注意：使用自定义打印方法时，若打印内容超过2000个字符，请使用分段打印方式，否则可能出现DeviceRTException /** * 根据二进制数据打印(根据打印规范用户自定义打印小票样式) * * buffer 打印内容 * lineBreak 换行数 * callback 回调 */ CILSDK.printBufferReceipt(buffer, lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印二维码 /** * 打印二维码 * * qrCode 二维码内容 * position 打印位置 0:左对齐；1居中；2：右对齐 * width 二维码宽度 * callback 回调 * */ CILSDK.printQRCode(qrCode,position,width,lineBreak,new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印条形码 /** * 打印条形码 * * barCode 条形码数字 * position 条形码位置 0:左对齐；1居中；2：右对齐 * lineBreak 换行数 * callback 回调 */ CILSDK.printBarCode(String barCode, int position, int lineBreak, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } }); 打印图片 /** * 打印图片 * * bitmap 图片Bitmap * lineBreak 换行数 * offset 偏移量 * callback 回调 * */ CILSDK.printImage(bitmap, lineBreak, offset, new Callback<PrinterResult>() { @Override public void onResult(PrinterResult result) { if (null != result && !\"打印成功\".equals(result.toString())){ } } @Override public void onError(Parcelable cilRequest, Exception e) { } });","text_tokens":["，","结算","时","段","自定","换行","；","printbarcode","包括","trans","本","市场","内容","对齐","右","transdatetime","结尾","buffer","定义","字","用于",";",",","transsettles","要求","正确","=","偏移","形码","null","devicertexception","barcode","规范市场","客户","formattranscode","商户","中国人民银行","进制","二进制","银行卡","提供","若","、","exception","二维","成功","方法","需要","类型","string","void","一套","样式","total","0","统计","details","判断","/",".","：","签购","交易","条形","必须","否则","请","使用","居中","可","联","}","kind","小票","tostring","1","onresult","二维码","出现","信息","@","自定义","而且","offset","。","合乎","response","position","消费","详情","宽度","外卡","所","transconstants","*","需","失败","int","还","银行","可能",")","中国银联","见","终端","是否是","字符","数字","parcelable","2","行数","onerror","result","接口","扫码","printkindsreceipts","分段","银联","settle","与","if","了","国人","是否","固定","pos","特别","和","&&","偏移量","模块","时间","qrcode","条形码","标题","public","!","机","printerresult","override","人民"," ","是","cilsdk","位置","功能","cilrequest","左","receiptsubtitle","equals","(","上","图片","以及","单","根据","注意","交易类型","的","new","票据","{","！","linebreak","bitmap","_","printbufferreceipt","走纸","或者","callback",">","用户","超过","printimage",":","isforeigntrans","<","为了","子标题","回调","主要","规范","batchnum","width","不仅","类","个字符","printsettlereceipts","数据","list","格式","数","e","方式","printqrcode","中国","\"","2000","可以","打印"],"title":"打印","title_tokens":["打印"]},{"location":"documentation/sdkapi/#_11","text":"考虑到使用 SDK 的时候可能还会有其他需求,比如 获取 POS 机的 SN 号 、 设置密钥索引 等,在这里,我们也提供了一部分接口。 获取 SDK 版本 //版本名 String versionName = CILSDK.VERSION_NAME; //版本号 int versionCode = CILSDK.VERSION_CODE; 获取 SN 号 //SN号 String snCode = CILSDK.getDeviceSN(); 设置流水号 //serialNum范围：1~999999 boolean isSuccess = CILSDK.setSerialNum(int serialNum); 获取流水号 //序列号 int serialNum = CILSDK.getSerialNum(); 设置批次号 //batchNum范围：1~999999 boolean isSuccess = CILSDK.setBatchNum(int batchNum); 获取批次号 //批次号 int batchNum = CILSDK.getBatchNum(); 设置联迪密钥区 //1-15的设值范围 CILSDK.setTingA8KeyIndex(2); 设置密钥索引 //分别对应MAIN MAC PIN MES //1-255的设值范围 //可以使用下方提供数值,也可以根据自身程序设值 CILSDK.setTingKeyIndex(4,101,10,150); 以上两个方法请在连接刷卡器(CILSDK.connect)之前使用","text_tokens":["序列","刷卡器","一部分","批次","name","设置","101","流水","versioncode","到",";",",","connect","version","=","settingkeyindex","sdk","序列号","号","15","boolean","versionname","提供","、","在","serialnum","~","4","方法","10","比如","设值","string","连接","/",".","：","索引","sncode","请","使用","sn","1","这里","-","流水号","main","255","。","mes","需求","密钥","int","对应","可能",")","getserialnum","我们","2","自身","一部","数值","名","接口","code","有","了","getbatchnum","时候","区","pos","分别","两个","还会","mac","机","其他","等"," ","issuccess","cilsdk","setserialnum","版本号","也","联迪","(","getdevicesn","根据","的","settinga8keyindex","之前","考虑","_","150","版本","下方","程序","以上","batchnum","部分","范围","刷卡","setbatchnum","999999","获取","pin","可以"],"title":"其他设置","title_tokens":["其他","设置"]},{"location":"documentation/sdkapi/#_12","text":"CILPayUtil /** * 将respCode翻译成对应中文解释 */ CILPayUtil.translate(context, respCode)); /** * 将Trans类中的transCode翻译成打印所需的对象 */ CILPayUtil.getFormatTransCode(transCode); /** * 根据billingCurr判断交易是否为外卡类的DCC交易 */ CILPayUtil.isDCCPay(billingCurr); /** * 判断交易是否成功 */ CILPayUtil.isTransSuccess(trans); /** * 根据Trans类中的transCode判断交易是否属于扫码类交易 */ CILPayUtil.isQrPay(transCode); ReceiptFormatUtils /** * 根据Trans类中的TransCode翻译成对应的中文解释 */ ReceiptFormatUtils.getTransType(transCode); /** * 将明文的卡号修改为\"前六后四中间为四个*\"的样式 */ ReceiptFormatUtils.handleCardNum(cardNum);","text_tokens":["*","需","四","对应","billingcurr","成功","(",")","isqrpay","根据","的","类中","样式","trans","getformattranscode","gettranstype","四个","receiptformatutils","扫码","判断","翻译成","/",".","context","为","isdccpay","交易","前六后","对象","cardnum","属于","是否","cilpayutil","修改","明文","transcode","translate","respcode",";",",","dcc","译成","类","将","中间","中文","翻译","解释","卡号","istranssuccess"," ","handlecardnum","\"","外卡","所","打印"],"title":"工具类","title_tokens":["工具","类"]},{"location":"documentation/sdkapi/#_13","text":"Copyright (c) 2016 cardinfolink.com","text_tokens":["cardinfolink"," ","2016",")","(","com","copyright",".","c"],"title":"许可证","title_tokens":["许可","许可证"]},{"location":"documentation/sdkapi/#javadoc","text":"java document 详情见 javadoc","text_tokens":[" ","见","javadoc","详情","java","document"],"title":"JAVADOC","title_tokens":["javadoc"]},{"location":"documentation/signIn/","text":"签到 签到其实也就是更新工作密钥的一个过程 ( 下载工作密钥+装载工作密钥 ),讯联网关平台要求应用需要每天签到一次。 CILSDK.signIn(new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { //签到成功 } @Override public void onError(Parcelable cilRequest, Exception e) { //签到出错 } });","text_tokens":["密钥","讯","cilrequest","exception","成功","一个","(",")","平台","应用","需要","装载","new","联网","{","的","parcelable","void","onerror","signin","出错","下载","callback",">","工作","/",".","cilresponse","签到","<","}","每天","过程","更新",",","onresult",";","关","要求","@","public","override","其实","+","。"," ","一次","cilsdk","就是","也","e"],"title":"signIn","title_tokens":["signin"]},{"location":"documentation/tip/","text":"小费 注意: 通过对一笔交易收取小费。 小费最多收取交易金额的20% 小费只能成功收取一次 消费撤销后不能再次收取 CILRequest request = new CILRequest(); request.setCardNum(cardNumber); request.setReferenceNumber(trans.getRefNum()); request.setBatchNum(trans.getBatchNum()); request.setTraceNum(trans.getTraceNum()); request.setTransDatetime(trans.getTransDatetime()); request.setRevAuthCode(trans.getRevAuthCode()); request.setAmount(amount);//小费金额 CILSDK.takeTip(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable parcelable, Exception e) { ... } }); 小费撤销 CILRequest request = new CILRequest(); request.setCardNum(cardNo); request.setAmount(trans.getTransAmt()); request.setReferenceNumber(trans.getRefNum()); request.setRevAuthCode(trans.getRevAuthCode()); request.setBatchNum(trans.getBatchNum()); request.setTraceNum(trans.getTraceNum()); request.setTransDatetime(trans.getTransDatetime()); CILSDK.revokeTip(request, new Callback<CILResponse>() { @Override public void onResult(CILResponse cilResponse) { ... } @Override public void onError(Parcelable parcelable, Exception e) { ... } });","text_tokens":["exception","cilrequest","成功","(",")","new","注意","parcelable","{","的","getrefnum","void","onerror","trans","settransdatetime","amount","gettracenum","一笔","callback",">","...","后","多","/",".","cardno","cilresponse","交易","getbatchnum","gettransamt",":","settracenum","<","再次","收取","setrevauthcode","}","金额","撤销","通过",";",",","onresult","对","不能","只能","revoketip","小费","taketip","@","=","public","override","cardnumber","。","setreferencenumber"," ","setbatchnum","e","gettransdatetime","消费","setcardnum","一次","cilsdk","20%","request","getrevauthcode","setamount","最"],"title":"Tip","title_tokens":["tip"]},{"location":"documentation/transSettle/","text":"结算 结算需求主要用于每日交易结束时或收银员交接班时,对某段时间内的账款核对。商户每日交易结束后,收银员需要统计并核对所有的交易,核对交易统计准确后结算，打印出结算单。 结算会涉及到一个概念-- 批次号 ,我们在前面的交易都会传入一个批次号给 request ,调用结算之后,后续的交易需要将这个批次号加1,因为此批次已经打包结算掉了。 //batchNum 批次号 CILSDK.transSettleAsync(batchNum, new Callback<CILResponse>() { @Override public void onResult(final CILResponse response) { //打印结算单 } @Override public void onError(Parcelable cilRequest, Exception e) { //结算出错 } }); 如果使用讯联样式结算UI、逻辑直接使用 注意,使用SettleDaoUtil工具类是必须先初始化，SettleDaoUtil.getInstance().init(); SettleDaoUtil.getInstance().gotoLiquidation(context)","text_tokens":["工具","，","结算","时","批次","所有","final","接班","收银","结束","概念","getinstance","到","讯联","内","账款","前面","逻辑","用于","先",";",",","将","gotoliquidation","号","传入","商户","交接班","、","exception","在","一个","需要","--","void","都","init","样式","准确","统计","交接","或","后","初始","/",".","如果","交易","必须","使用","}","1","onresult","对","因为","@","。","核对","response","号加","此","打印","已经","需求",")","掉","给","我们","parcelable","初始化","某","后续","onerror","settledaoutil","出错","了","每日","涉及","之后","时间","public","override"," ","是","cilsdk","段时间","request","cilrequest","并","(","直接","出","单","new","注意","{","的","ui","callback",">","打包","context","cilresponse","<","收银员","主要","这个","batchnum","类","e","transsettleasync","会","银员","调用"],"title":"transSettle","title_tokens":["transsettle"]},{"location":"flowChart/overview/","text":"一、激活环节 只需要在初次使用终端时操作一次，内容包括了激活、初始化、下载参数。 * 序列图 激活 激活设备，有老版和新版两种激活方式 新版激活接口(入参激活码)： CILSDK.activeWithCodeSync(activeCode, deviceToken, new Callback ()); 老版激活接口： CILSDK.active(merCode, termCode, new Callback<CILResponse>() 参数 参数名称 样例 备注 merCode 商户代码 021290050110001 15位数字，激活时必填 termCode 终端代码 00000001 8位数字，激活时必填 new Callback<CILResponse> 是回调函数 参数下载 参数下载在主要应用在以下两种情况： 1. 激活时下载参数 2. 参数修改后下载参数 CILSDK.downloadParams(merCode, termCode, new com.cardinfolink.pos.listener.Callback<CILResponse>() 其中， new com.cardinfolink.pos.listener.Callback<CILResponse>() 是回调函数 初始化 初始化主要是终端密钥下载，包含了主密钥下载和工作密钥下载。其主要应用在以下两种情况： 1.激活时初始化密钥 2.需要更新密钥时初始化 CILSDK.downloadParamsWithProgress(new ProgressCallback<CILResponse>() 二、签到 签到其实就是一个更新密钥的过程，激活时已经覆盖了每日一次签到的操作。 CILSDK.signIn(new Callback<CILResponse>() 三、配置 可配置参数 1. 批次号、流水号 批次号用于结算，流水号（凭证号）定位本批每一笔交易唯一索引； 设置批次号 boolean isSuccess = CILSDK.setBatchNum(int batchNum); 获取批次号 int batchNum = CILSDK.getBatchNum(); 设置流水号 boolean isSuccess = CILSDK.setSerialNum(int serialNum); 获取流水号 int serialNum = CILSDK.getSerialNum(); 四、打印 交易成功后，需要打印签购单，一般打印两联：商户联和客户联。商户联在持卡人签名后由商户保存。交易成功后，会自动打印商户联。 需要补打小票时，可以早交易明细中找到补打功能，打印商户联。 序列图 打印银行类／扫码交易小票 CILSDK.printKindsReceipts(trans,lineBreak,formatTransCode, kind, isForeignTrans, bitmap, new Callback<PrinterResult>() 参数 参数名称 trans 交易信息 lineBreak 小票结尾需要走纸换行的行数 formatTransCode 小票的交易类型（String类型） kind 小票的子标题，判断是商户联或者是客户联(int) isForeignTrans 是否是外卡类交易 bitmap logo图标 Callback 回调 打印结算小票 CILSDK.printSettleReceipts(transSettles, transDatetime,batchNum, lineBreak, formatTransCode, new Callback<PrinterResult>() 参数 参数名称 transSettles 结算信息List transDatetime 结算时间 batchNum 批次号 lineBreak 打印结尾换行数 formatTransCode 结算类型 Callback 回调 自定义打印 CILSDK.printBufferReceipt(buffer, lineBreak,new Callback<PrinterResult>() 参数 参数名称 buffer 打印内容 linebreak 打印结尾换行数 Callback 回调 打印二维码 CILSDK.printQRCode(qrCode,position,width,lineBreak,new Callback<PrinterResult>() 参数 参数名称 qrCode 二维码 position 二维码位置 width 二维码大小 lineBreak 打印结尾换行数 Callback 回调 打印条形码 CILSDK.printBarCode(String barCode, int position, int lineBreak, new Callback<PrinterResult>() 参数 参数名称 barCode 条形码数字 position 条形码位置 lineBreak 打印结尾换行数 Callback 回调 打印图片 CILSDK.printImage(bitmap, lineBreak, offset, new Callback<PrinterResult>() 参数 参数名称 bitmap 图片Bitmap lineBreak 换行数 offset 偏移量 callback 回调 五、消费 1. 消费（插卡、刷卡、挥卡、手机NFC ） 支持开发者调用接口实现商家银行卡收款需求。 主要类型包括刷卡、插卡、挥卡以及手机NFC支付。 序列图 APP界面输入消费金额，选择银行卡支付，发起银行卡付款请求 SDK处理交易，返回应答码 APP翻译应答码，输出结果 如果消费成功，APP发送打印请求 SDK返回打印结果 2. 消费【扫码】 支持开发者调用接口实现商家扫码收款需求。 主要类型包括微信扫码和支付宝扫码。 序列图 APP界面输入消费金额，扫描二维码获取付款码信息，发起扫码付款请求 SDK处理消费请求，返回应答码 APP翻译应答码，输出结果 如果消费成功，APP发送打印请求 SDK返回打印结果 六、撤销 支持开发者调用接口实现商家撤销当日交易需求。 包括银行卡撤销和扫码撤销。 序列图 APP界面输入原交易凭证号，核对该笔交易，发起撤销请求 SDK处理撤销请求，返回应答码 APP翻译应答码，输出结果 撤销成功时，APP发送打印请求 SDK返回打印结果 七、退货 支持开发者调用接口实现商家非当日交易的退货需求。 包括银行卡退货和扫码退货。 序列图 APP界面输入订单相关信息（参考号／交易日期／退货金额），核对该笔交易，发起退货请求 SDK处理退货请求，返回应答码 APP翻译应答码，输出结果 退货成功时，APP发送打印请求 SDK返回打印结果 八、预授权类 支持开发者调用接口实现部分商家（如酒店、租车）的预授权类需求。 支持银行卡和微信支付宝付款码业务。 卡预授权类 1. 卡预授权 支持开发者调用接口实现部分商家（如酒店、租车）的预授权需求。 持卡人在宾馆、酒店或出租公司消费，消费与结算不在同一时间完成，特约单位通过POS预先向发卡机构索要授权的行为。 * 序列图 APP界面输入消费金额，发起预授权请求 SDK处理预授权请求，返回应答码 APP翻译应答码，输出结果 如果预授权成功，APP发送打印请求 SDK返回打印结果 2. 卡预授权撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权撤销需求。 预授权撤销用来撤销之前的预授权交易，不限制当日。 序列图 APP界面：输入原预授权信息（金额\\原交易日期\\授权码），核对该笔交易，发起预授权撤销请求 SDK处理撤销请求，返回应答码 APP翻译应答码，输出结果页面 预授权撤销成功时，APP发送打印请求 SDK返回打印结果 3. 卡预授权完成 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成需求。 预授权完成是持卡人消费完成并确定消费金额时，已取得预授权的特约商户在预授权金额或超出预授权金额一定比例的范围内，根据持卡人实际消费金额通过POS终端或手工方式完成持卡人付款的过程。 * 序列图 APP界面：输入预授权完成金额和原预授权信息（原交易日期\\授权码），核对该笔交易，发起预授权完成请求 SDK处理预授权完成请求，返回应答码 APP翻译应答码，输出结果 如果预授权完成成功，APP发送打印请求 SDK返回打印结果 4. 卡预授权完成撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成撤销需求。 用来撤销已经成功的预授权完成交易。不限当日。要解冻相应的预授权交易金额，需要完成撤销预授权. 序列图 APP界面：输入原凭证号，找到该笔预授权完成，发起预授权完成撤销请求 SDK处理预授权完成撤销请求，返回应答码 APP翻译应答码，输出结果 预授权完成撤销成功时，APP发送打印请求 SDK返回打印结果 码预授权类 1. 码预授权 支持开发者调用接口实现部分商家（如酒店、租车）的预授权需求。 在宾馆、酒店或出租公司消费，消费与结算不在同一时间完成，特约单位通过POS预先向微信或支付宝冻结资金。 序列图 APP界面输入消费金额，发起预授权请求 SDK处理预授权请求，返回应答码 APP翻译应答码，输出结果 如果预授权成功，APP发送打印请求 SDK返回打印结果 2. 码预授权撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权撤销需求。 预授权撤销用来撤销之前的预授权交易，不限制当日。 序列图 APP界面：输入原预授权信息（金额\\原交易日期\\授权码），核对该笔交易，发起预授权撤销请求 SDK处理撤销请求，返回应答码 APP翻译应答码，输出结果页面 预授权撤销成功时，APP发送打印请求 SDK返回打印结果 3. 码预授权完成 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成需求。 预授权完成是消费者消费完成并确定消费金额时，已取得预授权的特约商户在预授权金额或超出预授权金额一定比例的范围内，根据消费者实际消费金额通过POS终端或手工方式完成消费者付款的过程。 序列图 APP界面：输入预授权完成金额和原预授权信息（原交易日期\\授权码），核对该笔交易，发起预授权完成请求 SDK处理预授权完成请求，返回应答码 APP翻译应答码，输出结果 如果预授权完成成功，APP发送打印请求 SDK返回打印结果 4. 码预授权完成撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成撤销需求。 用来撤销已经成功的预授权完成交易。不限当日。要解冻相应的预授权交易金额，需要完成撤销预授权. 序列图 APP界面：输入原凭证号，找到该笔预授权完成，发起预授权完成撤销请求 SDK处理预授权完成撤销请求，返回应答码 APP翻译应答码，输出结果 预授权完成撤销成功时，APP发送打印请求 SDK返回打印结果 九、交易明细 支持开发者调用接口实现商家查看交易订单需求，同时可以补打、撤销订单。 序列图 APP界面：发起查看交易明细请求 SDK处理请求，返回应答码 APP翻译应答码，输出交易明细结果 对某一笔订单，APP发送打印商户联请求 SDK返回打印商户联结果 对某一笔订单，APP发送撤销请求 SDK返回撤销结果 调用方法 CILSDK.getBillsAsync(page, size, startTime, endTime, @BillType int type, callBackIsOnMainThread, new Callback<CILResponse>() 参数 参数名称 page 从0开始 size 每页返回的条数 type 账单类型 callback 回调 十、结算 支持开发者调用接口实现商家结算需求。 结算需求主要用于每日交易结束时或收银员交接班时，对某段时间内的账款核对。 序列图 APP界面：点击【去结算】，核对交易明细无误后【结算】，发起结算请求 SDK处理结算请求，返回应答码 APP翻译应答码，输出结果 结算成功时，APP发送打印结算单请求 SDK返回打印结算单结果 调用方法 CILSDK.transSettleAsync(batchNum, new Callback<CILResponse>() 参数 参数名称 batchNum 批次号 Callback 回调函数","text_tokens":["点击","本批","logo","该笔","自定","换行","包括","activewithcodesync","自动","结尾","定义","用于","租车",",","解冻","查看","发起","com","设备","银行卡","、","激活码","serialnum","四","方法","需要","／","类型","一时间","由","交接","签购","条形","签到","冻结","预先","小票","二维码","账单","流水号","offset","收款","消费","】","已经","三","密钥","处理","是否是","getserialnum","支持","初始化","行数","机构","原预","已","termcode","了","是否","qrcode"," ","是","listener","位置","业务","超出","并","new","交易类型","选择","printbufferreceipt","或者",">","主","printimage","包含","<","子标题","早","主要","参考","其中","用来","限制","范围","发卡","发送打印","消费者","银员","比例","每页","时","手机","；","设置","trans","账款","两种","实现","transsettles","devicetoken","取得","形码","同时","入参","（","名称","酒店","确定","4","特约","十","实际","大小","补打","预","样例","从","0","支付宝","如果","码预","持卡人","使用","1","对","@","自定义","翻译","。","老版","结果","getbillsasync","*","条数","某","无误","progresscallback","接口","扫码","printkindsreceipts","工作","七","endtime","修改","downloadparams","pos","偏移量","输入","其实","issuccess","同一时","两联","setserialnum","函数","功能","downloadparamswithprogress","页面","唯一","根据","单位","退货","之前","nfc","一笔","021290050110001","isforeigntrans","收银员","回调","width","activecode","3","请求","刷卡","限","一次","printqrcode","会","callbackisonmainthread","出租","码","调用","可以","相应","序列","，","批次","接班","结束","收银","流水","内容","下载","找到","向","billtype","宾馆","buffer","更新","偏移","barcode","非","boolean","当日","交接班","二维","开发","一个","应用","应答","新版","定位","以下","string","序列图","初始","或",".","索引","交易","一","位","可","激活","联","金额","五","图标",")","授权","终端","代码","日期","卡人","getbatchnum","每日","中","其","和","二","保存","时间","cilsdk","九","必填","page","初次","只","(","单","图片","【","走纸","不","每","插卡","持卡","cilresponse","界面","支付","starttime","cardinfolink","mercode","公司","batchnum","部分","六","数","setbatchnum","一般","获取","就是","00000001","结算","printbarcode","手工","情况","原","八","如","transdatetime","内","size","签名","通过",";","过程","=","15","客户","号","formattranscode","sdk","商户","凭证","微信","索要","同一","在","成功","挥卡","type","判断","后","：","\\","参数","冻结资金","kind","撤销","资金","active","信息","订单","开发者","核对","position","要","8","发送","行为","外卡","需求","int","app","银行","操作","）","返回","数字","2","一时","输出","环节","signin","去","相关","付款","一定","与","覆盖","有","明细","卡预","扫描","标题","条形码","printerresult","段时间","以及","的","同一时间","linebreak","bitmap","开始","callback","完成","商家","配置","类","printsettlereceipts","list","备注","方式","transsettleasync","打印"],"title":"概述和序列图","title_tokens":["概述","和","序列","序列图"]},{"location":"flowChart/overview/#_1","text":"只需要在初次使用终端时操作一次，内容包括了激活、初始化、下载参数。 * 序列图","text_tokens":["在","初次","*","序列","，","只","时","需要","终端","操作","初始化","包括","内容","下载","序列图","初始","了","参数","使用","激活","。"," ","一次","、"],"title":"一、激活环节","title_tokens":["、","环节","一","激活"]},{"location":"flowChart/overview/#_2","text":"激活设备，有老版和新版两种激活方式 新版激活接口(入参激活码)： CILSDK.activeWithCodeSync(activeCode, deviceToken, new Callback ()); 老版激活接口： CILSDK.active(merCode, termCode, new Callback<CILResponse>() 参数 参数名称 样例 备注 merCode 商户代码 021290050110001 15位数字，激活时必填 termCode 终端代码 00000001 8位数字，激活时必填 new Callback<CILResponse> 是回调函数","text_tokens":["激活码","，","00000001","(",")","时","终端","代码","new","数字","新版","termcode","接口","样例","callback",">","：",".","021290050110001","cilresponse","有","参数","activewithcodesync","<","位","激活","两种","回调","mercode",";","和",",","active","activecode","devicetoken","15","备注","老版"," ","商户","方式","是","设备","入参","cilsdk","函数","必填","8","名称"],"title":"激活","title_tokens":["激活"]},{"location":"flowChart/overview/#_3","text":"参数下载在主要应用在以下两种情况： 1. 激活时下载参数 2. 参数修改后下载参数 CILSDK.downloadParams(merCode, termCode, new com.cardinfolink.pos.listener.Callback<CILResponse>() 其中， new com.cardinfolink.pos.listener.Callback<CILResponse>() 是回调函数","text_tokens":["在","，","时","(",")","应用","new","2","以下","termcode","下载","callback",">","后","情况","：",".","cilresponse","参数","<","修改","downloadparams","激活","两种","cardinfolink","pos","主要","mercode","1","回调",",","其中"," ","com","是","listener","cilsdk","函数"],"title":"参数下载","title_tokens":["下载","参数"]},{"location":"flowChart/overview/#_4","text":"初始化主要是终端密钥下载，包含了主密钥下载和工作密钥下载。其主要应用在以下两种情况： 1.激活时初始化密钥 2.需要更新密钥时初始化 CILSDK.downloadParamsWithProgress(new ProgressCallback<CILResponse>()","text_tokens":["密钥","在","，","时","(",")","应用","终端","需要","new","2","初始化","以下","progresscallback","下载",">","主","初始","工作","情况","：",".","cilresponse","包含","了","<","激活","两种","主要","其","1","和","更新","。"," ","是","cilsdk","downloadparamswithprogress"],"title":"初始化","title_tokens":["初始","初始化"]},{"location":"flowChart/overview/#_5","text":"签到其实就是一个更新密钥的过程，激活时已经覆盖了每日一次签到的操作。 CILSDK.signIn(new Callback<CILResponse>()","text_tokens":["密钥","，","一个","时","(",")","操作","new","的","signin","callback",">",".","覆盖","cilresponse","了","签到","每日","<","激活","过程","更新","其实","。"," ","一次","cilsdk","就是","已经"],"title":"二、签到","title_tokens":["二","、","签到"]},{"location":"flowChart/overview/#_6","text":"可配置参数 1. 批次号、流水号 批次号用于结算，流水号（凭证号）定位本批每一笔交易唯一索引； 设置批次号 boolean isSuccess = CILSDK.setBatchNum(int batchNum); 获取批次号 int batchNum = CILSDK.getBatchNum(); 设置流水号 boolean isSuccess = CILSDK.setSerialNum(int serialNum); 获取流水号 int serialNum = CILSDK.getSerialNum();","text_tokens":["serialnum","int","，","唯一","结算","(",")","）","批次","本批","getserialnum","；","设置","定位","流水","一笔","每",".","索引","交易","getbatchnum","参数","可","用于","1","配置",";","batchnum","流水号","=","号"," ","issuccess","setbatchnum","boolean","凭证","cilsdk","获取","setserialnum","（","、"],"title":"三、配置","title_tokens":["、","配置","三"]},{"location":"flowChart/overview/#_7","text":"交易成功后，需要打印签购单，一般打印两联：商户联和客户联。商户联在持卡人签名后由商户保存。交易成功后，会自动打印商户联。 需要补打小票时，可以早交易明细中找到补打功能，打印商户联。 序列图 打印银行类／扫码交易小票 CILSDK.printKindsReceipts(trans,lineBreak,formatTransCode, kind, isForeignTrans, bitmap, new Callback<PrinterResult>() 参数 参数名称 trans 交易信息 lineBreak 小票结尾需要走纸换行的行数 formatTransCode 小票的交易类型（String类型） kind 小票的子标题，判断是商户联或者是客户联(int) isForeignTrans 是否是外卡类交易 bitmap logo图标 Callback 回调 打印结算小票 CILSDK.printSettleReceipts(transSettles, transDatetime,batchNum, lineBreak, formatTransCode, new Callback<PrinterResult>() 参数 参数名称 transSettles 结算信息List transDatetime 结算时间 batchNum 批次号 lineBreak 打印结尾换行数 formatTransCode 结算类型 Callback 回调 自定义打印 CILSDK.printBufferReceipt(buffer, lineBreak,new Callback<PrinterResult>() 参数 参数名称 buffer 打印内容 linebreak 打印结尾换行数 Callback 回调 打印二维码 CILSDK.printQRCode(qrCode,position,width,lineBreak,new Callback<PrinterResult>() 参数 参数名称 qrCode 二维码 position 二维码位置 width 二维码大小 lineBreak 打印结尾换行数 Callback 回调 打印条形码 CILSDK.printBarCode(String barCode, int position, int lineBreak, new Callback<PrinterResult>() 参数 参数名称 barCode 条形码数字 position 条形码位置 lineBreak 打印结尾换行数 Callback 回调 打印图片 CILSDK.printImage(bitmap, lineBreak, offset, new Callback<PrinterResult>() 参数 参数名称 bitmap 图片Bitmap lineBreak 换行数 offset 偏移量 callback 回调","text_tokens":["序列","，","结算","时","批次","logo","自定","换行","printbarcode","trans","内容","找到","transdatetime","自动","结尾","buffer","签名","定义",",","transsettles","偏移","形码","barcode","客户","号","formattranscode","商户","（","名称","在","二维","成功","需要","大小","／","补打","类型","string","由","判断","序列图","后","：",".","签购","交易","持卡人","条形","参数","联","kind","小票","二维码","信息","自定义","offset","。","position","外卡","int","图标","银行",")","）","是否是","数字","行数","扫码","printkindsreceipts","卡人","明细","中","是否","和","偏移量","保存","时间","qrcode","标题","条形码","printerresult"," ","是","cilsdk","两联","位置","功能","(","单","图片","new","交易类型","的","linebreak","bitmap","printbufferreceipt","走纸","或者","callback",">","printimage","持卡","isforeigntrans","<","子标题","回调","早","batchnum","width","类","printsettlereceipts","list","数","一般","printqrcode","会","可以","打印"],"title":"四、打印","title_tokens":["四","、","打印"]},{"location":"flowChart/overview/#_8","text":"1. 消费（插卡、刷卡、挥卡、手机NFC ） 支持开发者调用接口实现商家银行卡收款需求。 主要类型包括刷卡、插卡、挥卡以及手机NFC支付。 序列图 APP界面输入消费金额，选择银行卡支付，发起银行卡付款请求 SDK处理交易，返回应答码 APP翻译应答码，输出结果 如果消费成功，APP发送打印请求 SDK返回打印结果 2. 消费【扫码】 支持开发者调用接口实现商家扫码收款需求。 主要类型包括微信扫码和支付宝扫码。 序列图 APP界面输入消费金额，扫描二维码获取付款码信息，发起扫码付款请求 SDK处理消费请求，返回应答码 APP翻译应答码，输出结果 如果消费成功，APP发送打印请求 SDK返回打印结果","text_tokens":["需求","序列","app","，","银行","开发","成功","二维","）","挥卡","处理","返回","以及","支持","【","2","手机","应答","发送","类型","包括","选择","nfc","输出","接口","扫码","序列图","付款","支付宝","插卡",".","如果","交易","界面","支付","金额","商家","主要","实现","1","和","二维码","输入","信息","扫描","请求","翻译","开发者","。","刷卡","sdk"," ","发起","发送打印","收款","结果","消费","微信","获取","（","银行卡","、","打印","】","码","调用"],"title":"五、消费","title_tokens":["、","五","消费"]},{"location":"flowChart/overview/#_9","text":"支持开发者调用接口实现商家撤销当日交易需求。 包括银行卡撤销和扫码撤销。 序列图 APP界面输入原交易凭证号，核对该笔交易，发起撤销请求 SDK处理撤销请求，返回应答码 APP翻译应答码，输出结果 撤销成功时，APP发送打印请求 SDK返回打印结果","text_tokens":["需求","序列","app","，","银行","开发","成功","时","处理","返回","支持","该笔","应答","发送","包括","输出","接口","扫码","序列图","原","交易","界面","撤销","商家","实现","和","输入","请求","翻译","开发者","。","号","sdk"," ","核对","发起","发送打印","结果","凭证","银行卡","当日","打印","码","调用"],"title":"六、撤销","title_tokens":["六","撤销","、"]},{"location":"flowChart/overview/#_10","text":"支持开发者调用接口实现商家非当日交易的退货需求。 包括银行卡退货和扫码退货。 序列图 APP界面输入订单相关信息（参考号／交易日期／退货金额），核对该笔交易，发起退货请求 SDK处理退货请求，返回应答码 APP翻译应答码，输出结果 退货成功时，APP发送打印请求 SDK返回打印结果","text_tokens":["需求","序列","app","，","银行","开发","成功","时","）","处理","返回","／","支持","该笔","的","退货","应答","发送","包括","输出","接口","扫码","相关","序列图","日期","交易","界面","金额","商家","实现","和","参考","输入","信息","请求","翻译","非","订单","开发者","。","号","sdk"," ","核对","发起","发送打印","结果","（","银行卡","当日","打印","码","调用"],"title":"七、退货","title_tokens":["退货","七","、"]},{"location":"flowChart/overview/#_11","text":"支持开发者调用接口实现部分商家（如酒店、租车）的预授权类需求。 支持银行卡和微信支付宝付款码业务。 卡预授权类 1. 卡预授权 支持开发者调用接口实现部分商家（如酒店、租车）的预授权需求。 持卡人在宾馆、酒店或出租公司消费，消费与结算不在同一时间完成，特约单位通过POS预先向发卡机构索要授权的行为。 * 序列图 APP界面输入消费金额，发起预授权请求 SDK处理预授权请求，返回应答码 APP翻译应答码，输出结果 如果预授权成功，APP发送打印请求 SDK返回打印结果 2. 卡预授权撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权撤销需求。 预授权撤销用来撤销之前的预授权交易，不限制当日。 序列图 APP界面：输入原预授权信息（金额\\原交易日期\\授权码），核对该笔交易，发起预授权撤销请求 SDK处理撤销请求，返回应答码 APP翻译应答码，输出结果页面 预授权撤销成功时，APP发送打印请求 SDK返回打印结果 3. 卡预授权完成 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成需求。 预授权完成是持卡人消费完成并确定消费金额时，已取得预授权的特约商户在预授权金额或超出预授权金额一定比例的范围内，根据持卡人实际消费金额通过POS终端或手工方式完成持卡人付款的过程。 * 序列图 APP界面：输入预授权完成金额和原预授权信息（原交易日期\\授权码），核对该笔交易，发起预授权完成请求 SDK处理预授权完成请求，返回应答码 APP翻译应答码，输出结果 如果预授权完成成功，APP发送打印请求 SDK返回打印结果 4. 卡预授权完成撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成撤销需求。 用来撤销已经成功的预授权完成交易。不限当日。要解冻相应的预授权交易金额，需要完成撤销预授权. 序列图 APP界面：输入原凭证号，找到该笔预授权完成，发起预授权完成撤销请求 SDK处理预授权完成撤销请求，返回应答码 APP翻译应答码，输出结果 预授权完成撤销成功时，APP发送打印请求 SDK返回打印结果 码预授权类 1. 码预授权 支持开发者调用接口实现部分商家（如酒店、租车）的预授权需求。 在宾馆、酒店或出租公司消费，消费与结算不在同一时间完成，特约单位通过POS预先向微信或支付宝冻结资金。 序列图 APP界面输入消费金额，发起预授权请求 SDK处理预授权请求，返回应答码 APP翻译应答码，输出结果 如果预授权成功，APP发送打印请求 SDK返回打印结果 2. 码预授权撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权撤销需求。 预授权撤销用来撤销之前的预授权交易，不限制当日。 序列图 APP界面：输入原预授权信息（金额\\原交易日期\\授权码），核对该笔交易，发起预授权撤销请求 SDK处理撤销请求，返回应答码 APP翻译应答码，输出结果页面 预授权撤销成功时，APP发送打印请求 SDK返回打印结果 3. 码预授权完成 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成需求。 预授权完成是消费者消费完成并确定消费金额时，已取得预授权的特约商户在预授权金额或超出预授权金额一定比例的范围内，根据消费者实际消费金额通过POS终端或手工方式完成消费者付款的过程。 序列图 APP界面：输入预授权完成金额和原预授权信息（原交易日期\\授权码），核对该笔交易，发起预授权完成请求 SDK处理预授权完成请求，返回应答码 APP翻译应答码，输出结果 如果预授权完成成功，APP发送打印请求 SDK返回打印结果 4. 码预授权完成撤销 支持开发者调用接口实现部分商家（如酒店、租车）的预授权完成撤销需求。 用来撤销已经成功的预授权完成交易。不限当日。要解冻相应的预授权交易金额，需要完成撤销预授权. 序列图 APP界面：输入原凭证号，找到该笔预授权完成，发起预授权完成撤销请求 SDK处理预授权完成撤销请求，返回应答码 APP翻译应答码，输出结果 预授权完成撤销成功时，APP发送打印请求 SDK返回打印结果","text_tokens":["相应","序列","，","结算","时","该笔","手工","找到","向","原","如","内","宾馆","实现","租车","通过","过程","解冻","取得","sdk","号","发起","商户","微信","凭证","索要","（","银行卡","、","当日","同一","酒店","在","确定","4","特约","开发","成功","需要","实际","应答","一时间","预","序列图","支付宝","或","：",".","如果","码预","持卡人","交易","\\","冻结","冻结资金","预先","金额","撤销","1","资金","信息","翻译","开发者","。","核对","结果","消费","要","发送","行为","打印","已经","需求","*","app","银行","授权","）","处理","终端","返回","支持","2","机构","原预","已","一时","输出","接口","付款","卡人","日期","一定","与","pos","卡预","和","输入","时间"," ","同一时","是","业务","超出","并","页面","比例","根据","单位","的","同一时间","之前","不","持卡","完成","界面","支付","商家","公司","部分","类","用来","限制","范围","3","请求","发卡","发送打印","限","方式","消费者","出租","码","调用"],"title":"八、预授权类","title_tokens":["预","授权","八","类","、"]},{"location":"flowChart/overview/#_12","text":"支持开发者调用接口实现商家查看交易订单需求，同时可以补打、撤销订单。 序列图 APP界面：发起查看交易明细请求 SDK处理请求，返回应答码 APP翻译应答码，输出交易明细结果 对某一笔订单，APP发送打印商户联请求 SDK返回打印商户联结果 对某一笔订单，APP发送撤销请求 SDK返回撤销结果 调用方法 CILSDK.getBillsAsync(page, size, startTime, endTime, @BillType int type, callBackIsOnMainThread, new Callback<CILResponse>() 参数 参数名称 page 从0开始 size 每页返回的条数 type 账单类型 callback 回调","text_tokens":["需求","每页","序列","app","，","int","开发","条数","方法","(",")","处理","返回","支持","new","名称","某","应答","补打","发送","的","类型","type","输出","page","开始","接口","0","从","一笔","序列图","callback",">","：",".","cilresponse","交易","明细","billtype","界面","size","endtime","参数","<","starttime","联","回调","撤销","商家","实现",",","对","码","查看","账单","@","请求","翻译","订单","开发者","。","sdk"," ","发起","发送打印","商户","结果","同时","getbillsasync","cilsdk","callbackisonmainthread","、","打印","可以","调用"],"title":"九、交易明细","title_tokens":["交易","、","明细","九"]},{"location":"flowChart/overview/#_13","text":"支持开发者调用接口实现商家结算需求。 结算需求主要用于每日交易结束时或收银员交接班时，对某段时间内的账款核对。 序列图 APP界面：点击【去结算】，核对交易明细无误后【结算】，发起结算请求 SDK处理结算请求，返回应答码 APP翻译应答码，输出结果 结算成功时，APP发送打印结算单请求 SDK返回打印结算单结果 调用方法 CILSDK.transSettleAsync(batchNum, new Callback<CILResponse>() 参数 参数名称 batchNum 批次号 Callback 回调函数","text_tokens":["序列","，","结算","时","点击","批次","接班","收银","结束","内","账款","实现","用于",",","sdk","号","发起","交接班","名称","开发","成功","方法","应答","调用","序列图","交接","或","后","：",".","交易","参数","对","翻译","开发者","。","核对","结果","发送","】","需求","app",")","处理","返回","支持","某","无误","输出","去","接口","明细","每日","时间"," ","cilsdk","段时间","函数","(","单","new","【","的","callback",">","cilresponse","界面","<","收银员","回调","商家","主要","batchnum","请求","发送打印","transsettleasync","银员","码","打印"],"title":"十、结算","title_tokens":["结算","、","十"]},{"location":"flowChart/systemFlowChart/","text":"概要 本文档详细介绍了用户APP、SDK与后台之间的交互作用，用图形直观简洁的介绍每个功能，并附有详细的文字说明加以解释。 初始化 激活 CIL分配商户号、终端号；sdk从终端获取sn号验证身份，从云端获取devicetoken，将上述信息上传到管理平台验证身份，身份合格后将参数下载到sdk内。 主密钥下载 主密钥下载：采用非对称加密方式，获取主密钥KEY，并启动主密钥。 剩余工作密钥下载 剩余工作密钥下载：下载工作密钥并装载；下载aid并装载；下载ic公钥并装载。 消费 银行卡消费 银行卡消费：输入金额，刷卡操作后，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 扫码消费 扫码消费：输入金额后，扫描消费者付款码，加上终端信息，全部报文经加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 撤销 银行卡撤销 银行卡撤销：输入凭证号本地获取原交易信息，刷卡操作后，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 扫码撤销 扫码撤销：输入凭证号本地获取原交易信息，全部报文经加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 退货 银行卡退货 银行卡退货：输入金额、交易日期、参考号等获取原交易信息，刷卡操作后，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 扫码退货 扫码撤销：输入金额、交易日期和参考号本地获取原交易信息，全部报文经加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 预授权类 卡预授权类 预授权 预授权：输入金额，刷卡操作后，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 预授权撤销 预授权撤销：输入相关信息获取原交易，刷卡操作后，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 预授权完成 预授权完成：输入相关信息获取预授权交易，输入预授权完成金额后，刷卡操作，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 预授权完成撤销 预授权完成撤销：输入相关信息获取预授权完成交易，刷卡操作后，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 码预授权类 * 扫码预授权 扫码预授权：输入金额后，扫描消费者付款码，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 扫码预授权撤销 扫码预授权撤销：输入相关信息获取原交易，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 扫码预授权完成 扫码预授权撤销：输入相关信息获取交易相关信息，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 扫码预授权完成撤销 扫码预授权完成撤销：输入相关信息获取交易相关信息，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文。 明细查询 明细查询 明细查询：发送终端信息到api，加密模块加密全部报文后返回mac数据，经过8583报文处理模块处理后，发送到管理平台，管理平台返回应答报文，终端显示。 结算 结算 结算：发送终端信息、商户号、结算批次号到api，加密模块加密全部报文后返回mac数据，经过8583报文处理模块处理后，发送到管理平台，管理平台返回应答报文，终端显示。 小费 收取小费 收取小费：app发起交易，将原交易信息、消费金额传送给api，加密模块加密全部报文后返回mac数据，经过8583报文处理模块处理后，发送到交易网关，交易网关返回应答报文，终端显示交易成功。 小费撤销 小费撤销：app发起交易，将原小费交易信息传送给api，加密模块加密全部报文后返回mac数据，经过8583报文处理模块处理后，发送到交易网关，交易网关返回应答报文，终端显示交易成功。 余额查询 余额查询 余额查询：app发起余额查询，刷卡后，读卡模块获取卡片信息，加密模块获得密码密文，同卡片信息一起，全部报文经过加密模块加密后返回mac数据，经过8583报文处理模块处理后，发送给交易网关，网关返回应答报文，app显示刷卡余额。","text_tokens":["合格","，","结算","批次","装载","说明","；","本","下载","原","后台","到","内","余额","简洁","获得","收取","同","将","送给","本地","交互作用","分配","devicetoken","解释","发送给","sdk","公钥","号","发起","商户","凭证","报文","银行卡","、","直观","8583","传到","成功","对称","非对称","网关","应答","预","从","初始","后","云端","：","码预","交易","文字说明","参数","介绍","sn","激活","金额","撤销","信息","附有","。","消费","发送","密钥","*","全部","app","银行","剩余","授权","之间","图形","操作","终端","处理","发送到","返回","cil","管理","经过","给","初始化","详细","身份","文档","扫码","相关","付款","日期","显示","工作","与","采用","启动","了","明细","ic","加上","加密","交互","用","卡预","经","和","输入","模块","小费","扫描","作用","mac","等"," ","概要","每个","加以","功能","并","密文","平台","上","aid","的","密码","退货","送到","用户","主","上述","完成","key","查询","卡片","参考","读卡","类","数据","api","验证","传送","刷卡","一起","方式","消费者","获取","文字","码"],"title":"系统交互图","title_tokens":["图","交互","系统"]}]}